{
  "address": "0xA195f1d4430C94A2be33842A8D9bEF8464f7eAEE",
  "hash": "0x7a4b51331494bb7437d8e9ac4fb4d7cb2a1ff88554c7863d1c58722e4c33503c",
  "args": [
    "0x0795D90c6d60F7c77041862E9aE5059B4d5e0d7A"
  ],
  "receipt": {
    "to": null,
    "from": "0x0795D90c6d60F7c77041862E9aE5059B4d5e0d7A",
    "contractAddress": "0xA195f1d4430C94A2be33842A8D9bEF8464f7eAEE",
    "transactionIndex": 2,
    "gasUsed": {
      "type": "BigNumber",
      "hex": "0x149ccd"
    },
    "logsBloom": "0x
    "blockHash": "0xb59a8ae0172417b7f9f98b9fe06384bcc9d15772cbf3f4bf81be1ad060964088",
    "transactionHash": "0x7a4b51331494bb7437d8e9ac4fb4d7cb2a1ff88554c7863d1c58722e4c33503c",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 1190810,
        "transactionHash": "0x7a4b51331494bb7437d8e9ac4fb4d7cb2a1ff88554c7863d1c58722e4c33503c",
        "address": "0xA195f1d4430C94A2be33842A8D9bEF8464f7eAEE",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000795d90c6d60f7c77041862e9ae5059b4d5e0d7a"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xb59a8ae0172417b7f9f98b9fe06384bcc9d15772cbf3f4bf81be1ad060964088"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 1190810,
        "transactionHash": "0x7a4b51331494bb7437d8e9ac4fb4d7cb2a1ff88554c7863d1c58722e4c33503c",
        "address": "0xA195f1d4430C94A2be33842A8D9bEF8464f7eAEE",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000795d90c6d60f7c77041862e9ae5059b4d5e0d7a"
        ],
        "data": "0x0000000000000000000000000000000000000000002116545850052128000000",
        "logIndex": 4,
        "blockHash": "0xb59a8ae0172417b7f9f98b9fe06384bcc9d15772cbf3f4bf81be1ad060964088"
      }
    ],
    "blockNumber": 1190810,
    "confirmations": 1,
    "cumulativeGasUsed": {
      "type": "BigNumber",
      "hex": "0x17c270"
    },
    "effectiveGasPrice": {
      "type": "BigNumber",
      "hex": "0x746ad98751"
    },
    "status": 1,
    "type": 2,
    "byzantium": true
  },
  "artifact": {
    "_format": "hh-sol-artifact-1",
    "contractName": "Health",
    "sourceName": "contracts/erc20/Health.sol",
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_owner",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "spender",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "allowance",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "needed",
            "type": "uint256"
          }
        ],
        "name": "ERC20InsufficientAllowance",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "balance",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "needed",
            "type": "uint256"
          }
        ],
        "name": "ERC20InsufficientBalance",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "approver",
            "type": "address"
          }
        ],
        "name": "ERC20InvalidApprover",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "receiver",
            "type": "address"
          }
        ],
        "name": "ERC20InvalidReceiver",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "sender",
            "type": "address"
          }
        ],
        "name": "ERC20InvalidSender",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "spender",
            "type": "address"
          }
        ],
        "name": "ERC20InvalidSpender",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "InvalidAccount",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          }
        ],
        "name": "OwnableInvalidOwner",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "OwnableUnauthorizedAccount",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "spender",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Approval",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "previousOwner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Transfer",
        "type": "event"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "spender",
            "type": "address"
          }
        ],
        "name": "allowance",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "spender",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "approve",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "balanceOf",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "decimals",
        "outputs": [
          {
            "internalType": "uint8",
            "name": "",
            "type": "uint8"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getAgent",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "mint",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "name",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "owner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "signer",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "spender",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "proxy_approve",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "renounceOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newAgent",
            "type": "address"
          }
        ],
        "name": "setAgent",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "symbol",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "totalSupply",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "transfer",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "transferFrom",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "transferOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "bytecode": "0x60806040523480156200001157600080fd5b5060405162001ea938038062001ea98339818101604052810190620000379190620005a5565b80816040518060400160405280600981526020017f426c7565626572727900000000000000000000000000000000000000000000008152506040518060400160405280600981526020017f426c7565626572727900000000000000000000000000000000000000000000008152508160039081620000b6919062000851565b508060049081620000c8919062000851565b50505080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620001825760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040162000179919062000949565b60405180910390fd5b6200019381620001b860201b60201c565b50620001b1816a21165458500521280000006200027e60201b60201c565b5062000a3b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620002f35760006040517fec442f05000000000000000000000000000000000000000000000000000000008152600401620002ea919062000949565b60405180910390fd5b62000307600083836200030b60201b60201c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036200036157806002600082825462000354919062000995565b9250508190555062000437565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015620003f0578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401620003e793929190620009e1565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620004825780600260008282540392505081905550620004cf565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200052e919062000a1e565b60405180910390a3505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200056d8262000540565b9050919050565b6200057f8162000560565b81146200058b57600080fd5b50565b6000815190506200059f8162000574565b92915050565b600060208284031215620005be57620005bd6200053b565b5b6000620005ce848285016200058e565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200065957607f821691505b6020821081036200066f576200066e62000611565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620006d97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200069a565b620006e586836200069a565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620007326200072c6200072684620006fd565b62000707565b620006fd565b9050919050565b6000819050919050565b6200074e8362000711565b620007666200075d8262000739565b848454620006a7565b825550505050565b600090565b6200077d6200076e565b6200078a81848462000743565b505050565b5b81811015620007b257620007a660008262000773565b60018101905062000790565b5050565b601f8211156200080157620007cb8162000675565b620007d6846200068a565b81016020851015620007e6578190505b620007fe620007f5856200068a565b8301826200078f565b50505b505050565b600082821c905092915050565b6000620008266000198460080262000806565b1980831691505092915050565b600062000841838362000813565b9150826002028217905092915050565b6200085c82620005d7565b67ffffffffffffffff811115620008785762000877620005e2565b5b62000884825462000640565b62000891828285620007b6565b600060209050601f831160018114620008c95760008415620008b4578287015190505b620008c0858262000833565b86555062000930565b601f198416620008d98662000675565b60005b828110156200090357848901518255600182019150602085019450602081019050620008dc565b868310156200092357848901516200091f601f89168262000813565b8355505b6001600288020188555050505b505050505050565b620009438162000560565b82525050565b600060208201905062000960600083018462000938565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620009a282620006fd565b9150620009af83620006fd565b9250828201905080821115620009ca57620009c962000966565b5b92915050565b620009db81620006fd565b82525050565b6000606082019050620009f8600083018662000938565b62000a076020830185620009d0565b62000a166040830184620009d0565b949350505050565b600060208201905062000a356000830184620009d0565b92915050565b61145e8062000a4b6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063715018a611610097578063bcf685ed11610066578063bcf685ed1461029d578063dd62ed3e146102b9578063f2fde38b146102e9578063f551eb191461030557610100565b8063715018a6146102275780638da5cb5b1461023157806395d89b411461024f578063a9059cbb1461026d57610100565b806326f58e75116100d357806326f58e75146101a1578063313ce567146101bd57806340c10f19146101db57806370a08231146101f757610100565b806306fdde0314610105578063095ea7b31461012357806318160ddd1461015357806323b872dd14610171575b600080fd5b61010d610323565b60405161011a9190611046565b60405180910390f35b61013d60048036038101906101389190611101565b6103b5565b60405161014a919061115c565b60405180910390f35b61015b6103d8565b6040516101689190611186565b60405180910390f35b61018b600480360381019061018691906111a1565b6103e2565b604051610198919061115c565b60405180910390f35b6101bb60048036038101906101b691906111a1565b610411565b005b6101c56104e4565b6040516101d29190611210565b60405180910390f35b6101f560048036038101906101f09190611101565b6104ed565b005b610211600480360381019061020c919061122b565b610503565b60405161021e9190611186565b60405180910390f35b61022f61054b565b005b61023961055f565b6040516102469190611267565b60405180910390f35b610257610589565b6040516102649190611046565b60405180910390f35b61028760048036038101906102829190611101565b61061b565b604051610294919061115c565b60405180910390f35b6102b760048036038101906102b2919061122b565b61063e565b005b6102d360048036038101906102ce9190611282565b610712565b6040516102e09190611186565b60405180910390f35b61030360048036038101906102fe919061122b565b610799565b005b61030d61081f565b60405161031a9190611267565b60405180910390f35b606060038054610332906112f1565b80601f016020809104026020016040519081016040528092919081815260200182805461035e906112f1565b80156103ab5780601f10610380576101008083540402835291602001916103ab565b820191906000526020600020905b81548152906001019060200180831161038e57829003601f168201915b5050505050905090565b6000806103c0610849565b90506103cd818585610851565b600191505092915050565b6000600254905090565b6000806103ed610849565b90506103fa858285610863565b6104058585856108f7565b60019150509392505050565b823373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415801561049c5750600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156104d3576040517f6d187b2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104de848484610851565b50505050565b60006012905090565b6104f56109eb565b6104ff8282610a72565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6105536109eb565b61055d6000610af4565b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060048054610598906112f1565b80601f01602080910402602001604051908101604052809291908181526020018280546105c4906112f1565b80156106115780601f106105e657610100808354040283529160200191610611565b820191906000526020600020905b8154815290600101906020018083116105f457829003601f168201915b5050505050905090565b600080610626610849565b90506106338185856108f7565b600191505092915050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c59061136e565b60405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6107a16109eb565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108135760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161080a9190611267565b60405180910390fd5b61081c81610af4565b50565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600033905090565b61085e8383836001610bba565b505050565b600061086f8484610712565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146108f157818110156108e1578281836040517ffb8f41b20000000000000000000000000000000000000000000000000000000081526004016108d89392919061138e565b60405180910390fd5b6108f084848484036000610bba565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036109695760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016109609190611267565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109db5760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016109d29190611267565b60405180910390fd5b6109e6838383610d91565b505050565b6109f3610849565b73ffffffffffffffffffffffffffffffffffffffff16610a1161055f565b73ffffffffffffffffffffffffffffffffffffffff1614610a7057610a34610849565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610a679190611267565b60405180910390fd5b565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ae45760006040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610adb9190611267565b60405180910390fd5b610af060008383610d91565b5050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610c2c5760006040517fe602df05000000000000000000000000000000000000000000000000000000008152600401610c239190611267565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610c9e5760006040517f94280d62000000000000000000000000000000000000000000000000000000008152600401610c959190611267565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508015610d8b578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610d829190611186565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610de3578060026000828254610dd791906113f4565b92505081905550610eb6565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610e6f578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401610e669392919061138e565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610eff5780600260008282540392505081905550610f4c565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610fa99190611186565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ff0578082015181840152602081019050610fd5565b60008484015250505050565b6000601f19601f8301169050919050565b600061101882610fb6565b6110228185610fc1565b9350611032818560208601610fd2565b61103b81610ffc565b840191505092915050565b60006020820190508181036000830152611060818461100d565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110988261106d565b9050919050565b6110a88161108d565b81146110b357600080fd5b50565b6000813590506110c58161109f565b92915050565b6000819050919050565b6110de816110cb565b81146110e957600080fd5b50565b6000813590506110fb816110d5565b92915050565b6000806040838503121561111857611117611068565b5b6000611126858286016110b6565b9250506020611137858286016110ec565b9150509250929050565b60008115159050919050565b61115681611141565b82525050565b6000602082019050611171600083018461114d565b92915050565b611180816110cb565b82525050565b600060208201905061119b6000830184611177565b92915050565b6000806000606084860312156111ba576111b9611068565b5b60006111c8868287016110b6565b93505060206111d9868287016110b6565b92505060406111ea868287016110ec565b9150509250925092565b600060ff82169050919050565b61120a816111f4565b82525050565b60006020820190506112256000830184611201565b92915050565b60006020828403121561124157611240611068565b5b600061124f848285016110b6565b91505092915050565b6112618161108d565b82525050565b600060208201905061127c6000830184611258565b92915050565b6000806040838503121561129957611298611068565b5b60006112a7858286016110b6565b92505060206112b8858286016110b6565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061130957607f821691505b60208210810361131c5761131b6112c2565b5b50919050565b7f4e6f74204167656e74204163636f756e74000000000000000000000000000000600082015250565b6000611358601183610fc1565b915061136382611322565b602082019050919050565b600060208201905081810360008301526113878161134b565b9050919050565b60006060820190506113a36000830186611258565b6113b06020830185611177565b6113bd6040830184611177565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006113ff826110cb565b915061140a836110cb565b9250828201905080821115611422576114216113c5565b5b9291505056fea2646970667358221220668b1ff38adf17eb85af692acb12e1639a5870b4a0396284ca1b42bd5fd0a06564736f6c63430008180033",
    "deployedBytecode": "",
    "linkReferences": {},
    "deployedLinkReferences": {},
    "devdoc": {
      "errors": {
        "ERC20InsufficientAllowance(address,uint256,uint256)": [
          {
            "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
            "params": {
              "allowance": "Amount of tokens a `spender` is allowed to operate with.",
              "needed": "Minimum amount required to perform a transfer.",
              "spender": "Address that may be allowed to operate on tokens without being their owner."
            }
          }
        ],
        "ERC20InsufficientBalance(address,uint256,uint256)": [
          {
            "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
            "params": {
              "balance": "Current balance for the interacting account.",
              "needed": "Minimum amount required to perform a transfer.",
              "sender": "Address whose tokens are being transferred."
            }
          }
        ],
        "ERC20InvalidApprover(address)": [
          {
            "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
            "params": {
              "approver": "Address initiating an approval operation."
            }
          }
        ],
        "ERC20InvalidReceiver(address)": [
          {
            "details": "Indicates a failure with the token `receiver`. Used in transfers.",
            "params": {
              "receiver": "Address to which tokens are being transferred."
            }
          }
        ],
        "ERC20InvalidSender(address)": [
          {
            "details": "Indicates a failure with the token `sender`. Used in transfers.",
            "params": {
              "sender": "Address whose tokens are being transferred."
            }
          }
        ],
        "ERC20InvalidSpender(address)": [
          {
            "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
            "params": {
              "spender": "Address that may be allowed to operate on tokens without being their owner."
            }
          }
        ],
        "OwnableInvalidOwner(address)": [
          {
            "details": "The owner is not a valid owner account. (eg. `address(0)`)"
          }
        ],
        "OwnableUnauthorizedAccount(address)": [
          {
            "details": "The caller account is not authorized to perform an operation."
          }
        ]
      },
      "events": {
        "Approval(address,address,uint256)": {
          "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
        },
        "Transfer(address,address,uint256)": {
          "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
        }
      },
      "kind": "dev",
      "methods": {
        "allowance(address,address)": {
          "details": "See {IERC20-allowance}."
        },
        "approve(address,uint256)": {
          "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
        },
        "balanceOf(address)": {
          "details": "See {IERC20-balanceOf}."
        },
        "decimals()": {
          "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
        },
        "name()": {
          "details": "Returns the name of the token."
        },
        "owner()": {
          "details": "Returns the address of the current owner."
        },
        "renounceOwnership()": {
          "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
        },
        "symbol()": {
          "details": "Returns the symbol of the token, usually a shorter version of the name."
        },
        "totalSupply()": {
          "details": "See {IERC20-totalSupply}."
        },
        "transfer(address,uint256)": {
          "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
        },
        "transferFrom(address,address,uint256)": {
          "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
        },
        "transferOwnership(address)": {
          "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
        }
      },
      "version": 1
    },
    "evm": {
      "bytecode": {
        "functionDebugData": {
          "@_2198": {
            "entryPoint": null,
            "id": 2198,
            "parameterSlots": 1,
            "returnSlots": 0
          },
          "@_2839": {
            "entryPoint": null,
            "id": 2839,
            "parameterSlots": 2,
            "returnSlots": 0
          },
          "@_8598": {
            "entryPoint": null,
            "id": 8598,
            "parameterSlots": 1,
            "returnSlots": 0
          },
          "@_9003": {
            "entryPoint": null,
            "id": 9003,
            "parameterSlots": 1,
            "returnSlots": 0
          },
          "@_mint_3142": {
            "entryPoint": 638,
            "id": 3142,
            "parameterSlots": 2,
            "returnSlots": 0
          },
          "@_transferOwnership_2294": {
            "entryPoint": 440,
            "id": 2294,
            "parameterSlots": 1,
            "returnSlots": 0
          },
          "@_update_3109": {
            "entryPoint": 779,
            "id": 3109,
            "parameterSlots": 3,
            "returnSlots": 0
          },
          "abi_decode_t_address_fromMemory": {
            "entryPoint": 1422,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 1
          },
          "abi_decode_tuple_t_address_fromMemory": {
            "entryPoint": 1445,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 1
          },
          "abi_encode_t_address_to_t_address_fromStack": {
            "entryPoint": 2360,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 0
          },
          "abi_encode_t_uint256_to_t_uint256_fromStack": {
            "entryPoint": 2512,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 0
          },
          "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
            "entryPoint": 2377,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 1
          },
          "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
            "entryPoint": 2529,
            "id": null,
            "parameterSlots": 4,
            "returnSlots": 1
          },
          "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
            "entryPoint": 2590,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 1
          },
          "allocate_unbounded": {
            "entryPoint": null,
            "id": null,
            "parameterSlots": 0,
            "returnSlots": 1
          },
          "array_dataslot_t_string_storage": {
            "entryPoint": 1653,
            "id": null,
            "parameterSlots": 1,
            "returnSlots": 1
          },
          "array_length_t_string_memory_ptr": {
            "entryPoint": 1495,
            "id": null,
            "parameterSlots": 1,
            "returnSlots": 1
          },
          "checked_add_t_uint256": {
            "entryPoint": 2453,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 1
          },
          "clean_up_bytearray_end_slots_t_string_storage": {
            "entryPoint": 1974,
            "id": null,
            "parameterSlots": 3,
            "returnSlots": 0
          },
          "cleanup_t_address": {
            "entryPoint": 1376,
            "id": null,
            "parameterSlots": 1,
            "returnSlots": 1
          },
          "cleanup_t_uint160": {
            "entryPoint": 1344,
            "id": null,
            "parameterSlots": 1,
            "returnSlots": 1
          },
          "cleanup_t_uint256": {
            "entryPoint": 1789,
            "id": null,
            "parameterSlots": 1,
            "returnSlots": 1
          },
          "clear_storage_range_t_bytes1": {
            "entryPoint": 1935,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 0
          },
          "convert_t_uint256_to_t_uint256": {
            "entryPoint": 1809,
            "id": null,
            "parameterSlots": 1,
            "returnSlots": 1
          },
          "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
            "entryPoint": 2129,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 0
          },
          "divide_by_32_ceil": {
            "entryPoint": 1674,
            "id": null,
            "parameterSlots": 1,
            "returnSlots": 1
          },
          "extract_byte_array_length": {
            "entryPoint": 1600,
            "id": null,
            "parameterSlots": 1,
            "returnSlots": 1
          },
          "extract_used_part_and_set_length_of_short_byte_array": {
            "entryPoint": 2099,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 1
          },
          "identity": {
            "entryPoint": 1799,
            "id": null,
            "parameterSlots": 1,
            "returnSlots": 1
          },
          "mask_bytes_dynamic": {
            "entryPoint": 2067,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 1
          },
          "panic_error_0x11": {
            "entryPoint": 2406,
            "id": null,
            "parameterSlots": 0,
            "returnSlots": 0
          },
          "panic_error_0x22": {
            "entryPoint": 1553,
            "id": null,
            "parameterSlots": 0,
            "returnSlots": 0
          },
          "panic_error_0x41": {
            "entryPoint": 1506,
            "id": null,
            "parameterSlots": 0,
            "returnSlots": 0
          },
          "prepare_store_t_uint256": {
            "entryPoint": 1849,
            "id": null,
            "parameterSlots": 1,
            "returnSlots": 1
          },
          "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
            "entryPoint": null,
            "id": null,
            "parameterSlots": 0,
            "returnSlots": 0
          },
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
            "entryPoint": 1339,
            "id": null,
            "parameterSlots": 0,
            "returnSlots": 0
          },
          "shift_left_dynamic": {
            "entryPoint": 1690,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 1
          },
          "shift_right_unsigned_dynamic": {
            "entryPoint": 2054,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 1
          },
          "storage_set_to_zero_t_uint256": {
            "entryPoint": 1907,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 0
          },
          "update_byte_slice_dynamic32": {
            "entryPoint": 1703,
            "id": null,
            "parameterSlots": 3,
            "returnSlots": 1
          },
          "update_storage_value_t_uint256_to_t_uint256": {
            "entryPoint": 1859,
            "id": null,
            "parameterSlots": 3,
            "returnSlots": 0
          },
          "validator_revert_t_address": {
            "entryPoint": 1396,
            "id": null,
            "parameterSlots": 1,
            "returnSlots": 0
          },
          "zero_value_for_split_t_uint256": {
            "entryPoint": 1902,
            "id": null,
            "parameterSlots": 0,
            "returnSlots": 1
          }
        },
        "generatedSources": [
          {
            "ast": {
              "nativeSrc": "0:7961:46",
              "nodeType": "YulBlock",
              "src": "0:7961:46",
              "statements": [
                {
                  "body": {
                    "nativeSrc": "47:35:46",
                    "nodeType": "YulBlock",
                    "src": "47:35:46",
                    "statements": [
                      {
                        "nativeSrc": "57:19:46",
                        "nodeType": "YulAssignment",
                        "src": "57:19:46",
                        "value": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nativeSrc": "73:2:46",
                              "nodeType": "YulLiteral",
                              "src": "73:2:46",
                              "type": "",
                              "value": "64"
                            }
                          ],
                          "functionName": {
                            "name": "mload",
                            "nativeSrc": "67:5:46",
                            "nodeType": "YulIdentifier",
                            "src": "67:5:46"
                          },
                          "nativeSrc": "67:9:46",
                          "nodeType": "YulFunctionCall",
                          "src": "67:9:46"
                        },
                        "variableNames": [
                          {
                            "name": "memPtr",
                            "nativeSrc": "57:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "57:6:46"
                          }
                        ]
                      }
                    ]
                  },
                  "name": "allocate_unbounded",
                  "nativeSrc": "7:75:46",
                  "nodeType": "YulFunctionDefinition",
                  "returnVariables": [
                    {
                      "name": "memPtr",
                      "nativeSrc": "40:6:46",
                      "nodeType": "YulTypedName",
                      "src": "40:6:46",
                      "type": ""
                    }
                  ],
                  "src": "7:75:46"
                },
                {
                  "body": {
                    "nativeSrc": "177:28:46",
                    "nodeType": "YulBlock",
                    "src": "177:28:46",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nativeSrc": "194:1:46",
                              "nodeType": "YulLiteral",
                              "src": "194:1:46",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "197:1:46",
                              "nodeType": "YulLiteral",
                              "src": "197:1:46",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nativeSrc": "187:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "187:6:46"
                          },
                          "nativeSrc": "187:12:46",
                          "nodeType": "YulFunctionCall",
                          "src": "187:12:46"
                        },
                        "nativeSrc": "187:12:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "187:12:46"
                      }
                    ]
                  },
                  "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                  "nativeSrc": "88:117:46",
                  "nodeType": "YulFunctionDefinition",
                  "src": "88:117:46"
                },
                {
                  "body": {
                    "nativeSrc": "300:28:46",
                    "nodeType": "YulBlock",
                    "src": "300:28:46",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nativeSrc": "317:1:46",
                              "nodeType": "YulLiteral",
                              "src": "317:1:46",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "320:1:46",
                              "nodeType": "YulLiteral",
                              "src": "320:1:46",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nativeSrc": "310:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "310:6:46"
                          },
                          "nativeSrc": "310:12:46",
                          "nodeType": "YulFunctionCall",
                          "src": "310:12:46"
                        },
                        "nativeSrc": "310:12:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "310:12:46"
                      }
                    ]
                  },
                  "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                  "nativeSrc": "211:117:46",
                  "nodeType": "YulFunctionDefinition",
                  "src": "211:117:46"
                },
                {
                  "body": {
                    "nativeSrc": "379:81:46",
                    "nodeType": "YulBlock",
                    "src": "379:81:46",
                    "statements": [
                      {
                        "nativeSrc": "389:65:46",
                        "nodeType": "YulAssignment",
                        "src": "389:65:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "value",
                              "nativeSrc": "404:5:46",
                              "nodeType": "YulIdentifier",
                              "src": "404:5:46"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "411:42:46",
                              "nodeType": "YulLiteral",
                              "src": "411:42:46",
                              "type": "",
                              "value": "0xffffffffffffffffffffffffffffffffffffffff"
                            }
                          ],
                          "functionName": {
                            "name": "and",
                            "nativeSrc": "400:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "400:3:46"
                          },
                          "nativeSrc": "400:54:46",
                          "nodeType": "YulFunctionCall",
                          "src": "400:54:46"
                        },
                        "variableNames": [
                          {
                            "name": "cleaned",
                            "nativeSrc": "389:7:46",
                            "nodeType": "YulIdentifier",
                            "src": "389:7:46"
                          }
                        ]
                      }
                    ]
                  },
                  "name": "cleanup_t_uint160",
                  "nativeSrc": "334:126:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "value",
                      "nativeSrc": "361:5:46",
                      "nodeType": "YulTypedName",
                      "src": "361:5:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "cleaned",
                      "nativeSrc": "371:7:46",
                      "nodeType": "YulTypedName",
                      "src": "371:7:46",
                      "type": ""
                    }
                  ],
                  "src": "334:126:46"
                },
                {
                  "body": {
                    "nativeSrc": "511:51:46",
                    "nodeType": "YulBlock",
                    "src": "511:51:46",
                    "statements": [
                      {
                        "nativeSrc": "521:35:46",
                        "nodeType": "YulAssignment",
                        "src": "521:35:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "value",
                              "nativeSrc": "550:5:46",
                              "nodeType": "YulIdentifier",
                              "src": "550:5:46"
                            }
                          ],
                          "functionName": {
                            "name": "cleanup_t_uint160",
                            "nativeSrc": "532:17:46",
                            "nodeType": "YulIdentifier",
                            "src": "532:17:46"
                          },
                          "nativeSrc": "532:24:46",
                          "nodeType": "YulFunctionCall",
                          "src": "532:24:46"
                        },
                        "variableNames": [
                          {
                            "name": "cleaned",
                            "nativeSrc": "521:7:46",
                            "nodeType": "YulIdentifier",
                            "src": "521:7:46"
                          }
                        ]
                      }
                    ]
                  },
                  "name": "cleanup_t_address",
                  "nativeSrc": "466:96:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "value",
                      "nativeSrc": "493:5:46",
                      "nodeType": "YulTypedName",
                      "src": "493:5:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "cleaned",
                      "nativeSrc": "503:7:46",
                      "nodeType": "YulTypedName",
                      "src": "503:7:46",
                      "type": ""
                    }
                  ],
                  "src": "466:96:46"
                },
                {
                  "body": {
                    "nativeSrc": "611:79:46",
                    "nodeType": "YulBlock",
                    "src": "611:79:46",
                    "statements": [
                      {
                        "body": {
                          "nativeSrc": "668:16:46",
                          "nodeType": "YulBlock",
                          "src": "668:16:46",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "677:1:46",
                                    "nodeType": "YulLiteral",
                                    "src": "677:1:46",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "680:1:46",
                                    "nodeType": "YulLiteral",
                                    "src": "680:1:46",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nativeSrc": "670:6:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "670:6:46"
                                },
                                "nativeSrc": "670:12:46",
                                "nodeType": "YulFunctionCall",
                                "src": "670:12:46"
                              },
                              "nativeSrc": "670:12:46",
                              "nodeType": "YulExpressionStatement",
                              "src": "670:12:46"
                            }
                          ]
                        },
                        "condition": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "name": "value",
                                  "nativeSrc": "634:5:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "634:5:46"
                                },
                                {
                                  "arguments": [
                                    {
                                      "name": "value",
                                      "nativeSrc": "659:5:46",
                                      "nodeType": "YulIdentifier",
                                      "src": "659:5:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "cleanup_t_address",
                                    "nativeSrc": "641:17:46",
                                    "nodeType": "YulIdentifier",
                                    "src": "641:17:46"
                                  },
                                  "nativeSrc": "641:24:46",
                                  "nodeType": "YulFunctionCall",
                                  "src": "641:24:46"
                                }
                              ],
                              "functionName": {
                                "name": "eq",
                                "nativeSrc": "631:2:46",
                                "nodeType": "YulIdentifier",
                                "src": "631:2:46"
                              },
                              "nativeSrc": "631:35:46",
                              "nodeType": "YulFunctionCall",
                              "src": "631:35:46"
                            }
                          ],
                          "functionName": {
                            "name": "iszero",
                            "nativeSrc": "624:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "624:6:46"
                          },
                          "nativeSrc": "624:43:46",
                          "nodeType": "YulFunctionCall",
                          "src": "624:43:46"
                        },
                        "nativeSrc": "621:63:46",
                        "nodeType": "YulIf",
                        "src": "621:63:46"
                      }
                    ]
                  },
                  "name": "validator_revert_t_address",
                  "nativeSrc": "568:122:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "value",
                      "nativeSrc": "604:5:46",
                      "nodeType": "YulTypedName",
                      "src": "604:5:46",
                      "type": ""
                    }
                  ],
                  "src": "568:122:46"
                },
                {
                  "body": {
                    "nativeSrc": "759:80:46",
                    "nodeType": "YulBlock",
                    "src": "759:80:46",
                    "statements": [
                      {
                        "nativeSrc": "769:22:46",
                        "nodeType": "YulAssignment",
                        "src": "769:22:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "offset",
                              "nativeSrc": "784:6:46",
                              "nodeType": "YulIdentifier",
                              "src": "784:6:46"
                            }
                          ],
                          "functionName": {
                            "name": "mload",
                            "nativeSrc": "778:5:46",
                            "nodeType": "YulIdentifier",
                            "src": "778:5:46"
                          },
                          "nativeSrc": "778:13:46",
                          "nodeType": "YulFunctionCall",
                          "src": "778:13:46"
                        },
                        "variableNames": [
                          {
                            "name": "value",
                            "nativeSrc": "769:5:46",
                            "nodeType": "YulIdentifier",
                            "src": "769:5:46"
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "value",
                              "nativeSrc": "827:5:46",
                              "nodeType": "YulIdentifier",
                              "src": "827:5:46"
                            }
                          ],
                          "functionName": {
                            "name": "validator_revert_t_address",
                            "nativeSrc": "800:26:46",
                            "nodeType": "YulIdentifier",
                            "src": "800:26:46"
                          },
                          "nativeSrc": "800:33:46",
                          "nodeType": "YulFunctionCall",
                          "src": "800:33:46"
                        },
                        "nativeSrc": "800:33:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "800:33:46"
                      }
                    ]
                  },
                  "name": "abi_decode_t_address_fromMemory",
                  "nativeSrc": "696:143:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "offset",
                      "nativeSrc": "737:6:46",
                      "nodeType": "YulTypedName",
                      "src": "737:6:46",
                      "type": ""
                    },
                    {
                      "name": "end",
                      "nativeSrc": "745:3:46",
                      "nodeType": "YulTypedName",
                      "src": "745:3:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "value",
                      "nativeSrc": "753:5:46",
                      "nodeType": "YulTypedName",
                      "src": "753:5:46",
                      "type": ""
                    }
                  ],
                  "src": "696:143:46"
                },
                {
                  "body": {
                    "nativeSrc": "922:274:46",
                    "nodeType": "YulBlock",
                    "src": "922:274:46",
                    "statements": [
                      {
                        "body": {
                          "nativeSrc": "968:83:46",
                          "nodeType": "YulBlock",
                          "src": "968:83:46",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [],
                                "functionName": {
                                  "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                  "nativeSrc": "970:77:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "970:77:46"
                                },
                                "nativeSrc": "970:79:46",
                                "nodeType": "YulFunctionCall",
                                "src": "970:79:46"
                              },
                              "nativeSrc": "970:79:46",
                              "nodeType": "YulExpressionStatement",
                              "src": "970:79:46"
                            }
                          ]
                        },
                        "condition": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "name": "dataEnd",
                                  "nativeSrc": "943:7:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "943:7:46"
                                },
                                {
                                  "name": "headStart",
                                  "nativeSrc": "952:9:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "952:9:46"
                                }
                              ],
                              "functionName": {
                                "name": "sub",
                                "nativeSrc": "939:3:46",
                                "nodeType": "YulIdentifier",
                                "src": "939:3:46"
                              },
                              "nativeSrc": "939:23:46",
                              "nodeType": "YulFunctionCall",
                              "src": "939:23:46"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "964:2:46",
                              "nodeType": "YulLiteral",
                              "src": "964:2:46",
                              "type": "",
                              "value": "32"
                            }
                          ],
                          "functionName": {
                            "name": "slt",
                            "nativeSrc": "935:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "935:3:46"
                          },
                          "nativeSrc": "935:32:46",
                          "nodeType": "YulFunctionCall",
                          "src": "935:32:46"
                        },
                        "nativeSrc": "932:119:46",
                        "nodeType": "YulIf",
                        "src": "932:119:46"
                      },
                      {
                        "nativeSrc": "1061:128:46",
                        "nodeType": "YulBlock",
                        "src": "1061:128:46",
                        "statements": [
                          {
                            "nativeSrc": "1076:15:46",
                            "nodeType": "YulVariableDeclaration",
                            "src": "1076:15:46",
                            "value": {
                              "kind": "number",
                              "nativeSrc": "1090:1:46",
                              "nodeType": "YulLiteral",
                              "src": "1090:1:46",
                              "type": "",
                              "value": "0"
                            },
                            "variables": [
                              {
                                "name": "offset",
                                "nativeSrc": "1080:6:46",
                                "nodeType": "YulTypedName",
                                "src": "1080:6:46",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "nativeSrc": "1105:74:46",
                            "nodeType": "YulAssignment",
                            "src": "1105:74:46",
                            "value": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "1151:9:46",
                                      "nodeType": "YulIdentifier",
                                      "src": "1151:9:46"
                                    },
                                    {
                                      "name": "offset",
                                      "nativeSrc": "1162:6:46",
                                      "nodeType": "YulIdentifier",
                                      "src": "1162:6:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "1147:3:46",
                                    "nodeType": "YulIdentifier",
                                    "src": "1147:3:46"
                                  },
                                  "nativeSrc": "1147:22:46",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1147:22:46"
                                },
                                {
                                  "name": "dataEnd",
                                  "nativeSrc": "1171:7:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "1171:7:46"
                                }
                              ],
                              "functionName": {
                                "name": "abi_decode_t_address_fromMemory",
                                "nativeSrc": "1115:31:46",
                                "nodeType": "YulIdentifier",
                                "src": "1115:31:46"
                              },
                              "nativeSrc": "1115:64:46",
                              "nodeType": "YulFunctionCall",
                              "src": "1115:64:46"
                            },
                            "variableNames": [
                              {
                                "name": "value0",
                                "nativeSrc": "1105:6:46",
                                "nodeType": "YulIdentifier",
                                "src": "1105:6:46"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  "name": "abi_decode_tuple_t_address_fromMemory",
                  "nativeSrc": "845:351:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "headStart",
                      "nativeSrc": "892:9:46",
                      "nodeType": "YulTypedName",
                      "src": "892:9:46",
                      "type": ""
                    },
                    {
                      "name": "dataEnd",
                      "nativeSrc": "903:7:46",
                      "nodeType": "YulTypedName",
                      "src": "903:7:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "value0",
                      "nativeSrc": "915:6:46",
                      "nodeType": "YulTypedName",
                      "src": "915:6:46",
                      "type": ""
                    }
                  ],
                  "src": "845:351:46"
                },
                {
                  "body": {
                    "nativeSrc": "1261:40:46",
                    "nodeType": "YulBlock",
                    "src": "1261:40:46",
                    "statements": [
                      {
                        "nativeSrc": "1272:22:46",
                        "nodeType": "YulAssignment",
                        "src": "1272:22:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "value",
                              "nativeSrc": "1288:5:46",
                              "nodeType": "YulIdentifier",
                              "src": "1288:5:46"
                            }
                          ],
                          "functionName": {
                            "name": "mload",
                            "nativeSrc": "1282:5:46",
                            "nodeType": "YulIdentifier",
                            "src": "1282:5:46"
                          },
                          "nativeSrc": "1282:12:46",
                          "nodeType": "YulFunctionCall",
                          "src": "1282:12:46"
                        },
                        "variableNames": [
                          {
                            "name": "length",
                            "nativeSrc": "1272:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "1272:6:46"
                          }
                        ]
                      }
                    ]
                  },
                  "name": "array_length_t_string_memory_ptr",
                  "nativeSrc": "1202:99:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "value",
                      "nativeSrc": "1244:5:46",
                      "nodeType": "YulTypedName",
                      "src": "1244:5:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "length",
                      "nativeSrc": "1254:6:46",
                      "nodeType": "YulTypedName",
                      "src": "1254:6:46",
                      "type": ""
                    }
                  ],
                  "src": "1202:99:46"
                },
                {
                  "body": {
                    "nativeSrc": "1335:152:46",
                    "nodeType": "YulBlock",
                    "src": "1335:152:46",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nativeSrc": "1352:1:46",
                              "nodeType": "YulLiteral",
                              "src": "1352:1:46",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "1355:77:46",
                              "nodeType": "YulLiteral",
                              "src": "1355:77:46",
                              "type": "",
                              "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nativeSrc": "1345:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "1345:6:46"
                          },
                          "nativeSrc": "1345:88:46",
                          "nodeType": "YulFunctionCall",
                          "src": "1345:88:46"
                        },
                        "nativeSrc": "1345:88:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "1345:88:46"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nativeSrc": "1449:1:46",
                              "nodeType": "YulLiteral",
                              "src": "1449:1:46",
                              "type": "",
                              "value": "4"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "1452:4:46",
                              "nodeType": "YulLiteral",
                              "src": "1452:4:46",
                              "type": "",
                              "value": "0x41"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nativeSrc": "1442:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "1442:6:46"
                          },
                          "nativeSrc": "1442:15:46",
                          "nodeType": "YulFunctionCall",
                          "src": "1442:15:46"
                        },
                        "nativeSrc": "1442:15:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "1442:15:46"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nativeSrc": "1473:1:46",
                              "nodeType": "YulLiteral",
                              "src": "1473:1:46",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "1476:4:46",
                              "nodeType": "YulLiteral",
                              "src": "1476:4:46",
                              "type": "",
                              "value": "0x24"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nativeSrc": "1466:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "1466:6:46"
                          },
                          "nativeSrc": "1466:15:46",
                          "nodeType": "YulFunctionCall",
                          "src": "1466:15:46"
                        },
                        "nativeSrc": "1466:15:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "1466:15:46"
                      }
                    ]
                  },
                  "name": "panic_error_0x41",
                  "nativeSrc": "1307:180:46",
                  "nodeType": "YulFunctionDefinition",
                  "src": "1307:180:46"
                },
                {
                  "body": {
                    "nativeSrc": "1521:152:46",
                    "nodeType": "YulBlock",
                    "src": "1521:152:46",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nativeSrc": "1538:1:46",
                              "nodeType": "YulLiteral",
                              "src": "1538:1:46",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "1541:77:46",
                              "nodeType": "YulLiteral",
                              "src": "1541:77:46",
                              "type": "",
                              "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nativeSrc": "1531:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "1531:6:46"
                          },
                          "nativeSrc": "1531:88:46",
                          "nodeType": "YulFunctionCall",
                          "src": "1531:88:46"
                        },
                        "nativeSrc": "1531:88:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "1531:88:46"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nativeSrc": "1635:1:46",
                              "nodeType": "YulLiteral",
                              "src": "1635:1:46",
                              "type": "",
                              "value": "4"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "1638:4:46",
                              "nodeType": "YulLiteral",
                              "src": "1638:4:46",
                              "type": "",
                              "value": "0x22"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nativeSrc": "1628:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "1628:6:46"
                          },
                          "nativeSrc": "1628:15:46",
                          "nodeType": "YulFunctionCall",
                          "src": "1628:15:46"
                        },
                        "nativeSrc": "1628:15:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "1628:15:46"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nativeSrc": "1659:1:46",
                              "nodeType": "YulLiteral",
                              "src": "1659:1:46",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "1662:4:46",
                              "nodeType": "YulLiteral",
                              "src": "1662:4:46",
                              "type": "",
                              "value": "0x24"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nativeSrc": "1652:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "1652:6:46"
                          },
                          "nativeSrc": "1652:15:46",
                          "nodeType": "YulFunctionCall",
                          "src": "1652:15:46"
                        },
                        "nativeSrc": "1652:15:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "1652:15:46"
                      }
                    ]
                  },
                  "name": "panic_error_0x22",
                  "nativeSrc": "1493:180:46",
                  "nodeType": "YulFunctionDefinition",
                  "src": "1493:180:46"
                },
                {
                  "body": {
                    "nativeSrc": "1730:269:46",
                    "nodeType": "YulBlock",
                    "src": "1730:269:46",
                    "statements": [
                      {
                        "nativeSrc": "1740:22:46",
                        "nodeType": "YulAssignment",
                        "src": "1740:22:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "data",
                              "nativeSrc": "1754:4:46",
                              "nodeType": "YulIdentifier",
                              "src": "1754:4:46"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "1760:1:46",
                              "nodeType": "YulLiteral",
                              "src": "1760:1:46",
                              "type": "",
                              "value": "2"
                            }
                          ],
                          "functionName": {
                            "name": "div",
                            "nativeSrc": "1750:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "1750:3:46"
                          },
                          "nativeSrc": "1750:12:46",
                          "nodeType": "YulFunctionCall",
                          "src": "1750:12:46"
                        },
                        "variableNames": [
                          {
                            "name": "length",
                            "nativeSrc": "1740:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "1740:6:46"
                          }
                        ]
                      },
                      {
                        "nativeSrc": "1771:38:46",
                        "nodeType": "YulVariableDeclaration",
                        "src": "1771:38:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "data",
                              "nativeSrc": "1801:4:46",
                              "nodeType": "YulIdentifier",
                              "src": "1801:4:46"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "1807:1:46",
                              "nodeType": "YulLiteral",
                              "src": "1807:1:46",
                              "type": "",
                              "value": "1"
                            }
                          ],
                          "functionName": {
                            "name": "and",
                            "nativeSrc": "1797:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "1797:3:46"
                          },
                          "nativeSrc": "1797:12:46",
                          "nodeType": "YulFunctionCall",
                          "src": "1797:12:46"
                        },
                        "variables": [
                          {
                            "name": "outOfPlaceEncoding",
                            "nativeSrc": "1775:18:46",
                            "nodeType": "YulTypedName",
                            "src": "1775:18:46",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "body": {
                          "nativeSrc": "1848:51:46",
                          "nodeType": "YulBlock",
                          "src": "1848:51:46",
                          "statements": [
                            {
                              "nativeSrc": "1862:27:46",
                              "nodeType": "YulAssignment",
                              "src": "1862:27:46",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nativeSrc": "1876:6:46",
                                    "nodeType": "YulIdentifier",
                                    "src": "1876:6:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1884:4:46",
                                    "nodeType": "YulLiteral",
                                    "src": "1884:4:46",
                                    "type": "",
                                    "value": "0x7f"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nativeSrc": "1872:3:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "1872:3:46"
                                },
                                "nativeSrc": "1872:17:46",
                                "nodeType": "YulFunctionCall",
                                "src": "1872:17:46"
                              },
                              "variableNames": [
                                {
                                  "name": "length",
                                  "nativeSrc": "1862:6:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "1862:6:46"
                                }
                              ]
                            }
                          ]
                        },
                        "condition": {
                          "arguments": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nativeSrc": "1828:18:46",
                              "nodeType": "YulIdentifier",
                              "src": "1828:18:46"
                            }
                          ],
                          "functionName": {
                            "name": "iszero",
                            "nativeSrc": "1821:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "1821:6:46"
                          },
                          "nativeSrc": "1821:26:46",
                          "nodeType": "YulFunctionCall",
                          "src": "1821:26:46"
                        },
                        "nativeSrc": "1818:81:46",
                        "nodeType": "YulIf",
                        "src": "1818:81:46"
                      },
                      {
                        "body": {
                          "nativeSrc": "1951:42:46",
                          "nodeType": "YulBlock",
                          "src": "1951:42:46",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [],
                                "functionName": {
                                  "name": "panic_error_0x22",
                                  "nativeSrc": "1965:16:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "1965:16:46"
                                },
                                "nativeSrc": "1965:18:46",
                                "nodeType": "YulFunctionCall",
                                "src": "1965:18:46"
                              },
                              "nativeSrc": "1965:18:46",
                              "nodeType": "YulExpressionStatement",
                              "src": "1965:18:46"
                            }
                          ]
                        },
                        "condition": {
                          "arguments": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nativeSrc": "1915:18:46",
                              "nodeType": "YulIdentifier",
                              "src": "1915:18:46"
                            },
                            {
                              "arguments": [
                                {
                                  "name": "length",
                                  "nativeSrc": "1938:6:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "1938:6:46"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "1946:2:46",
                                  "nodeType": "YulLiteral",
                                  "src": "1946:2:46",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "lt",
                                "nativeSrc": "1935:2:46",
                                "nodeType": "YulIdentifier",
                                "src": "1935:2:46"
                              },
                              "nativeSrc": "1935:14:46",
                              "nodeType": "YulFunctionCall",
                              "src": "1935:14:46"
                            }
                          ],
                          "functionName": {
                            "name": "eq",
                            "nativeSrc": "1912:2:46",
                            "nodeType": "YulIdentifier",
                            "src": "1912:2:46"
                          },
                          "nativeSrc": "1912:38:46",
                          "nodeType": "YulFunctionCall",
                          "src": "1912:38:46"
                        },
                        "nativeSrc": "1909:84:46",
                        "nodeType": "YulIf",
                        "src": "1909:84:46"
                      }
                    ]
                  },
                  "name": "extract_byte_array_length",
                  "nativeSrc": "1679:320:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "data",
                      "nativeSrc": "1714:4:46",
                      "nodeType": "YulTypedName",
                      "src": "1714:4:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "length",
                      "nativeSrc": "1723:6:46",
                      "nodeType": "YulTypedName",
                      "src": "1723:6:46",
                      "type": ""
                    }
                  ],
                  "src": "1679:320:46"
                },
                {
                  "body": {
                    "nativeSrc": "2059:87:46",
                    "nodeType": "YulBlock",
                    "src": "2059:87:46",
                    "statements": [
                      {
                        "nativeSrc": "2069:11:46",
                        "nodeType": "YulAssignment",
                        "src": "2069:11:46",
                        "value": {
                          "name": "ptr",
                          "nativeSrc": "2077:3:46",
                          "nodeType": "YulIdentifier",
                          "src": "2077:3:46"
                        },
                        "variableNames": [
                          {
                            "name": "data",
                            "nativeSrc": "2069:4:46",
                            "nodeType": "YulIdentifier",
                            "src": "2069:4:46"
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nativeSrc": "2097:1:46",
                              "nodeType": "YulLiteral",
                              "src": "2097:1:46",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "name": "ptr",
                              "nativeSrc": "2100:3:46",
                              "nodeType": "YulIdentifier",
                              "src": "2100:3:46"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nativeSrc": "2090:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "2090:6:46"
                          },
                          "nativeSrc": "2090:14:46",
                          "nodeType": "YulFunctionCall",
                          "src": "2090:14:46"
                        },
                        "nativeSrc": "2090:14:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "2090:14:46"
                      },
                      {
                        "nativeSrc": "2113:26:46",
                        "nodeType": "YulAssignment",
                        "src": "2113:26:46",
                        "value": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nativeSrc": "2131:1:46",
                              "nodeType": "YulLiteral",
                              "src": "2131:1:46",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "2134:4:46",
                              "nodeType": "YulLiteral",
                              "src": "2134:4:46",
                              "type": "",
                              "value": "0x20"
                            }
                          ],
                          "functionName": {
                            "name": "keccak256",
                            "nativeSrc": "2121:9:46",
                            "nodeType": "YulIdentifier",
                            "src": "2121:9:46"
                          },
                          "nativeSrc": "2121:18:46",
                          "nodeType": "YulFunctionCall",
                          "src": "2121:18:46"
                        },
                        "variableNames": [
                          {
                            "name": "data",
                            "nativeSrc": "2113:4:46",
                            "nodeType": "YulIdentifier",
                            "src": "2113:4:46"
                          }
                        ]
                      }
                    ]
                  },
                  "name": "array_dataslot_t_string_storage",
                  "nativeSrc": "2005:141:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "ptr",
                      "nativeSrc": "2046:3:46",
                      "nodeType": "YulTypedName",
                      "src": "2046:3:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "data",
                      "nativeSrc": "2054:4:46",
                      "nodeType": "YulTypedName",
                      "src": "2054:4:46",
                      "type": ""
                    }
                  ],
                  "src": "2005:141:46"
                },
                {
                  "body": {
                    "nativeSrc": "2196:49:46",
                    "nodeType": "YulBlock",
                    "src": "2196:49:46",
                    "statements": [
                      {
                        "nativeSrc": "2206:33:46",
                        "nodeType": "YulAssignment",
                        "src": "2206:33:46",
                        "value": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "name": "value",
                                  "nativeSrc": "2224:5:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "2224:5:46"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "2231:2:46",
                                  "nodeType": "YulLiteral",
                                  "src": "2231:2:46",
                                  "type": "",
                                  "value": "31"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "2220:3:46",
                                "nodeType": "YulIdentifier",
                                "src": "2220:3:46"
                              },
                              "nativeSrc": "2220:14:46",
                              "nodeType": "YulFunctionCall",
                              "src": "2220:14:46"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "2236:2:46",
                              "nodeType": "YulLiteral",
                              "src": "2236:2:46",
                              "type": "",
                              "value": "32"
                            }
                          ],
                          "functionName": {
                            "name": "div",
                            "nativeSrc": "2216:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "2216:3:46"
                          },
                          "nativeSrc": "2216:23:46",
                          "nodeType": "YulFunctionCall",
                          "src": "2216:23:46"
                        },
                        "variableNames": [
                          {
                            "name": "result",
                            "nativeSrc": "2206:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "2206:6:46"
                          }
                        ]
                      }
                    ]
                  },
                  "name": "divide_by_32_ceil",
                  "nativeSrc": "2152:93:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "value",
                      "nativeSrc": "2179:5:46",
                      "nodeType": "YulTypedName",
                      "src": "2179:5:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "result",
                      "nativeSrc": "2189:6:46",
                      "nodeType": "YulTypedName",
                      "src": "2189:6:46",
                      "type": ""
                    }
                  ],
                  "src": "2152:93:46"
                },
                {
                  "body": {
                    "nativeSrc": "2304:54:46",
                    "nodeType": "YulBlock",
                    "src": "2304:54:46",
                    "statements": [
                      {
                        "nativeSrc": "2314:37:46",
                        "nodeType": "YulAssignment",
                        "src": "2314:37:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "bits",
                              "nativeSrc": "2339:4:46",
                              "nodeType": "YulIdentifier",
                              "src": "2339:4:46"
                            },
                            {
                              "name": "value",
                              "nativeSrc": "2345:5:46",
                              "nodeType": "YulIdentifier",
                              "src": "2345:5:46"
                            }
                          ],
                          "functionName": {
                            "name": "shl",
                            "nativeSrc": "2335:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "2335:3:46"
                          },
                          "nativeSrc": "2335:16:46",
                          "nodeType": "YulFunctionCall",
                          "src": "2335:16:46"
                        },
                        "variableNames": [
                          {
                            "name": "newValue",
                            "nativeSrc": "2314:8:46",
                            "nodeType": "YulIdentifier",
                            "src": "2314:8:46"
                          }
                        ]
                      }
                    ]
                  },
                  "name": "shift_left_dynamic",
                  "nativeSrc": "2251:107:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "bits",
                      "nativeSrc": "2279:4:46",
                      "nodeType": "YulTypedName",
                      "src": "2279:4:46",
                      "type": ""
                    },
                    {
                      "name": "value",
                      "nativeSrc": "2285:5:46",
                      "nodeType": "YulTypedName",
                      "src": "2285:5:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "newValue",
                      "nativeSrc": "2295:8:46",
                      "nodeType": "YulTypedName",
                      "src": "2295:8:46",
                      "type": ""
                    }
                  ],
                  "src": "2251:107:46"
                },
                {
                  "body": {
                    "nativeSrc": "2440:317:46",
                    "nodeType": "YulBlock",
                    "src": "2440:317:46",
                    "statements": [
                      {
                        "nativeSrc": "2450:35:46",
                        "nodeType": "YulVariableDeclaration",
                        "src": "2450:35:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "shiftBytes",
                              "nativeSrc": "2471:10:46",
                              "nodeType": "YulIdentifier",
                              "src": "2471:10:46"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "2483:1:46",
                              "nodeType": "YulLiteral",
                              "src": "2483:1:46",
                              "type": "",
                              "value": "8"
                            }
                          ],
                          "functionName": {
                            "name": "mul",
                            "nativeSrc": "2467:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "2467:3:46"
                          },
                          "nativeSrc": "2467:18:46",
                          "nodeType": "YulFunctionCall",
                          "src": "2467:18:46"
                        },
                        "variables": [
                          {
                            "name": "shiftBits",
                            "nativeSrc": "2454:9:46",
                            "nodeType": "YulTypedName",
                            "src": "2454:9:46",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "nativeSrc": "2494:109:46",
                        "nodeType": "YulVariableDeclaration",
                        "src": "2494:109:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "shiftBits",
                              "nativeSrc": "2525:9:46",
                              "nodeType": "YulIdentifier",
                              "src": "2525:9:46"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "2536:66:46",
                              "nodeType": "YulLiteral",
                              "src": "2536:66:46",
                              "type": "",
                              "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                            }
                          ],
                          "functionName": {
                            "name": "shift_left_dynamic",
                            "nativeSrc": "2506:18:46",
                            "nodeType": "YulIdentifier",
                            "src": "2506:18:46"
                          },
                          "nativeSrc": "2506:97:46",
                          "nodeType": "YulFunctionCall",
                          "src": "2506:97:46"
                        },
                        "variables": [
                          {
                            "name": "mask",
                            "nativeSrc": "2498:4:46",
                            "nodeType": "YulTypedName",
                            "src": "2498:4:46",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "nativeSrc": "2612:51:46",
                        "nodeType": "YulAssignment",
                        "src": "2612:51:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "shiftBits",
                              "nativeSrc": "2643:9:46",
                              "nodeType": "YulIdentifier",
                              "src": "2643:9:46"
                            },
                            {
                              "name": "toInsert",
                              "nativeSrc": "2654:8:46",
                              "nodeType": "YulIdentifier",
                              "src": "2654:8:46"
                            }
                          ],
                          "functionName": {
                            "name": "shift_left_dynamic",
                            "nativeSrc": "2624:18:46",
                            "nodeType": "YulIdentifier",
                            "src": "2624:18:46"
                          },
                          "nativeSrc": "2624:39:46",
                          "nodeType": "YulFunctionCall",
                          "src": "2624:39:46"
                        },
                        "variableNames": [
                          {
                            "name": "toInsert",
                            "nativeSrc": "2612:8:46",
                            "nodeType": "YulIdentifier",
                            "src": "2612:8:46"
                          }
                        ]
                      },
                      {
                        "nativeSrc": "2672:30:46",
                        "nodeType": "YulAssignment",
                        "src": "2672:30:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "value",
                              "nativeSrc": "2685:5:46",
                              "nodeType": "YulIdentifier",
                              "src": "2685:5:46"
                            },
                            {
                              "arguments": [
                                {
                                  "name": "mask",
                                  "nativeSrc": "2696:4:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "2696:4:46"
                                }
                              ],
                              "functionName": {
                                "name": "not",
                                "nativeSrc": "2692:3:46",
                                "nodeType": "YulIdentifier",
                                "src": "2692:3:46"
                              },
                              "nativeSrc": "2692:9:46",
                              "nodeType": "YulFunctionCall",
                              "src": "2692:9:46"
                            }
                          ],
                          "functionName": {
                            "name": "and",
                            "nativeSrc": "2681:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "2681:3:46"
                          },
                          "nativeSrc": "2681:21:46",
                          "nodeType": "YulFunctionCall",
                          "src": "2681:21:46"
                        },
                        "variableNames": [
                          {
                            "name": "value",
                            "nativeSrc": "2672:5:46",
                            "nodeType": "YulIdentifier",
                            "src": "2672:5:46"
                          }
                        ]
                      },
                      {
                        "nativeSrc": "2711:40:46",
                        "nodeType": "YulAssignment",
                        "src": "2711:40:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "value",
                              "nativeSrc": "2724:5:46",
                              "nodeType": "YulIdentifier",
                              "src": "2724:5:46"
                            },
                            {
                              "arguments": [
                                {
                                  "name": "toInsert",
                                  "nativeSrc": "2735:8:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "2735:8:46"
                                },
                                {
                                  "name": "mask",
                                  "nativeSrc": "2745:4:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "2745:4:46"
                                }
                              ],
                              "functionName": {
                                "name": "and",
                                "nativeSrc": "2731:3:46",
                                "nodeType": "YulIdentifier",
                                "src": "2731:3:46"
                              },
                              "nativeSrc": "2731:19:46",
                              "nodeType": "YulFunctionCall",
                              "src": "2731:19:46"
                            }
                          ],
                          "functionName": {
                            "name": "or",
                            "nativeSrc": "2721:2:46",
                            "nodeType": "YulIdentifier",
                            "src": "2721:2:46"
                          },
                          "nativeSrc": "2721:30:46",
                          "nodeType": "YulFunctionCall",
                          "src": "2721:30:46"
                        },
                        "variableNames": [
                          {
                            "name": "result",
                            "nativeSrc": "2711:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "2711:6:46"
                          }
                        ]
                      }
                    ]
                  },
                  "name": "update_byte_slice_dynamic32",
                  "nativeSrc": "2364:393:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "value",
                      "nativeSrc": "2401:5:46",
                      "nodeType": "YulTypedName",
                      "src": "2401:5:46",
                      "type": ""
                    },
                    {
                      "name": "shiftBytes",
                      "nativeSrc": "2408:10:46",
                      "nodeType": "YulTypedName",
                      "src": "2408:10:46",
                      "type": ""
                    },
                    {
                      "name": "toInsert",
                      "nativeSrc": "2420:8:46",
                      "nodeType": "YulTypedName",
                      "src": "2420:8:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "result",
                      "nativeSrc": "2433:6:46",
                      "nodeType": "YulTypedName",
                      "src": "2433:6:46",
                      "type": ""
                    }
                  ],
                  "src": "2364:393:46"
                },
                {
                  "body": {
                    "nativeSrc": "2808:32:46",
                    "nodeType": "YulBlock",
                    "src": "2808:32:46",
                    "statements": [
                      {
                        "nativeSrc": "2818:16:46",
                        "nodeType": "YulAssignment",
                        "src": "2818:16:46",
                        "value": {
                          "name": "value",
                          "nativeSrc": "2829:5:46",
                          "nodeType": "YulIdentifier",
                          "src": "2829:5:46"
                        },
                        "variableNames": [
                          {
                            "name": "cleaned",
                            "nativeSrc": "2818:7:46",
                            "nodeType": "YulIdentifier",
                            "src": "2818:7:46"
                          }
                        ]
                      }
                    ]
                  },
                  "name": "cleanup_t_uint256",
                  "nativeSrc": "2763:77:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "value",
                      "nativeSrc": "2790:5:46",
                      "nodeType": "YulTypedName",
                      "src": "2790:5:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "cleaned",
                      "nativeSrc": "2800:7:46",
                      "nodeType": "YulTypedName",
                      "src": "2800:7:46",
                      "type": ""
                    }
                  ],
                  "src": "2763:77:46"
                },
                {
                  "body": {
                    "nativeSrc": "2878:28:46",
                    "nodeType": "YulBlock",
                    "src": "2878:28:46",
                    "statements": [
                      {
                        "nativeSrc": "2888:12:46",
                        "nodeType": "YulAssignment",
                        "src": "2888:12:46",
                        "value": {
                          "name": "value",
                          "nativeSrc": "2895:5:46",
                          "nodeType": "YulIdentifier",
                          "src": "2895:5:46"
                        },
                        "variableNames": [
                          {
                            "name": "ret",
                            "nativeSrc": "2888:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "2888:3:46"
                          }
                        ]
                      }
                    ]
                  },
                  "name": "identity",
                  "nativeSrc": "2846:60:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "value",
                      "nativeSrc": "2864:5:46",
                      "nodeType": "YulTypedName",
                      "src": "2864:5:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "ret",
                      "nativeSrc": "2874:3:46",
                      "nodeType": "YulTypedName",
                      "src": "2874:3:46",
                      "type": ""
                    }
                  ],
                  "src": "2846:60:46"
                },
                {
                  "body": {
                    "nativeSrc": "2972:82:46",
                    "nodeType": "YulBlock",
                    "src": "2972:82:46",
                    "statements": [
                      {
                        "nativeSrc": "2982:66:46",
                        "nodeType": "YulAssignment",
                        "src": "2982:66:46",
                        "value": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "value",
                                      "nativeSrc": "3040:5:46",
                                      "nodeType": "YulIdentifier",
                                      "src": "3040:5:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "cleanup_t_uint256",
                                    "nativeSrc": "3022:17:46",
                                    "nodeType": "YulIdentifier",
                                    "src": "3022:17:46"
                                  },
                                  "nativeSrc": "3022:24:46",
                                  "nodeType": "YulFunctionCall",
                                  "src": "3022:24:46"
                                }
                              ],
                              "functionName": {
                                "name": "identity",
                                "nativeSrc": "3013:8:46",
                                "nodeType": "YulIdentifier",
                                "src": "3013:8:46"
                              },
                              "nativeSrc": "3013:34:46",
                              "nodeType": "YulFunctionCall",
                              "src": "3013:34:46"
                            }
                          ],
                          "functionName": {
                            "name": "cleanup_t_uint256",
                            "nativeSrc": "2995:17:46",
                            "nodeType": "YulIdentifier",
                            "src": "2995:17:46"
                          },
                          "nativeSrc": "2995:53:46",
                          "nodeType": "YulFunctionCall",
                          "src": "2995:53:46"
                        },
                        "variableNames": [
                          {
                            "name": "converted",
                            "nativeSrc": "2982:9:46",
                            "nodeType": "YulIdentifier",
                            "src": "2982:9:46"
                          }
                        ]
                      }
                    ]
                  },
                  "name": "convert_t_uint256_to_t_uint256",
                  "nativeSrc": "2912:142:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "value",
                      "nativeSrc": "2952:5:46",
                      "nodeType": "YulTypedName",
                      "src": "2952:5:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "converted",
                      "nativeSrc": "2962:9:46",
                      "nodeType": "YulTypedName",
                      "src": "2962:9:46",
                      "type": ""
                    }
                  ],
                  "src": "2912:142:46"
                },
                {
                  "body": {
                    "nativeSrc": "3107:28:46",
                    "nodeType": "YulBlock",
                    "src": "3107:28:46",
                    "statements": [
                      {
                        "nativeSrc": "3117:12:46",
                        "nodeType": "YulAssignment",
                        "src": "3117:12:46",
                        "value": {
                          "name": "value",
                          "nativeSrc": "3124:5:46",
                          "nodeType": "YulIdentifier",
                          "src": "3124:5:46"
                        },
                        "variableNames": [
                          {
                            "name": "ret",
                            "nativeSrc": "3117:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "3117:3:46"
                          }
                        ]
                      }
                    ]
                  },
                  "name": "prepare_store_t_uint256",
                  "nativeSrc": "3060:75:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "value",
                      "nativeSrc": "3093:5:46",
                      "nodeType": "YulTypedName",
                      "src": "3093:5:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "ret",
                      "nativeSrc": "3103:3:46",
                      "nodeType": "YulTypedName",
                      "src": "3103:3:46",
                      "type": ""
                    }
                  ],
                  "src": "3060:75:46"
                },
                {
                  "body": {
                    "nativeSrc": "3217:193:46",
                    "nodeType": "YulBlock",
                    "src": "3217:193:46",
                    "statements": [
                      {
                        "nativeSrc": "3227:63:46",
                        "nodeType": "YulVariableDeclaration",
                        "src": "3227:63:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "value_0",
                              "nativeSrc": "3282:7:46",
                              "nodeType": "YulIdentifier",
                              "src": "3282:7:46"
                            }
                          ],
                          "functionName": {
                            "name": "convert_t_uint256_to_t_uint256",
                            "nativeSrc": "3251:30:46",
                            "nodeType": "YulIdentifier",
                            "src": "3251:30:46"
                          },
                          "nativeSrc": "3251:39:46",
                          "nodeType": "YulFunctionCall",
                          "src": "3251:39:46"
                        },
                        "variables": [
                          {
                            "name": "convertedValue_0",
                            "nativeSrc": "3231:16:46",
                            "nodeType": "YulTypedName",
                            "src": "3231:16:46",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "slot",
                              "nativeSrc": "3306:4:46",
                              "nodeType": "YulIdentifier",
                              "src": "3306:4:46"
                            },
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "slot",
                                      "nativeSrc": "3346:4:46",
                                      "nodeType": "YulIdentifier",
                                      "src": "3346:4:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "sload",
                                    "nativeSrc": "3340:5:46",
                                    "nodeType": "YulIdentifier",
                                    "src": "3340:5:46"
                                  },
                                  "nativeSrc": "3340:11:46",
                                  "nodeType": "YulFunctionCall",
                                  "src": "3340:11:46"
                                },
                                {
                                  "name": "offset",
                                  "nativeSrc": "3353:6:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "3353:6:46"
                                },
                                {
                                  "arguments": [
                                    {
                                      "name": "convertedValue_0",
                                      "nativeSrc": "3385:16:46",
                                      "nodeType": "YulIdentifier",
                                      "src": "3385:16:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "prepare_store_t_uint256",
                                    "nativeSrc": "3361:23:46",
                                    "nodeType": "YulIdentifier",
                                    "src": "3361:23:46"
                                  },
                                  "nativeSrc": "3361:41:46",
                                  "nodeType": "YulFunctionCall",
                                  "src": "3361:41:46"
                                }
                              ],
                              "functionName": {
                                "name": "update_byte_slice_dynamic32",
                                "nativeSrc": "3312:27:46",
                                "nodeType": "YulIdentifier",
                                "src": "3312:27:46"
                              },
                              "nativeSrc": "3312:91:46",
                              "nodeType": "YulFunctionCall",
                              "src": "3312:91:46"
                            }
                          ],
                          "functionName": {
                            "name": "sstore",
                            "nativeSrc": "3299:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "3299:6:46"
                          },
                          "nativeSrc": "3299:105:46",
                          "nodeType": "YulFunctionCall",
                          "src": "3299:105:46"
                        },
                        "nativeSrc": "3299:105:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "3299:105:46"
                      }
                    ]
                  },
                  "name": "update_storage_value_t_uint256_to_t_uint256",
                  "nativeSrc": "3141:269:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "slot",
                      "nativeSrc": "3194:4:46",
                      "nodeType": "YulTypedName",
                      "src": "3194:4:46",
                      "type": ""
                    },
                    {
                      "name": "offset",
                      "nativeSrc": "3200:6:46",
                      "nodeType": "YulTypedName",
                      "src": "3200:6:46",
                      "type": ""
                    },
                    {
                      "name": "value_0",
                      "nativeSrc": "3208:7:46",
                      "nodeType": "YulTypedName",
                      "src": "3208:7:46",
                      "type": ""
                    }
                  ],
                  "src": "3141:269:46"
                },
                {
                  "body": {
                    "nativeSrc": "3465:24:46",
                    "nodeType": "YulBlock",
                    "src": "3465:24:46",
                    "statements": [
                      {
                        "nativeSrc": "3475:8:46",
                        "nodeType": "YulAssignment",
                        "src": "3475:8:46",
                        "value": {
                          "kind": "number",
                          "nativeSrc": "3482:1:46",
                          "nodeType": "YulLiteral",
                          "src": "3482:1:46",
                          "type": "",
                          "value": "0"
                        },
                        "variableNames": [
                          {
                            "name": "ret",
                            "nativeSrc": "3475:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "3475:3:46"
                          }
                        ]
                      }
                    ]
                  },
                  "name": "zero_value_for_split_t_uint256",
                  "nativeSrc": "3416:73:46",
                  "nodeType": "YulFunctionDefinition",
                  "returnVariables": [
                    {
                      "name": "ret",
                      "nativeSrc": "3461:3:46",
                      "nodeType": "YulTypedName",
                      "src": "3461:3:46",
                      "type": ""
                    }
                  ],
                  "src": "3416:73:46"
                },
                {
                  "body": {
                    "nativeSrc": "3548:136:46",
                    "nodeType": "YulBlock",
                    "src": "3548:136:46",
                    "statements": [
                      {
                        "nativeSrc": "3558:46:46",
                        "nodeType": "YulVariableDeclaration",
                        "src": "3558:46:46",
                        "value": {
                          "arguments": [],
                          "functionName": {
                            "name": "zero_value_for_split_t_uint256",
                            "nativeSrc": "3572:30:46",
                            "nodeType": "YulIdentifier",
                            "src": "3572:30:46"
                          },
                          "nativeSrc": "3572:32:46",
                          "nodeType": "YulFunctionCall",
                          "src": "3572:32:46"
                        },
                        "variables": [
                          {
                            "name": "zero_0",
                            "nativeSrc": "3562:6:46",
                            "nodeType": "YulTypedName",
                            "src": "3562:6:46",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "slot",
                              "nativeSrc": "3657:4:46",
                              "nodeType": "YulIdentifier",
                              "src": "3657:4:46"
                            },
                            {
                              "name": "offset",
                              "nativeSrc": "3663:6:46",
                              "nodeType": "YulIdentifier",
                              "src": "3663:6:46"
                            },
                            {
                              "name": "zero_0",
                              "nativeSrc": "3671:6:46",
                              "nodeType": "YulIdentifier",
                              "src": "3671:6:46"
                            }
                          ],
                          "functionName": {
                            "name": "update_storage_value_t_uint256_to_t_uint256",
                            "nativeSrc": "3613:43:46",
                            "nodeType": "YulIdentifier",
                            "src": "3613:43:46"
                          },
                          "nativeSrc": "3613:65:46",
                          "nodeType": "YulFunctionCall",
                          "src": "3613:65:46"
                        },
                        "nativeSrc": "3613:65:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "3613:65:46"
                      }
                    ]
                  },
                  "name": "storage_set_to_zero_t_uint256",
                  "nativeSrc": "3495:189:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "slot",
                      "nativeSrc": "3534:4:46",
                      "nodeType": "YulTypedName",
                      "src": "3534:4:46",
                      "type": ""
                    },
                    {
                      "name": "offset",
                      "nativeSrc": "3540:6:46",
                      "nodeType": "YulTypedName",
                      "src": "3540:6:46",
                      "type": ""
                    }
                  ],
                  "src": "3495:189:46"
                },
                {
                  "body": {
                    "nativeSrc": "3740:136:46",
                    "nodeType": "YulBlock",
                    "src": "3740:136:46",
                    "statements": [
                      {
                        "body": {
                          "nativeSrc": "3807:63:46",
                          "nodeType": "YulBlock",
                          "src": "3807:63:46",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "start",
                                    "nativeSrc": "3851:5:46",
                                    "nodeType": "YulIdentifier",
                                    "src": "3851:5:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "3858:1:46",
                                    "nodeType": "YulLiteral",
                                    "src": "3858:1:46",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "storage_set_to_zero_t_uint256",
                                  "nativeSrc": "3821:29:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "3821:29:46"
                                },
                                "nativeSrc": "3821:39:46",
                                "nodeType": "YulFunctionCall",
                                "src": "3821:39:46"
                              },
                              "nativeSrc": "3821:39:46",
                              "nodeType": "YulExpressionStatement",
                              "src": "3821:39:46"
                            }
                          ]
                        },
                        "condition": {
                          "arguments": [
                            {
                              "name": "start",
                              "nativeSrc": "3760:5:46",
                              "nodeType": "YulIdentifier",
                              "src": "3760:5:46"
                            },
                            {
                              "name": "end",
                              "nativeSrc": "3767:3:46",
                              "nodeType": "YulIdentifier",
                              "src": "3767:3:46"
                            }
                          ],
                          "functionName": {
                            "name": "lt",
                            "nativeSrc": "3757:2:46",
                            "nodeType": "YulIdentifier",
                            "src": "3757:2:46"
                          },
                          "nativeSrc": "3757:14:46",
                          "nodeType": "YulFunctionCall",
                          "src": "3757:14:46"
                        },
                        "nativeSrc": "3750:120:46",
                        "nodeType": "YulForLoop",
                        "post": {
                          "nativeSrc": "3772:26:46",
                          "nodeType": "YulBlock",
                          "src": "3772:26:46",
                          "statements": [
                            {
                              "nativeSrc": "3774:22:46",
                              "nodeType": "YulAssignment",
                              "src": "3774:22:46",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "start",
                                    "nativeSrc": "3787:5:46",
                                    "nodeType": "YulIdentifier",
                                    "src": "3787:5:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "3794:1:46",
                                    "nodeType": "YulLiteral",
                                    "src": "3794:1:46",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "3783:3:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "3783:3:46"
                                },
                                "nativeSrc": "3783:13:46",
                                "nodeType": "YulFunctionCall",
                                "src": "3783:13:46"
                              },
                              "variableNames": [
                                {
                                  "name": "start",
                                  "nativeSrc": "3774:5:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "3774:5:46"
                                }
                              ]
                            }
                          ]
                        },
                        "pre": {
                          "nativeSrc": "3754:2:46",
                          "nodeType": "YulBlock",
                          "src": "3754:2:46",
                          "statements": []
                        },
                        "src": "3750:120:46"
                      }
                    ]
                  },
                  "name": "clear_storage_range_t_bytes1",
                  "nativeSrc": "3690:186:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "start",
                      "nativeSrc": "3728:5:46",
                      "nodeType": "YulTypedName",
                      "src": "3728:5:46",
                      "type": ""
                    },
                    {
                      "name": "end",
                      "nativeSrc": "3735:3:46",
                      "nodeType": "YulTypedName",
                      "src": "3735:3:46",
                      "type": ""
                    }
                  ],
                  "src": "3690:186:46"
                },
                {
                  "body": {
                    "nativeSrc": "3961:464:46",
                    "nodeType": "YulBlock",
                    "src": "3961:464:46",
                    "statements": [
                      {
                        "body": {
                          "nativeSrc": "3987:431:46",
                          "nodeType": "YulBlock",
                          "src": "3987:431:46",
                          "statements": [
                            {
                              "nativeSrc": "4001:54:46",
                              "nodeType": "YulVariableDeclaration",
                              "src": "4001:54:46",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "array",
                                    "nativeSrc": "4049:5:46",
                                    "nodeType": "YulIdentifier",
                                    "src": "4049:5:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_dataslot_t_string_storage",
                                  "nativeSrc": "4017:31:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "4017:31:46"
                                },
                                "nativeSrc": "4017:38:46",
                                "nodeType": "YulFunctionCall",
                                "src": "4017:38:46"
                              },
                              "variables": [
                                {
                                  "name": "dataArea",
                                  "nativeSrc": "4005:8:46",
                                  "nodeType": "YulTypedName",
                                  "src": "4005:8:46",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "4068:63:46",
                              "nodeType": "YulVariableDeclaration",
                              "src": "4068:63:46",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "dataArea",
                                    "nativeSrc": "4091:8:46",
                                    "nodeType": "YulIdentifier",
                                    "src": "4091:8:46"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "startIndex",
                                        "nativeSrc": "4119:10:46",
                                        "nodeType": "YulIdentifier",
                                        "src": "4119:10:46"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "divide_by_32_ceil",
                                      "nativeSrc": "4101:17:46",
                                      "nodeType": "YulIdentifier",
                                      "src": "4101:17:46"
                                    },
                                    "nativeSrc": "4101:29:46",
                                    "nodeType": "YulFunctionCall",
                                    "src": "4101:29:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "4087:3:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "4087:3:46"
                                },
                                "nativeSrc": "4087:44:46",
                                "nodeType": "YulFunctionCall",
                                "src": "4087:44:46"
                              },
                              "variables": [
                                {
                                  "name": "deleteStart",
                                  "nativeSrc": "4072:11:46",
                                  "nodeType": "YulTypedName",
                                  "src": "4072:11:46",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "4288:27:46",
                                "nodeType": "YulBlock",
                                "src": "4288:27:46",
                                "statements": [
                                  {
                                    "nativeSrc": "4290:23:46",
                                    "nodeType": "YulAssignment",
                                    "src": "4290:23:46",
                                    "value": {
                                      "name": "dataArea",
                                      "nativeSrc": "4305:8:46",
                                      "nodeType": "YulIdentifier",
                                      "src": "4305:8:46"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "deleteStart",
                                        "nativeSrc": "4290:11:46",
                                        "nodeType": "YulIdentifier",
                                        "src": "4290:11:46"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "startIndex",
                                    "nativeSrc": "4272:10:46",
                                    "nodeType": "YulIdentifier",
                                    "src": "4272:10:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "4284:2:46",
                                    "nodeType": "YulLiteral",
                                    "src": "4284:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nativeSrc": "4269:2:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "4269:2:46"
                                },
                                "nativeSrc": "4269:18:46",
                                "nodeType": "YulFunctionCall",
                                "src": "4269:18:46"
                              },
                              "nativeSrc": "4266:49:46",
                              "nodeType": "YulIf",
                              "src": "4266:49:46"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "deleteStart",
                                    "nativeSrc": "4357:11:46",
                                    "nodeType": "YulIdentifier",
                                    "src": "4357:11:46"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataArea",
                                        "nativeSrc": "4374:8:46",
                                        "nodeType": "YulIdentifier",
                                        "src": "4374:8:46"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "len",
                                            "nativeSrc": "4402:3:46",
                                            "nodeType": "YulIdentifier",
                                            "src": "4402:3:46"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "divide_by_32_ceil",
                                          "nativeSrc": "4384:17:46",
                                          "nodeType": "YulIdentifier",
                                          "src": "4384:17:46"
                                        },
                                        "nativeSrc": "4384:22:46",
                                        "nodeType": "YulFunctionCall",
                                        "src": "4384:22:46"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "4370:3:46",
                                      "nodeType": "YulIdentifier",
                                      "src": "4370:3:46"
                                    },
                                    "nativeSrc": "4370:37:46",
                                    "nodeType": "YulFunctionCall",
                                    "src": "4370:37:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "clear_storage_range_t_bytes1",
                                  "nativeSrc": "4328:28:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "4328:28:46"
                                },
                                "nativeSrc": "4328:80:46",
                                "nodeType": "YulFunctionCall",
                                "src": "4328:80:46"
                              },
                              "nativeSrc": "4328:80:46",
                              "nodeType": "YulExpressionStatement",
                              "src": "4328:80:46"
                            }
                          ]
                        },
                        "condition": {
                          "arguments": [
                            {
                              "name": "len",
                              "nativeSrc": "3978:3:46",
                              "nodeType": "YulIdentifier",
                              "src": "3978:3:46"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "3983:2:46",
                              "nodeType": "YulLiteral",
                              "src": "3983:2:46",
                              "type": "",
                              "value": "31"
                            }
                          ],
                          "functionName": {
                            "name": "gt",
                            "nativeSrc": "3975:2:46",
                            "nodeType": "YulIdentifier",
                            "src": "3975:2:46"
                          },
                          "nativeSrc": "3975:11:46",
                          "nodeType": "YulFunctionCall",
                          "src": "3975:11:46"
                        },
                        "nativeSrc": "3972:446:46",
                        "nodeType": "YulIf",
                        "src": "3972:446:46"
                      }
                    ]
                  },
                  "name": "clean_up_bytearray_end_slots_t_string_storage",
                  "nativeSrc": "3882:543:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "array",
                      "nativeSrc": "3937:5:46",
                      "nodeType": "YulTypedName",
                      "src": "3937:5:46",
                      "type": ""
                    },
                    {
                      "name": "len",
                      "nativeSrc": "3944:3:46",
                      "nodeType": "YulTypedName",
                      "src": "3944:3:46",
                      "type": ""
                    },
                    {
                      "name": "startIndex",
                      "nativeSrc": "3949:10:46",
                      "nodeType": "YulTypedName",
                      "src": "3949:10:46",
                      "type": ""
                    }
                  ],
                  "src": "3882:543:46"
                },
                {
                  "body": {
                    "nativeSrc": "4494:54:46",
                    "nodeType": "YulBlock",
                    "src": "4494:54:46",
                    "statements": [
                      {
                        "nativeSrc": "4504:37:46",
                        "nodeType": "YulAssignment",
                        "src": "4504:37:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "bits",
                              "nativeSrc": "4529:4:46",
                              "nodeType": "YulIdentifier",
                              "src": "4529:4:46"
                            },
                            {
                              "name": "value",
                              "nativeSrc": "4535:5:46",
                              "nodeType": "YulIdentifier",
                              "src": "4535:5:46"
                            }
                          ],
                          "functionName": {
                            "name": "shr",
                            "nativeSrc": "4525:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "4525:3:46"
                          },
                          "nativeSrc": "4525:16:46",
                          "nodeType": "YulFunctionCall",
                          "src": "4525:16:46"
                        },
                        "variableNames": [
                          {
                            "name": "newValue",
                            "nativeSrc": "4504:8:46",
                            "nodeType": "YulIdentifier",
                            "src": "4504:8:46"
                          }
                        ]
                      }
                    ]
                  },
                  "name": "shift_right_unsigned_dynamic",
                  "nativeSrc": "4431:117:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "bits",
                      "nativeSrc": "4469:4:46",
                      "nodeType": "YulTypedName",
                      "src": "4469:4:46",
                      "type": ""
                    },
                    {
                      "name": "value",
                      "nativeSrc": "4475:5:46",
                      "nodeType": "YulTypedName",
                      "src": "4475:5:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "newValue",
                      "nativeSrc": "4485:8:46",
                      "nodeType": "YulTypedName",
                      "src": "4485:8:46",
                      "type": ""
                    }
                  ],
                  "src": "4431:117:46"
                },
                {
                  "body": {
                    "nativeSrc": "4605:118:46",
                    "nodeType": "YulBlock",
                    "src": "4605:118:46",
                    "statements": [
                      {
                        "nativeSrc": "4615:68:46",
                        "nodeType": "YulVariableDeclaration",
                        "src": "4615:68:46",
                        "value": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "4664:1:46",
                                      "nodeType": "YulLiteral",
                                      "src": "4664:1:46",
                                      "type": "",
                                      "value": "8"
                                    },
                                    {
                                      "name": "bytes",
                                      "nativeSrc": "4667:5:46",
                                      "nodeType": "YulIdentifier",
                                      "src": "4667:5:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mul",
                                    "nativeSrc": "4660:3:46",
                                    "nodeType": "YulIdentifier",
                                    "src": "4660:3:46"
                                  },
                                  "nativeSrc": "4660:13:46",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4660:13:46"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "4679:1:46",
                                      "nodeType": "YulLiteral",
                                      "src": "4679:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "not",
                                    "nativeSrc": "4675:3:46",
                                    "nodeType": "YulIdentifier",
                                    "src": "4675:3:46"
                                  },
                                  "nativeSrc": "4675:6:46",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4675:6:46"
                                }
                              ],
                              "functionName": {
                                "name": "shift_right_unsigned_dynamic",
                                "nativeSrc": "4631:28:46",
                                "nodeType": "YulIdentifier",
                                "src": "4631:28:46"
                              },
                              "nativeSrc": "4631:51:46",
                              "nodeType": "YulFunctionCall",
                              "src": "4631:51:46"
                            }
                          ],
                          "functionName": {
                            "name": "not",
                            "nativeSrc": "4627:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "4627:3:46"
                          },
                          "nativeSrc": "4627:56:46",
                          "nodeType": "YulFunctionCall",
                          "src": "4627:56:46"
                        },
                        "variables": [
                          {
                            "name": "mask",
                            "nativeSrc": "4619:4:46",
                            "nodeType": "YulTypedName",
                            "src": "4619:4:46",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "nativeSrc": "4692:25:46",
                        "nodeType": "YulAssignment",
                        "src": "4692:25:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "data",
                              "nativeSrc": "4706:4:46",
                              "nodeType": "YulIdentifier",
                              "src": "4706:4:46"
                            },
                            {
                              "name": "mask",
                              "nativeSrc": "4712:4:46",
                              "nodeType": "YulIdentifier",
                              "src": "4712:4:46"
                            }
                          ],
                          "functionName": {
                            "name": "and",
                            "nativeSrc": "4702:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "4702:3:46"
                          },
                          "nativeSrc": "4702:15:46",
                          "nodeType": "YulFunctionCall",
                          "src": "4702:15:46"
                        },
                        "variableNames": [
                          {
                            "name": "result",
                            "nativeSrc": "4692:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "4692:6:46"
                          }
                        ]
                      }
                    ]
                  },
                  "name": "mask_bytes_dynamic",
                  "nativeSrc": "4554:169:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "data",
                      "nativeSrc": "4582:4:46",
                      "nodeType": "YulTypedName",
                      "src": "4582:4:46",
                      "type": ""
                    },
                    {
                      "name": "bytes",
                      "nativeSrc": "4588:5:46",
                      "nodeType": "YulTypedName",
                      "src": "4588:5:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "result",
                      "nativeSrc": "4598:6:46",
                      "nodeType": "YulTypedName",
                      "src": "4598:6:46",
                      "type": ""
                    }
                  ],
                  "src": "4554:169:46"
                },
                {
                  "body": {
                    "nativeSrc": "4809:214:46",
                    "nodeType": "YulBlock",
                    "src": "4809:214:46",
                    "statements": [
                      {
                        "nativeSrc": "4942:37:46",
                        "nodeType": "YulAssignment",
                        "src": "4942:37:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "data",
                              "nativeSrc": "4969:4:46",
                              "nodeType": "YulIdentifier",
                              "src": "4969:4:46"
                            },
                            {
                              "name": "len",
                              "nativeSrc": "4975:3:46",
                              "nodeType": "YulIdentifier",
                              "src": "4975:3:46"
                            }
                          ],
                          "functionName": {
                            "name": "mask_bytes_dynamic",
                            "nativeSrc": "4950:18:46",
                            "nodeType": "YulIdentifier",
                            "src": "4950:18:46"
                          },
                          "nativeSrc": "4950:29:46",
                          "nodeType": "YulFunctionCall",
                          "src": "4950:29:46"
                        },
                        "variableNames": [
                          {
                            "name": "data",
                            "nativeSrc": "4942:4:46",
                            "nodeType": "YulIdentifier",
                            "src": "4942:4:46"
                          }
                        ]
                      },
                      {
                        "nativeSrc": "4988:29:46",
                        "nodeType": "YulAssignment",
                        "src": "4988:29:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "data",
                              "nativeSrc": "4999:4:46",
                              "nodeType": "YulIdentifier",
                              "src": "4999:4:46"
                            },
                            {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nativeSrc": "5009:1:46",
                                  "nodeType": "YulLiteral",
                                  "src": "5009:1:46",
                                  "type": "",
                                  "value": "2"
                                },
                                {
                                  "name": "len",
                                  "nativeSrc": "5012:3:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "5012:3:46"
                                }
                              ],
                              "functionName": {
                                "name": "mul",
                                "nativeSrc": "5005:3:46",
                                "nodeType": "YulIdentifier",
                                "src": "5005:3:46"
                              },
                              "nativeSrc": "5005:11:46",
                              "nodeType": "YulFunctionCall",
                              "src": "5005:11:46"
                            }
                          ],
                          "functionName": {
                            "name": "or",
                            "nativeSrc": "4996:2:46",
                            "nodeType": "YulIdentifier",
                            "src": "4996:2:46"
                          },
                          "nativeSrc": "4996:21:46",
                          "nodeType": "YulFunctionCall",
                          "src": "4996:21:46"
                        },
                        "variableNames": [
                          {
                            "name": "used",
                            "nativeSrc": "4988:4:46",
                            "nodeType": "YulIdentifier",
                            "src": "4988:4:46"
                          }
                        ]
                      }
                    ]
                  },
                  "name": "extract_used_part_and_set_length_of_short_byte_array",
                  "nativeSrc": "4728:295:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "data",
                      "nativeSrc": "4790:4:46",
                      "nodeType": "YulTypedName",
                      "src": "4790:4:46",
                      "type": ""
                    },
                    {
                      "name": "len",
                      "nativeSrc": "4796:3:46",
                      "nodeType": "YulTypedName",
                      "src": "4796:3:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "used",
                      "nativeSrc": "4804:4:46",
                      "nodeType": "YulTypedName",
                      "src": "4804:4:46",
                      "type": ""
                    }
                  ],
                  "src": "4728:295:46"
                },
                {
                  "body": {
                    "nativeSrc": "5120:1303:46",
                    "nodeType": "YulBlock",
                    "src": "5120:1303:46",
                    "statements": [
                      {
                        "nativeSrc": "5131:51:46",
                        "nodeType": "YulVariableDeclaration",
                        "src": "5131:51:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "src",
                              "nativeSrc": "5178:3:46",
                              "nodeType": "YulIdentifier",
                              "src": "5178:3:46"
                            }
                          ],
                          "functionName": {
                            "name": "array_length_t_string_memory_ptr",
                            "nativeSrc": "5145:32:46",
                            "nodeType": "YulIdentifier",
                            "src": "5145:32:46"
                          },
                          "nativeSrc": "5145:37:46",
                          "nodeType": "YulFunctionCall",
                          "src": "5145:37:46"
                        },
                        "variables": [
                          {
                            "name": "newLen",
                            "nativeSrc": "5135:6:46",
                            "nodeType": "YulTypedName",
                            "src": "5135:6:46",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "body": {
                          "nativeSrc": "5267:22:46",
                          "nodeType": "YulBlock",
                          "src": "5267:22:46",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [],
                                "functionName": {
                                  "name": "panic_error_0x41",
                                  "nativeSrc": "5269:16:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "5269:16:46"
                                },
                                "nativeSrc": "5269:18:46",
                                "nodeType": "YulFunctionCall",
                                "src": "5269:18:46"
                              },
                              "nativeSrc": "5269:18:46",
                              "nodeType": "YulExpressionStatement",
                              "src": "5269:18:46"
                            }
                          ]
                        },
                        "condition": {
                          "arguments": [
                            {
                              "name": "newLen",
                              "nativeSrc": "5239:6:46",
                              "nodeType": "YulIdentifier",
                              "src": "5239:6:46"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "5247:18:46",
                              "nodeType": "YulLiteral",
                              "src": "5247:18:46",
                              "type": "",
                              "value": "0xffffffffffffffff"
                            }
                          ],
                          "functionName": {
                            "name": "gt",
                            "nativeSrc": "5236:2:46",
                            "nodeType": "YulIdentifier",
                            "src": "5236:2:46"
                          },
                          "nativeSrc": "5236:30:46",
                          "nodeType": "YulFunctionCall",
                          "src": "5236:30:46"
                        },
                        "nativeSrc": "5233:56:46",
                        "nodeType": "YulIf",
                        "src": "5233:56:46"
                      },
                      {
                        "nativeSrc": "5299:52:46",
                        "nodeType": "YulVariableDeclaration",
                        "src": "5299:52:46",
                        "value": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "name": "slot",
                                  "nativeSrc": "5345:4:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "5345:4:46"
                                }
                              ],
                              "functionName": {
                                "name": "sload",
                                "nativeSrc": "5339:5:46",
                                "nodeType": "YulIdentifier",
                                "src": "5339:5:46"
                              },
                              "nativeSrc": "5339:11:46",
                              "nodeType": "YulFunctionCall",
                              "src": "5339:11:46"
                            }
                          ],
                          "functionName": {
                            "name": "extract_byte_array_length",
                            "nativeSrc": "5313:25:46",
                            "nodeType": "YulIdentifier",
                            "src": "5313:25:46"
                          },
                          "nativeSrc": "5313:38:46",
                          "nodeType": "YulFunctionCall",
                          "src": "5313:38:46"
                        },
                        "variables": [
                          {
                            "name": "oldLen",
                            "nativeSrc": "5303:6:46",
                            "nodeType": "YulTypedName",
                            "src": "5303:6:46",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "slot",
                              "nativeSrc": "5444:4:46",
                              "nodeType": "YulIdentifier",
                              "src": "5444:4:46"
                            },
                            {
                              "name": "oldLen",
                              "nativeSrc": "5450:6:46",
                              "nodeType": "YulIdentifier",
                              "src": "5450:6:46"
                            },
                            {
                              "name": "newLen",
                              "nativeSrc": "5458:6:46",
                              "nodeType": "YulIdentifier",
                              "src": "5458:6:46"
                            }
                          ],
                          "functionName": {
                            "name": "clean_up_bytearray_end_slots_t_string_storage",
                            "nativeSrc": "5398:45:46",
                            "nodeType": "YulIdentifier",
                            "src": "5398:45:46"
                          },
                          "nativeSrc": "5398:67:46",
                          "nodeType": "YulFunctionCall",
                          "src": "5398:67:46"
                        },
                        "nativeSrc": "5398:67:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "5398:67:46"
                      },
                      {
                        "nativeSrc": "5475:18:46",
                        "nodeType": "YulVariableDeclaration",
                        "src": "5475:18:46",
                        "value": {
                          "kind": "number",
                          "nativeSrc": "5492:1:46",
                          "nodeType": "YulLiteral",
                          "src": "5492:1:46",
                          "type": "",
                          "value": "0"
                        },
                        "variables": [
                          {
                            "name": "srcOffset",
                            "nativeSrc": "5479:9:46",
                            "nodeType": "YulTypedName",
                            "src": "5479:9:46",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "nativeSrc": "5503:17:46",
                        "nodeType": "YulAssignment",
                        "src": "5503:17:46",
                        "value": {
                          "kind": "number",
                          "nativeSrc": "5516:4:46",
                          "nodeType": "YulLiteral",
                          "src": "5516:4:46",
                          "type": "",
                          "value": "0x20"
                        },
                        "variableNames": [
                          {
                            "name": "srcOffset",
                            "nativeSrc": "5503:9:46",
                            "nodeType": "YulIdentifier",
                            "src": "5503:9:46"
                          }
                        ]
                      },
                      {
                        "cases": [
                          {
                            "body": {
                              "nativeSrc": "5567:611:46",
                              "nodeType": "YulBlock",
                              "src": "5567:611:46",
                              "statements": [
                                {
                                  "nativeSrc": "5581:37:46",
                                  "nodeType": "YulVariableDeclaration",
                                  "src": "5581:37:46",
                                  "value": {
                                    "arguments": [
                                      {
                                        "name": "newLen",
                                        "nativeSrc": "5600:6:46",
                                        "nodeType": "YulIdentifier",
                                        "src": "5600:6:46"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nativeSrc": "5612:4:46",
                                            "nodeType": "YulLiteral",
                                            "src": "5612:4:46",
                                            "type": "",
                                            "value": "0x1f"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nativeSrc": "5608:3:46",
                                          "nodeType": "YulIdentifier",
                                          "src": "5608:3:46"
                                        },
                                        "nativeSrc": "5608:9:46",
                                        "nodeType": "YulFunctionCall",
                                        "src": "5608:9:46"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nativeSrc": "5596:3:46",
                                      "nodeType": "YulIdentifier",
                                      "src": "5596:3:46"
                                    },
                                    "nativeSrc": "5596:22:46",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5596:22:46"
                                  },
                                  "variables": [
                                    {
                                      "name": "loopEnd",
                                      "nativeSrc": "5585:7:46",
                                      "nodeType": "YulTypedName",
                                      "src": "5585:7:46",
                                      "type": ""
                                    }
                                  ]
                                },
                                {
                                  "nativeSrc": "5632:51:46",
                                  "nodeType": "YulVariableDeclaration",
                                  "src": "5632:51:46",
                                  "value": {
                                    "arguments": [
                                      {
                                        "name": "slot",
                                        "nativeSrc": "5678:4:46",
                                        "nodeType": "YulIdentifier",
                                        "src": "5678:4:46"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "array_dataslot_t_string_storage",
                                      "nativeSrc": "5646:31:46",
                                      "nodeType": "YulIdentifier",
                                      "src": "5646:31:46"
                                    },
                                    "nativeSrc": "5646:37:46",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5646:37:46"
                                  },
                                  "variables": [
                                    {
                                      "name": "dstPtr",
                                      "nativeSrc": "5636:6:46",
                                      "nodeType": "YulTypedName",
                                      "src": "5636:6:46",
                                      "type": ""
                                    }
                                  ]
                                },
                                {
                                  "nativeSrc": "5696:10:46",
                                  "nodeType": "YulVariableDeclaration",
                                  "src": "5696:10:46",
                                  "value": {
                                    "kind": "number",
                                    "nativeSrc": "5705:1:46",
                                    "nodeType": "YulLiteral",
                                    "src": "5705:1:46",
                                    "type": "",
                                    "value": "0"
                                  },
                                  "variables": [
                                    {
                                      "name": "i",
                                      "nativeSrc": "5700:1:46",
                                      "nodeType": "YulTypedName",
                                      "src": "5700:1:46",
                                      "type": ""
                                    }
                                  ]
                                },
                                {
                                  "body": {
                                    "nativeSrc": "5764:163:46",
                                    "nodeType": "YulBlock",
                                    "src": "5764:163:46",
                                    "statements": [
                                      {
                                        "expression": {
                                          "arguments": [
                                            {
                                              "name": "dstPtr",
                                              "nativeSrc": "5789:6:46",
                                              "nodeType": "YulIdentifier",
                                              "src": "5789:6:46"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "arguments": [
                                                    {
                                                      "name": "src",
                                                      "nativeSrc": "5807:3:46",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "5807:3:46"
                                                    },
                                                    {
                                                      "name": "srcOffset",
                                                      "nativeSrc": "5812:9:46",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "5812:9:46"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "add",
                                                    "nativeSrc": "5803:3:46",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "5803:3:46"
                                                  },
                                                  "nativeSrc": "5803:19:46",
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "5803:19:46"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "mload",
                                                "nativeSrc": "5797:5:46",
                                                "nodeType": "YulIdentifier",
                                                "src": "5797:5:46"
                                              },
                                              "nativeSrc": "5797:26:46",
                                              "nodeType": "YulFunctionCall",
                                              "src": "5797:26:46"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "sstore",
                                            "nativeSrc": "5782:6:46",
                                            "nodeType": "YulIdentifier",
                                            "src": "5782:6:46"
                                          },
                                          "nativeSrc": "5782:42:46",
                                          "nodeType": "YulFunctionCall",
                                          "src": "5782:42:46"
                                        },
                                        "nativeSrc": "5782:42:46",
                                        "nodeType": "YulExpressionStatement",
                                        "src": "5782:42:46"
                                      },
                                      {
                                        "nativeSrc": "5841:24:46",
                                        "nodeType": "YulAssignment",
                                        "src": "5841:24:46",
                                        "value": {
                                          "arguments": [
                                            {
                                              "name": "dstPtr",
                                              "nativeSrc": "5855:6:46",
                                              "nodeType": "YulIdentifier",
                                              "src": "5855:6:46"
                                            },
                                            {
                                              "kind": "number",
                                              "nativeSrc": "5863:1:46",
                                              "nodeType": "YulLiteral",
                                              "src": "5863:1:46",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nativeSrc": "5851:3:46",
                                            "nodeType": "YulIdentifier",
                                            "src": "5851:3:46"
                                          },
                                          "nativeSrc": "5851:14:46",
                                          "nodeType": "YulFunctionCall",
                                          "src": "5851:14:46"
                                        },
                                        "variableNames": [
                                          {
                                            "name": "dstPtr",
                                            "nativeSrc": "5841:6:46",
                                            "nodeType": "YulIdentifier",
                                            "src": "5841:6:46"
                                          }
                                        ]
                                      },
                                      {
                                        "nativeSrc": "5882:31:46",
                                        "nodeType": "YulAssignment",
                                        "src": "5882:31:46",
                                        "value": {
                                          "arguments": [
                                            {
                                              "name": "srcOffset",
                                              "nativeSrc": "5899:9:46",
                                              "nodeType": "YulIdentifier",
                                              "src": "5899:9:46"
                                            },
                                            {
                                              "kind": "number",
                                              "nativeSrc": "5910:2:46",
                                              "nodeType": "YulLiteral",
                                              "src": "5910:2:46",
                                              "type": "",
                                              "value": "32"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nativeSrc": "5895:3:46",
                                            "nodeType": "YulIdentifier",
                                            "src": "5895:3:46"
                                          },
                                          "nativeSrc": "5895:18:46",
                                          "nodeType": "YulFunctionCall",
                                          "src": "5895:18:46"
                                        },
                                        "variableNames": [
                                          {
                                            "name": "srcOffset",
                                            "nativeSrc": "5882:9:46",
                                            "nodeType": "YulIdentifier",
                                            "src": "5882:9:46"
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  "condition": {
                                    "arguments": [
                                      {
                                        "name": "i",
                                        "nativeSrc": "5730:1:46",
                                        "nodeType": "YulIdentifier",
                                        "src": "5730:1:46"
                                      },
                                      {
                                        "name": "loopEnd",
                                        "nativeSrc": "5733:7:46",
                                        "nodeType": "YulIdentifier",
                                        "src": "5733:7:46"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nativeSrc": "5727:2:46",
                                      "nodeType": "YulIdentifier",
                                      "src": "5727:2:46"
                                    },
                                    "nativeSrc": "5727:14:46",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5727:14:46"
                                  },
                                  "nativeSrc": "5719:208:46",
                                  "nodeType": "YulForLoop",
                                  "post": {
                                    "nativeSrc": "5742:21:46",
                                    "nodeType": "YulBlock",
                                    "src": "5742:21:46",
                                    "statements": [
                                      {
                                        "nativeSrc": "5744:17:46",
                                        "nodeType": "YulAssignment",
                                        "src": "5744:17:46",
                                        "value": {
                                          "arguments": [
                                            {
                                              "name": "i",
                                              "nativeSrc": "5753:1:46",
                                              "nodeType": "YulIdentifier",
                                              "src": "5753:1:46"
                                            },
                                            {
                                              "kind": "number",
                                              "nativeSrc": "5756:4:46",
                                              "nodeType": "YulLiteral",
                                              "src": "5756:4:46",
                                              "type": "",
                                              "value": "0x20"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nativeSrc": "5749:3:46",
                                            "nodeType": "YulIdentifier",
                                            "src": "5749:3:46"
                                          },
                                          "nativeSrc": "5749:12:46",
                                          "nodeType": "YulFunctionCall",
                                          "src": "5749:12:46"
                                        },
                                        "variableNames": [
                                          {
                                            "name": "i",
                                            "nativeSrc": "5744:1:46",
                                            "nodeType": "YulIdentifier",
                                            "src": "5744:1:46"
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  "pre": {
                                    "nativeSrc": "5723:3:46",
                                    "nodeType": "YulBlock",
                                    "src": "5723:3:46",
                                    "statements": []
                                  },
                                  "src": "5719:208:46"
                                },
                                {
                                  "body": {
                                    "nativeSrc": "5963:156:46",
                                    "nodeType": "YulBlock",
                                    "src": "5963:156:46",
                                    "statements": [
                                      {
                                        "nativeSrc": "5981:43:46",
                                        "nodeType": "YulVariableDeclaration",
                                        "src": "5981:43:46",
                                        "value": {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "src",
                                                  "nativeSrc": "6008:3:46",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "6008:3:46"
                                                },
                                                {
                                                  "name": "srcOffset",
                                                  "nativeSrc": "6013:9:46",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "6013:9:46"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nativeSrc": "6004:3:46",
                                                "nodeType": "YulIdentifier",
                                                "src": "6004:3:46"
                                              },
                                              "nativeSrc": "6004:19:46",
                                              "nodeType": "YulFunctionCall",
                                              "src": "6004:19:46"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nativeSrc": "5998:5:46",
                                            "nodeType": "YulIdentifier",
                                            "src": "5998:5:46"
                                          },
                                          "nativeSrc": "5998:26:46",
                                          "nodeType": "YulFunctionCall",
                                          "src": "5998:26:46"
                                        },
                                        "variables": [
                                          {
                                            "name": "lastValue",
                                            "nativeSrc": "5985:9:46",
                                            "nodeType": "YulTypedName",
                                            "src": "5985:9:46",
                                            "type": ""
                                          }
                                        ]
                                      },
                                      {
                                        "expression": {
                                          "arguments": [
                                            {
                                              "name": "dstPtr",
                                              "nativeSrc": "6048:6:46",
                                              "nodeType": "YulIdentifier",
                                              "src": "6048:6:46"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "name": "lastValue",
                                                  "nativeSrc": "6075:9:46",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "6075:9:46"
                                                },
                                                {
                                                  "arguments": [
                                                    {
                                                      "name": "newLen",
                                                      "nativeSrc": "6090:6:46",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "6090:6:46"
                                                    },
                                                    {
                                                      "kind": "number",
                                                      "nativeSrc": "6098:4:46",
                                                      "nodeType": "YulLiteral",
                                                      "src": "6098:4:46",
                                                      "type": "",
                                                      "value": "0x1f"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "and",
                                                    "nativeSrc": "6086:3:46",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "6086:3:46"
                                                  },
                                                  "nativeSrc": "6086:17:46",
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "6086:17:46"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "mask_bytes_dynamic",
                                                "nativeSrc": "6056:18:46",
                                                "nodeType": "YulIdentifier",
                                                "src": "6056:18:46"
                                              },
                                              "nativeSrc": "6056:48:46",
                                              "nodeType": "YulFunctionCall",
                                              "src": "6056:48:46"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "sstore",
                                            "nativeSrc": "6041:6:46",
                                            "nodeType": "YulIdentifier",
                                            "src": "6041:6:46"
                                          },
                                          "nativeSrc": "6041:64:46",
                                          "nodeType": "YulFunctionCall",
                                          "src": "6041:64:46"
                                        },
                                        "nativeSrc": "6041:64:46",
                                        "nodeType": "YulExpressionStatement",
                                        "src": "6041:64:46"
                                      }
                                    ]
                                  },
                                  "condition": {
                                    "arguments": [
                                      {
                                        "name": "loopEnd",
                                        "nativeSrc": "5946:7:46",
                                        "nodeType": "YulIdentifier",
                                        "src": "5946:7:46"
                                      },
                                      {
                                        "name": "newLen",
                                        "nativeSrc": "5955:6:46",
                                        "nodeType": "YulIdentifier",
                                        "src": "5955:6:46"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nativeSrc": "5943:2:46",
                                      "nodeType": "YulIdentifier",
                                      "src": "5943:2:46"
                                    },
                                    "nativeSrc": "5943:19:46",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5943:19:46"
                                  },
                                  "nativeSrc": "5940:179:46",
                                  "nodeType": "YulIf",
                                  "src": "5940:179:46"
                                },
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "name": "slot",
                                        "nativeSrc": "6139:4:46",
                                        "nodeType": "YulIdentifier",
                                        "src": "6139:4:46"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "newLen",
                                                "nativeSrc": "6153:6:46",
                                                "nodeType": "YulIdentifier",
                                                "src": "6153:6:46"
                                              },
                                              {
                                                "kind": "number",
                                                "nativeSrc": "6161:1:46",
                                                "nodeType": "YulLiteral",
                                                "src": "6161:1:46",
                                                "type": "",
                                                "value": "2"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mul",
                                              "nativeSrc": "6149:3:46",
                                              "nodeType": "YulIdentifier",
                                              "src": "6149:3:46"
                                            },
                                            "nativeSrc": "6149:14:46",
                                            "nodeType": "YulFunctionCall",
                                            "src": "6149:14:46"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "6165:1:46",
                                            "nodeType": "YulLiteral",
                                            "src": "6165:1:46",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nativeSrc": "6145:3:46",
                                          "nodeType": "YulIdentifier",
                                          "src": "6145:3:46"
                                        },
                                        "nativeSrc": "6145:22:46",
                                        "nodeType": "YulFunctionCall",
                                        "src": "6145:22:46"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sstore",
                                      "nativeSrc": "6132:6:46",
                                      "nodeType": "YulIdentifier",
                                      "src": "6132:6:46"
                                    },
                                    "nativeSrc": "6132:36:46",
                                    "nodeType": "YulFunctionCall",
                                    "src": "6132:36:46"
                                  },
                                  "nativeSrc": "6132:36:46",
                                  "nodeType": "YulExpressionStatement",
                                  "src": "6132:36:46"
                                }
                              ]
                            },
                            "nativeSrc": "5560:618:46",
                            "nodeType": "YulCase",
                            "src": "5560:618:46",
                            "value": {
                              "kind": "number",
                              "nativeSrc": "5565:1:46",
                              "nodeType": "YulLiteral",
                              "src": "5565:1:46",
                              "type": "",
                              "value": "1"
                            }
                          },
                          {
                            "body": {
                              "nativeSrc": "6195:222:46",
                              "nodeType": "YulBlock",
                              "src": "6195:222:46",
                              "statements": [
                                {
                                  "nativeSrc": "6209:14:46",
                                  "nodeType": "YulVariableDeclaration",
                                  "src": "6209:14:46",
                                  "value": {
                                    "kind": "number",
                                    "nativeSrc": "6222:1:46",
                                    "nodeType": "YulLiteral",
                                    "src": "6222:1:46",
                                    "type": "",
                                    "value": "0"
                                  },
                                  "variables": [
                                    {
                                      "name": "value",
                                      "nativeSrc": "6213:5:46",
                                      "nodeType": "YulTypedName",
                                      "src": "6213:5:46",
                                      "type": ""
                                    }
                                  ]
                                },
                                {
                                  "body": {
                                    "nativeSrc": "6246:67:46",
                                    "nodeType": "YulBlock",
                                    "src": "6246:67:46",
                                    "statements": [
                                      {
                                        "nativeSrc": "6264:35:46",
                                        "nodeType": "YulAssignment",
                                        "src": "6264:35:46",
                                        "value": {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "src",
                                                  "nativeSrc": "6283:3:46",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "6283:3:46"
                                                },
                                                {
                                                  "name": "srcOffset",
                                                  "nativeSrc": "6288:9:46",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "6288:9:46"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nativeSrc": "6279:3:46",
                                                "nodeType": "YulIdentifier",
                                                "src": "6279:3:46"
                                              },
                                              "nativeSrc": "6279:19:46",
                                              "nodeType": "YulFunctionCall",
                                              "src": "6279:19:46"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nativeSrc": "6273:5:46",
                                            "nodeType": "YulIdentifier",
                                            "src": "6273:5:46"
                                          },
                                          "nativeSrc": "6273:26:46",
                                          "nodeType": "YulFunctionCall",
                                          "src": "6273:26:46"
                                        },
                                        "variableNames": [
                                          {
                                            "name": "value",
                                            "nativeSrc": "6264:5:46",
                                            "nodeType": "YulIdentifier",
                                            "src": "6264:5:46"
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  "condition": {
                                    "name": "newLen",
                                    "nativeSrc": "6239:6:46",
                                    "nodeType": "YulIdentifier",
                                    "src": "6239:6:46"
                                  },
                                  "nativeSrc": "6236:77:46",
                                  "nodeType": "YulIf",
                                  "src": "6236:77:46"
                                },
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "name": "slot",
                                        "nativeSrc": "6333:4:46",
                                        "nodeType": "YulIdentifier",
                                        "src": "6333:4:46"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nativeSrc": "6392:5:46",
                                            "nodeType": "YulIdentifier",
                                            "src": "6392:5:46"
                                          },
                                          {
                                            "name": "newLen",
                                            "nativeSrc": "6399:6:46",
                                            "nodeType": "YulIdentifier",
                                            "src": "6399:6:46"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "extract_used_part_and_set_length_of_short_byte_array",
                                          "nativeSrc": "6339:52:46",
                                          "nodeType": "YulIdentifier",
                                          "src": "6339:52:46"
                                        },
                                        "nativeSrc": "6339:67:46",
                                        "nodeType": "YulFunctionCall",
                                        "src": "6339:67:46"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sstore",
                                      "nativeSrc": "6326:6:46",
                                      "nodeType": "YulIdentifier",
                                      "src": "6326:6:46"
                                    },
                                    "nativeSrc": "6326:81:46",
                                    "nodeType": "YulFunctionCall",
                                    "src": "6326:81:46"
                                  },
                                  "nativeSrc": "6326:81:46",
                                  "nodeType": "YulExpressionStatement",
                                  "src": "6326:81:46"
                                }
                              ]
                            },
                            "nativeSrc": "6187:230:46",
                            "nodeType": "YulCase",
                            "src": "6187:230:46",
                            "value": "default"
                          }
                        ],
                        "expression": {
                          "arguments": [
                            {
                              "name": "newLen",
                              "nativeSrc": "5540:6:46",
                              "nodeType": "YulIdentifier",
                              "src": "5540:6:46"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "5548:2:46",
                              "nodeType": "YulLiteral",
                              "src": "5548:2:46",
                              "type": "",
                              "value": "31"
                            }
                          ],
                          "functionName": {
                            "name": "gt",
                            "nativeSrc": "5537:2:46",
                            "nodeType": "YulIdentifier",
                            "src": "5537:2:46"
                          },
                          "nativeSrc": "5537:14:46",
                          "nodeType": "YulFunctionCall",
                          "src": "5537:14:46"
                        },
                        "nativeSrc": "5530:887:46",
                        "nodeType": "YulSwitch",
                        "src": "5530:887:46"
                      }
                    ]
                  },
                  "name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
                  "nativeSrc": "5028:1395:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "slot",
                      "nativeSrc": "5109:4:46",
                      "nodeType": "YulTypedName",
                      "src": "5109:4:46",
                      "type": ""
                    },
                    {
                      "name": "src",
                      "nativeSrc": "5115:3:46",
                      "nodeType": "YulTypedName",
                      "src": "5115:3:46",
                      "type": ""
                    }
                  ],
                  "src": "5028:1395:46"
                },
                {
                  "body": {
                    "nativeSrc": "6494:53:46",
                    "nodeType": "YulBlock",
                    "src": "6494:53:46",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "pos",
                              "nativeSrc": "6511:3:46",
                              "nodeType": "YulIdentifier",
                              "src": "6511:3:46"
                            },
                            {
                              "arguments": [
                                {
                                  "name": "value",
                                  "nativeSrc": "6534:5:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "6534:5:46"
                                }
                              ],
                              "functionName": {
                                "name": "cleanup_t_address",
                                "nativeSrc": "6516:17:46",
                                "nodeType": "YulIdentifier",
                                "src": "6516:17:46"
                              },
                              "nativeSrc": "6516:24:46",
                              "nodeType": "YulFunctionCall",
                              "src": "6516:24:46"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nativeSrc": "6504:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "6504:6:46"
                          },
                          "nativeSrc": "6504:37:46",
                          "nodeType": "YulFunctionCall",
                          "src": "6504:37:46"
                        },
                        "nativeSrc": "6504:37:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "6504:37:46"
                      }
                    ]
                  },
                  "name": "abi_encode_t_address_to_t_address_fromStack",
                  "nativeSrc": "6429:118:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "value",
                      "nativeSrc": "6482:5:46",
                      "nodeType": "YulTypedName",
                      "src": "6482:5:46",
                      "type": ""
                    },
                    {
                      "name": "pos",
                      "nativeSrc": "6489:3:46",
                      "nodeType": "YulTypedName",
                      "src": "6489:3:46",
                      "type": ""
                    }
                  ],
                  "src": "6429:118:46"
                },
                {
                  "body": {
                    "nativeSrc": "6651:124:46",
                    "nodeType": "YulBlock",
                    "src": "6651:124:46",
                    "statements": [
                      {
                        "nativeSrc": "6661:26:46",
                        "nodeType": "YulAssignment",
                        "src": "6661:26:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "headStart",
                              "nativeSrc": "6673:9:46",
                              "nodeType": "YulIdentifier",
                              "src": "6673:9:46"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "6684:2:46",
                              "nodeType": "YulLiteral",
                              "src": "6684:2:46",
                              "type": "",
                              "value": "32"
                            }
                          ],
                          "functionName": {
                            "name": "add",
                            "nativeSrc": "6669:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "6669:3:46"
                          },
                          "nativeSrc": "6669:18:46",
                          "nodeType": "YulFunctionCall",
                          "src": "6669:18:46"
                        },
                        "variableNames": [
                          {
                            "name": "tail",
                            "nativeSrc": "6661:4:46",
                            "nodeType": "YulIdentifier",
                            "src": "6661:4:46"
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "value0",
                              "nativeSrc": "6741:6:46",
                              "nodeType": "YulIdentifier",
                              "src": "6741:6:46"
                            },
                            {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "6754:9:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "6754:9:46"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "6765:1:46",
                                  "nodeType": "YulLiteral",
                                  "src": "6765:1:46",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "6750:3:46",
                                "nodeType": "YulIdentifier",
                                "src": "6750:3:46"
                              },
                              "nativeSrc": "6750:17:46",
                              "nodeType": "YulFunctionCall",
                              "src": "6750:17:46"
                            }
                          ],
                          "functionName": {
                            "name": "abi_encode_t_address_to_t_address_fromStack",
                            "nativeSrc": "6697:43:46",
                            "nodeType": "YulIdentifier",
                            "src": "6697:43:46"
                          },
                          "nativeSrc": "6697:71:46",
                          "nodeType": "YulFunctionCall",
                          "src": "6697:71:46"
                        },
                        "nativeSrc": "6697:71:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "6697:71:46"
                      }
                    ]
                  },
                  "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                  "nativeSrc": "6553:222:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "headStart",
                      "nativeSrc": "6623:9:46",
                      "nodeType": "YulTypedName",
                      "src": "6623:9:46",
                      "type": ""
                    },
                    {
                      "name": "value0",
                      "nativeSrc": "6635:6:46",
                      "nodeType": "YulTypedName",
                      "src": "6635:6:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "tail",
                      "nativeSrc": "6646:4:46",
                      "nodeType": "YulTypedName",
                      "src": "6646:4:46",
                      "type": ""
                    }
                  ],
                  "src": "6553:222:46"
                },
                {
                  "body": {
                    "nativeSrc": "6809:152:46",
                    "nodeType": "YulBlock",
                    "src": "6809:152:46",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nativeSrc": "6826:1:46",
                              "nodeType": "YulLiteral",
                              "src": "6826:1:46",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "6829:77:46",
                              "nodeType": "YulLiteral",
                              "src": "6829:77:46",
                              "type": "",
                              "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nativeSrc": "6819:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "6819:6:46"
                          },
                          "nativeSrc": "6819:88:46",
                          "nodeType": "YulFunctionCall",
                          "src": "6819:88:46"
                        },
                        "nativeSrc": "6819:88:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "6819:88:46"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nativeSrc": "6923:1:46",
                              "nodeType": "YulLiteral",
                              "src": "6923:1:46",
                              "type": "",
                              "value": "4"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "6926:4:46",
                              "nodeType": "YulLiteral",
                              "src": "6926:4:46",
                              "type": "",
                              "value": "0x11"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nativeSrc": "6916:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "6916:6:46"
                          },
                          "nativeSrc": "6916:15:46",
                          "nodeType": "YulFunctionCall",
                          "src": "6916:15:46"
                        },
                        "nativeSrc": "6916:15:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "6916:15:46"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nativeSrc": "6947:1:46",
                              "nodeType": "YulLiteral",
                              "src": "6947:1:46",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "6950:4:46",
                              "nodeType": "YulLiteral",
                              "src": "6950:4:46",
                              "type": "",
                              "value": "0x24"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nativeSrc": "6940:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "6940:6:46"
                          },
                          "nativeSrc": "6940:15:46",
                          "nodeType": "YulFunctionCall",
                          "src": "6940:15:46"
                        },
                        "nativeSrc": "6940:15:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "6940:15:46"
                      }
                    ]
                  },
                  "name": "panic_error_0x11",
                  "nativeSrc": "6781:180:46",
                  "nodeType": "YulFunctionDefinition",
                  "src": "6781:180:46"
                },
                {
                  "body": {
                    "nativeSrc": "7011:147:46",
                    "nodeType": "YulBlock",
                    "src": "7011:147:46",
                    "statements": [
                      {
                        "nativeSrc": "7021:25:46",
                        "nodeType": "YulAssignment",
                        "src": "7021:25:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "x",
                              "nativeSrc": "7044:1:46",
                              "nodeType": "YulIdentifier",
                              "src": "7044:1:46"
                            }
                          ],
                          "functionName": {
                            "name": "cleanup_t_uint256",
                            "nativeSrc": "7026:17:46",
                            "nodeType": "YulIdentifier",
                            "src": "7026:17:46"
                          },
                          "nativeSrc": "7026:20:46",
                          "nodeType": "YulFunctionCall",
                          "src": "7026:20:46"
                        },
                        "variableNames": [
                          {
                            "name": "x",
                            "nativeSrc": "7021:1:46",
                            "nodeType": "YulIdentifier",
                            "src": "7021:1:46"
                          }
                        ]
                      },
                      {
                        "nativeSrc": "7055:25:46",
                        "nodeType": "YulAssignment",
                        "src": "7055:25:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "y",
                              "nativeSrc": "7078:1:46",
                              "nodeType": "YulIdentifier",
                              "src": "7078:1:46"
                            }
                          ],
                          "functionName": {
                            "name": "cleanup_t_uint256",
                            "nativeSrc": "7060:17:46",
                            "nodeType": "YulIdentifier",
                            "src": "7060:17:46"
                          },
                          "nativeSrc": "7060:20:46",
                          "nodeType": "YulFunctionCall",
                          "src": "7060:20:46"
                        },
                        "variableNames": [
                          {
                            "name": "y",
                            "nativeSrc": "7055:1:46",
                            "nodeType": "YulIdentifier",
                            "src": "7055:1:46"
                          }
                        ]
                      },
                      {
                        "nativeSrc": "7089:16:46",
                        "nodeType": "YulAssignment",
                        "src": "7089:16:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "x",
                              "nativeSrc": "7100:1:46",
                              "nodeType": "YulIdentifier",
                              "src": "7100:1:46"
                            },
                            {
                              "name": "y",
                              "nativeSrc": "7103:1:46",
                              "nodeType": "YulIdentifier",
                              "src": "7103:1:46"
                            }
                          ],
                          "functionName": {
                            "name": "add",
                            "nativeSrc": "7096:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "7096:3:46"
                          },
                          "nativeSrc": "7096:9:46",
                          "nodeType": "YulFunctionCall",
                          "src": "7096:9:46"
                        },
                        "variableNames": [
                          {
                            "name": "sum",
                            "nativeSrc": "7089:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "7089:3:46"
                          }
                        ]
                      },
                      {
                        "body": {
                          "nativeSrc": "7129:22:46",
                          "nodeType": "YulBlock",
                          "src": "7129:22:46",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [],
                                "functionName": {
                                  "name": "panic_error_0x11",
                                  "nativeSrc": "7131:16:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "7131:16:46"
                                },
                                "nativeSrc": "7131:18:46",
                                "nodeType": "YulFunctionCall",
                                "src": "7131:18:46"
                              },
                              "nativeSrc": "7131:18:46",
                              "nodeType": "YulExpressionStatement",
                              "src": "7131:18:46"
                            }
                          ]
                        },
                        "condition": {
                          "arguments": [
                            {
                              "name": "x",
                              "nativeSrc": "7121:1:46",
                              "nodeType": "YulIdentifier",
                              "src": "7121:1:46"
                            },
                            {
                              "name": "sum",
                              "nativeSrc": "7124:3:46",
                              "nodeType": "YulIdentifier",
                              "src": "7124:3:46"
                            }
                          ],
                          "functionName": {
                            "name": "gt",
                            "nativeSrc": "7118:2:46",
                            "nodeType": "YulIdentifier",
                            "src": "7118:2:46"
                          },
                          "nativeSrc": "7118:10:46",
                          "nodeType": "YulFunctionCall",
                          "src": "7118:10:46"
                        },
                        "nativeSrc": "7115:36:46",
                        "nodeType": "YulIf",
                        "src": "7115:36:46"
                      }
                    ]
                  },
                  "name": "checked_add_t_uint256",
                  "nativeSrc": "6967:191:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "x",
                      "nativeSrc": "6998:1:46",
                      "nodeType": "YulTypedName",
                      "src": "6998:1:46",
                      "type": ""
                    },
                    {
                      "name": "y",
                      "nativeSrc": "7001:1:46",
                      "nodeType": "YulTypedName",
                      "src": "7001:1:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "sum",
                      "nativeSrc": "7007:3:46",
                      "nodeType": "YulTypedName",
                      "src": "7007:3:46",
                      "type": ""
                    }
                  ],
                  "src": "6967:191:46"
                },
                {
                  "body": {
                    "nativeSrc": "7229:53:46",
                    "nodeType": "YulBlock",
                    "src": "7229:53:46",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "pos",
                              "nativeSrc": "7246:3:46",
                              "nodeType": "YulIdentifier",
                              "src": "7246:3:46"
                            },
                            {
                              "arguments": [
                                {
                                  "name": "value",
                                  "nativeSrc": "7269:5:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "7269:5:46"
                                }
                              ],
                              "functionName": {
                                "name": "cleanup_t_uint256",
                                "nativeSrc": "7251:17:46",
                                "nodeType": "YulIdentifier",
                                "src": "7251:17:46"
                              },
                              "nativeSrc": "7251:24:46",
                              "nodeType": "YulFunctionCall",
                              "src": "7251:24:46"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nativeSrc": "7239:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "7239:6:46"
                          },
                          "nativeSrc": "7239:37:46",
                          "nodeType": "YulFunctionCall",
                          "src": "7239:37:46"
                        },
                        "nativeSrc": "7239:37:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "7239:37:46"
                      }
                    ]
                  },
                  "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                  "nativeSrc": "7164:118:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "value",
                      "nativeSrc": "7217:5:46",
                      "nodeType": "YulTypedName",
                      "src": "7217:5:46",
                      "type": ""
                    },
                    {
                      "name": "pos",
                      "nativeSrc": "7224:3:46",
                      "nodeType": "YulTypedName",
                      "src": "7224:3:46",
                      "type": ""
                    }
                  ],
                  "src": "7164:118:46"
                },
                {
                  "body": {
                    "nativeSrc": "7442:288:46",
                    "nodeType": "YulBlock",
                    "src": "7442:288:46",
                    "statements": [
                      {
                        "nativeSrc": "7452:26:46",
                        "nodeType": "YulAssignment",
                        "src": "7452:26:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "headStart",
                              "nativeSrc": "7464:9:46",
                              "nodeType": "YulIdentifier",
                              "src": "7464:9:46"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "7475:2:46",
                              "nodeType": "YulLiteral",
                              "src": "7475:2:46",
                              "type": "",
                              "value": "96"
                            }
                          ],
                          "functionName": {
                            "name": "add",
                            "nativeSrc": "7460:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "7460:3:46"
                          },
                          "nativeSrc": "7460:18:46",
                          "nodeType": "YulFunctionCall",
                          "src": "7460:18:46"
                        },
                        "variableNames": [
                          {
                            "name": "tail",
                            "nativeSrc": "7452:4:46",
                            "nodeType": "YulIdentifier",
                            "src": "7452:4:46"
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "value0",
                              "nativeSrc": "7532:6:46",
                              "nodeType": "YulIdentifier",
                              "src": "7532:6:46"
                            },
                            {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "7545:9:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "7545:9:46"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "7556:1:46",
                                  "nodeType": "YulLiteral",
                                  "src": "7556:1:46",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "7541:3:46",
                                "nodeType": "YulIdentifier",
                                "src": "7541:3:46"
                              },
                              "nativeSrc": "7541:17:46",
                              "nodeType": "YulFunctionCall",
                              "src": "7541:17:46"
                            }
                          ],
                          "functionName": {
                            "name": "abi_encode_t_address_to_t_address_fromStack",
                            "nativeSrc": "7488:43:46",
                            "nodeType": "YulIdentifier",
                            "src": "7488:43:46"
                          },
                          "nativeSrc": "7488:71:46",
                          "nodeType": "YulFunctionCall",
                          "src": "7488:71:46"
                        },
                        "nativeSrc": "7488:71:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "7488:71:46"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "value1",
                              "nativeSrc": "7613:6:46",
                              "nodeType": "YulIdentifier",
                              "src": "7613:6:46"
                            },
                            {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "7626:9:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "7626:9:46"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "7637:2:46",
                                  "nodeType": "YulLiteral",
                                  "src": "7637:2:46",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "7622:3:46",
                                "nodeType": "YulIdentifier",
                                "src": "7622:3:46"
                              },
                              "nativeSrc": "7622:18:46",
                              "nodeType": "YulFunctionCall",
                              "src": "7622:18:46"
                            }
                          ],
                          "functionName": {
                            "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                            "nativeSrc": "7569:43:46",
                            "nodeType": "YulIdentifier",
                            "src": "7569:43:46"
                          },
                          "nativeSrc": "7569:72:46",
                          "nodeType": "YulFunctionCall",
                          "src": "7569:72:46"
                        },
                        "nativeSrc": "7569:72:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "7569:72:46"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "value2",
                              "nativeSrc": "7695:6:46",
                              "nodeType": "YulIdentifier",
                              "src": "7695:6:46"
                            },
                            {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "7708:9:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "7708:9:46"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "7719:2:46",
                                  "nodeType": "YulLiteral",
                                  "src": "7719:2:46",
                                  "type": "",
                                  "value": "64"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "7704:3:46",
                                "nodeType": "YulIdentifier",
                                "src": "7704:3:46"
                              },
                              "nativeSrc": "7704:18:46",
                              "nodeType": "YulFunctionCall",
                              "src": "7704:18:46"
                            }
                          ],
                          "functionName": {
                            "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                            "nativeSrc": "7651:43:46",
                            "nodeType": "YulIdentifier",
                            "src": "7651:43:46"
                          },
                          "nativeSrc": "7651:72:46",
                          "nodeType": "YulFunctionCall",
                          "src": "7651:72:46"
                        },
                        "nativeSrc": "7651:72:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "7651:72:46"
                      }
                    ]
                  },
                  "name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
                  "nativeSrc": "7288:442:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "headStart",
                      "nativeSrc": "7398:9:46",
                      "nodeType": "YulTypedName",
                      "src": "7398:9:46",
                      "type": ""
                    },
                    {
                      "name": "value2",
                      "nativeSrc": "7410:6:46",
                      "nodeType": "YulTypedName",
                      "src": "7410:6:46",
                      "type": ""
                    },
                    {
                      "name": "value1",
                      "nativeSrc": "7418:6:46",
                      "nodeType": "YulTypedName",
                      "src": "7418:6:46",
                      "type": ""
                    },
                    {
                      "name": "value0",
                      "nativeSrc": "7426:6:46",
                      "nodeType": "YulTypedName",
                      "src": "7426:6:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "tail",
                      "nativeSrc": "7437:4:46",
                      "nodeType": "YulTypedName",
                      "src": "7437:4:46",
                      "type": ""
                    }
                  ],
                  "src": "7288:442:46"
                },
                {
                  "body": {
                    "nativeSrc": "7834:124:46",
                    "nodeType": "YulBlock",
                    "src": "7834:124:46",
                    "statements": [
                      {
                        "nativeSrc": "7844:26:46",
                        "nodeType": "YulAssignment",
                        "src": "7844:26:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "headStart",
                              "nativeSrc": "7856:9:46",
                              "nodeType": "YulIdentifier",
                              "src": "7856:9:46"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "7867:2:46",
                              "nodeType": "YulLiteral",
                              "src": "7867:2:46",
                              "type": "",
                              "value": "32"
                            }
                          ],
                          "functionName": {
                            "name": "add",
                            "nativeSrc": "7852:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "7852:3:46"
                          },
                          "nativeSrc": "7852:18:46",
                          "nodeType": "YulFunctionCall",
                          "src": "7852:18:46"
                        },
                        "variableNames": [
                          {
                            "name": "tail",
                            "nativeSrc": "7844:4:46",
                            "nodeType": "YulIdentifier",
                            "src": "7844:4:46"
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "value0",
                              "nativeSrc": "7924:6:46",
                              "nodeType": "YulIdentifier",
                              "src": "7924:6:46"
                            },
                            {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "7937:9:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "7937:9:46"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "7948:1:46",
                                  "nodeType": "YulLiteral",
                                  "src": "7948:1:46",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "7933:3:46",
                                "nodeType": "YulIdentifier",
                                "src": "7933:3:46"
                              },
                              "nativeSrc": "7933:17:46",
                              "nodeType": "YulFunctionCall",
                              "src": "7933:17:46"
                            }
                          ],
                          "functionName": {
                            "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                            "nativeSrc": "7880:43:46",
                            "nodeType": "YulIdentifier",
                            "src": "7880:43:46"
                          },
                          "nativeSrc": "7880:71:46",
                          "nodeType": "YulFunctionCall",
                          "src": "7880:71:46"
                        },
                        "nativeSrc": "7880:71:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "7880:71:46"
                      }
                    ]
                  },
                  "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                  "nativeSrc": "7736:222:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "headStart",
                      "nativeSrc": "7806:9:46",
                      "nodeType": "YulTypedName",
                      "src": "7806:9:46",
                      "type": ""
                    },
                    {
                      "name": "value0",
                      "nativeSrc": "7818:6:46",
                      "nodeType": "YulTypedName",
                      "src": "7818:6:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "tail",
                      "nativeSrc": "7829:4:46",
                      "nodeType": "YulTypedName",
                      "src": "7829:4:46",
                      "type": ""
                    }
                  ],
                  "src": "7736:222:46"
                }
              ]
            },
            "contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n",
            "id": 46,
            "language": "Yul",
            "name": "#utility.yul"
          }
        ],
        "linkReferences": {},
        "object": "60806040523480156200001157600080fd5b5060405162001ea938038062001ea98339818101604052810190620000379190620005a5565b80816040518060400160405280600981526020017f426c7565626572727900000000000000000000000000000000000000000000008152506040518060400160405280600981526020017f426c7565626572727900000000000000000000000000000000000000000000008152508160039081620000b6919062000851565b508060049081620000c8919062000851565b50505080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620001825760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040162000179919062000949565b60405180910390fd5b6200019381620001b860201b60201c565b50620001b1816a21165458500521280000006200027e60201b60201c565b5062000a3b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620002f35760006040517fec442f05000000000000000000000000000000000000000000000000000000008152600401620002ea919062000949565b60405180910390fd5b62000307600083836200030b60201b60201c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036200036157806002600082825462000354919062000995565b9250508190555062000437565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015620003f0578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401620003e793929190620009e1565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620004825780600260008282540392505081905550620004cf565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200052e919062000a1e565b60405180910390a3505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200056d8262000540565b9050919050565b6200057f8162000560565b81146200058b57600080fd5b50565b6000815190506200059f8162000574565b92915050565b600060208284031215620005be57620005bd6200053b565b5b6000620005ce848285016200058e565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200065957607f821691505b6020821081036200066f576200066e62000611565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620006d97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200069a565b620006e586836200069a565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620007326200072c6200072684620006fd565b62000707565b620006fd565b9050919050565b6000819050919050565b6200074e8362000711565b620007666200075d8262000739565b848454620006a7565b825550505050565b600090565b6200077d6200076e565b6200078a81848462000743565b505050565b5b81811015620007b257620007a660008262000773565b60018101905062000790565b5050565b601f8211156200080157620007cb8162000675565b620007d6846200068a565b81016020851015620007e6578190505b620007fe620007f5856200068a565b8301826200078f565b50505b505050565b600082821c905092915050565b6000620008266000198460080262000806565b1980831691505092915050565b600062000841838362000813565b9150826002028217905092915050565b6200085c82620005d7565b67ffffffffffffffff811115620008785762000877620005e2565b5b62000884825462000640565b62000891828285620007b6565b600060209050601f831160018114620008c95760008415620008b4578287015190505b620008c0858262000833565b86555062000930565b601f198416620008d98662000675565b60005b828110156200090357848901518255600182019150602085019450602081019050620008dc565b868310156200092357848901516200091f601f89168262000813565b8355505b6001600288020188555050505b505050505050565b620009438162000560565b82525050565b600060208201905062000960600083018462000938565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620009a282620006fd565b9150620009af83620006fd565b9250828201905080821115620009ca57620009c962000966565b5b92915050565b620009db81620006fd565b82525050565b6000606082019050620009f8600083018662000938565b62000a076020830185620009d0565b62000a166040830184620009d0565b949350505050565b600060208201905062000a356000830184620009d0565b92915050565b61145e8062000a4b6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063715018a611610097578063bcf685ed11610066578063bcf685ed1461029d578063dd62ed3e146102b9578063f2fde38b146102e9578063f551eb191461030557610100565b8063715018a6146102275780638da5cb5b1461023157806395d89b411461024f578063a9059cbb1461026d57610100565b806326f58e75116100d357806326f58e75146101a1578063313ce567146101bd57806340c10f19146101db57806370a08231146101f757610100565b806306fdde0314610105578063095ea7b31461012357806318160ddd1461015357806323b872dd14610171575b600080fd5b61010d610323565b60405161011a9190611046565b60405180910390f35b61013d60048036038101906101389190611101565b6103b5565b60405161014a919061115c565b60405180910390f35b61015b6103d8565b6040516101689190611186565b60405180910390f35b61018b600480360381019061018691906111a1565b6103e2565b604051610198919061115c565b60405180910390f35b6101bb60048036038101906101b691906111a1565b610411565b005b6101c56104e4565b6040516101d29190611210565b60405180910390f35b6101f560048036038101906101f09190611101565b6104ed565b005b610211600480360381019061020c919061122b565b610503565b60405161021e9190611186565b60405180910390f35b61022f61054b565b005b61023961055f565b6040516102469190611267565b60405180910390f35b610257610589565b6040516102649190611046565b60405180910390f35b61028760048036038101906102829190611101565b61061b565b604051610294919061115c565b60405180910390f35b6102b760048036038101906102b2919061122b565b61063e565b005b6102d360048036038101906102ce9190611282565b610712565b6040516102e09190611186565b60405180910390f35b61030360048036038101906102fe919061122b565b610799565b005b61030d61081f565b60405161031a9190611267565b60405180910390f35b606060038054610332906112f1565b80601f016020809104026020016040519081016040528092919081815260200182805461035e906112f1565b80156103ab5780601f10610380576101008083540402835291602001916103ab565b820191906000526020600020905b81548152906001019060200180831161038e57829003601f168201915b5050505050905090565b6000806103c0610849565b90506103cd818585610851565b600191505092915050565b6000600254905090565b6000806103ed610849565b90506103fa858285610863565b6104058585856108f7565b60019150509392505050565b823373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415801561049c5750600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156104d3576040517f6d187b2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104de848484610851565b50505050565b60006012905090565b6104f56109eb565b6104ff8282610a72565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6105536109eb565b61055d6000610af4565b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060048054610598906112f1565b80601f01602080910402602001604051908101604052809291908181526020018280546105c4906112f1565b80156106115780601f106105e657610100808354040283529160200191610611565b820191906000526020600020905b8154815290600101906020018083116105f457829003601f168201915b5050505050905090565b600080610626610849565b90506106338185856108f7565b600191505092915050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c59061136e565b60405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6107a16109eb565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108135760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161080a9190611267565b60405180910390fd5b61081c81610af4565b50565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600033905090565b61085e8383836001610bba565b505050565b600061086f8484610712565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146108f157818110156108e1578281836040517ffb8f41b20000000000000000000000000000000000000000000000000000000081526004016108d89392919061138e565b60405180910390fd5b6108f084848484036000610bba565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036109695760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016109609190611267565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109db5760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016109d29190611267565b60405180910390fd5b6109e6838383610d91565b505050565b6109f3610849565b73ffffffffffffffffffffffffffffffffffffffff16610a1161055f565b73ffffffffffffffffffffffffffffffffffffffff1614610a7057610a34610849565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610a679190611267565b60405180910390fd5b565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ae45760006040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610adb9190611267565b60405180910390fd5b610af060008383610d91565b5050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610c2c5760006040517fe602df05000000000000000000000000000000000000000000000000000000008152600401610c239190611267565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610c9e5760006040517f94280d62000000000000000000000000000000000000000000000000000000008152600401610c959190611267565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508015610d8b578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610d829190611186565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610de3578060026000828254610dd791906113f4565b92505081905550610eb6565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610e6f578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401610e669392919061138e565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610eff5780600260008282540392505081905550610f4c565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610fa99190611186565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ff0578082015181840152602081019050610fd5565b60008484015250505050565b6000601f19601f8301169050919050565b600061101882610fb6565b6110228185610fc1565b9350611032818560208601610fd2565b61103b81610ffc565b840191505092915050565b60006020820190508181036000830152611060818461100d565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110988261106d565b9050919050565b6110a88161108d565b81146110b357600080fd5b50565b6000813590506110c58161109f565b92915050565b6000819050919050565b6110de816110cb565b81146110e957600080fd5b50565b6000813590506110fb816110d5565b92915050565b6000806040838503121561111857611117611068565b5b6000611126858286016110b6565b9250506020611137858286016110ec565b9150509250929050565b60008115159050919050565b61115681611141565b82525050565b6000602082019050611171600083018461114d565b92915050565b611180816110cb565b82525050565b600060208201905061119b6000830184611177565b92915050565b6000806000606084860312156111ba576111b9611068565b5b60006111c8868287016110b6565b93505060206111d9868287016110b6565b92505060406111ea868287016110ec565b9150509250925092565b600060ff82169050919050565b61120a816111f4565b82525050565b60006020820190506112256000830184611201565b92915050565b60006020828403121561124157611240611068565b5b600061124f848285016110b6565b91505092915050565b6112618161108d565b82525050565b600060208201905061127c6000830184611258565b92915050565b6000806040838503121561129957611298611068565b5b60006112a7858286016110b6565b92505060206112b8858286016110b6565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061130957607f821691505b60208210810361131c5761131b6112c2565b5b50919050565b7f4e6f74204167656e74204163636f756e74000000000000000000000000000000600082015250565b6000611358601183610fc1565b915061136382611322565b602082019050919050565b600060208201905081810360008301526113878161134b565b9050919050565b60006060820190506113a36000830186611258565b6113b06020830185611177565b6113bd6040830184611177565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006113ff826110cb565b915061140a836110cb565b9250828201905080821115611422576114216113c5565b5b9291505056fea2646970667358221220668b1ff38adf17eb85af692acb12e1639a5870b4a0396284ca1b42bd5fd0a06564736f6c63430008180033",
        "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1EA9 CODESIZE SUB DUP1 PUSH3 0x1EA9 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x5A5 JUMP JUMPDEST DUP1 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x426C756562657272790000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x426C756562657272790000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP2 PUSH3 0xB6 SWAP2 SWAP1 PUSH3 0x851 JUMP JUMPDEST POP DUP1 PUSH1 0x4 SWAP1 DUP2 PUSH3 0xC8 SWAP2 SWAP1 PUSH3 0x851 JUMP JUMPDEST POP POP POP DUP1 PUSH1 0x5 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0x182 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x179 SWAP2 SWAP1 PUSH3 0x949 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x193 DUP2 PUSH3 0x1B8 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH3 0x1B1 DUP2 PUSH11 0x2116545850052128000000 PUSH3 0x27E PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH3 0xA3B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x6 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0x2F3 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x2EA SWAP2 SWAP1 PUSH3 0x949 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x307 PUSH1 0x0 DUP4 DUP4 PUSH3 0x30B PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0x361 JUMPI DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH3 0x354 SWAP2 SWAP1 PUSH3 0x995 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH3 0x437 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH3 0x3F0 JUMPI DUP4 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xE450D38C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x3E7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x9E1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0x482 JUMPI DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH3 0x4CF JUMP JUMPDEST DUP1 PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH3 0x52E SWAP2 SWAP1 PUSH3 0xA1E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x56D DUP3 PUSH3 0x540 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x57F DUP2 PUSH3 0x560 JUMP JUMPDEST DUP2 EQ PUSH3 0x58B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x59F DUP2 PUSH3 0x574 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x5BE JUMPI PUSH3 0x5BD PUSH3 0x53B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x5CE DUP5 DUP3 DUP6 ADD PUSH3 0x58E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x659 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x66F JUMPI PUSH3 0x66E PUSH3 0x611 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH3 0x6D9 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH3 0x69A JUMP JUMPDEST PUSH3 0x6E5 DUP7 DUP4 PUSH3 0x69A JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x732 PUSH3 0x72C PUSH3 0x726 DUP5 PUSH3 0x6FD JUMP JUMPDEST PUSH3 0x707 JUMP JUMPDEST PUSH3 0x6FD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x74E DUP4 PUSH3 0x711 JUMP JUMPDEST PUSH3 0x766 PUSH3 0x75D DUP3 PUSH3 0x739 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH3 0x6A7 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH3 0x77D PUSH3 0x76E JUMP JUMPDEST PUSH3 0x78A DUP2 DUP5 DUP5 PUSH3 0x743 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x7B2 JUMPI PUSH3 0x7A6 PUSH1 0x0 DUP3 PUSH3 0x773 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x790 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x801 JUMPI PUSH3 0x7CB DUP2 PUSH3 0x675 JUMP JUMPDEST PUSH3 0x7D6 DUP5 PUSH3 0x68A JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH3 0x7E6 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH3 0x7FE PUSH3 0x7F5 DUP6 PUSH3 0x68A JUMP JUMPDEST DUP4 ADD DUP3 PUSH3 0x78F JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x826 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH3 0x806 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x841 DUP4 DUP4 PUSH3 0x813 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x85C DUP3 PUSH3 0x5D7 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x878 JUMPI PUSH3 0x877 PUSH3 0x5E2 JUMP JUMPDEST JUMPDEST PUSH3 0x884 DUP3 SLOAD PUSH3 0x640 JUMP JUMPDEST PUSH3 0x891 DUP3 DUP3 DUP6 PUSH3 0x7B6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x8C9 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x8B4 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH3 0x8C0 DUP6 DUP3 PUSH3 0x833 JUMP JUMPDEST DUP7 SSTORE POP PUSH3 0x930 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH3 0x8D9 DUP7 PUSH3 0x675 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x903 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x8DC JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH3 0x923 JUMPI DUP5 DUP10 ADD MLOAD PUSH3 0x91F PUSH1 0x1F DUP10 AND DUP3 PUSH3 0x813 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH3 0x943 DUP2 PUSH3 0x560 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x960 PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x938 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x9A2 DUP3 PUSH3 0x6FD JUMP JUMPDEST SWAP2 POP PUSH3 0x9AF DUP4 PUSH3 0x6FD JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH3 0x9CA JUMPI PUSH3 0x9C9 PUSH3 0x966 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x9DB DUP2 PUSH3 0x6FD JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH3 0x9F8 PUSH1 0x0 DUP4 ADD DUP7 PUSH3 0x938 JUMP JUMPDEST PUSH3 0xA07 PUSH1 0x20 DUP4 ADD DUP6 PUSH3 0x9D0 JUMP JUMPDEST PUSH3 0xA16 PUSH1 0x40 DUP4 ADD DUP5 PUSH3 0x9D0 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0xA35 PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x9D0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x145E DUP1 PUSH3 0xA4B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x100 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xBCF685ED GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xBCF685ED EQ PUSH2 0x29D JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x2B9 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2E9 JUMPI DUP1 PUSH4 0xF551EB19 EQ PUSH2 0x305 JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x227 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x231 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x24F JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x26D JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x26F58E75 GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x26F58E75 EQ PUSH2 0x1A1 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1BD JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x1DB JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1F7 JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x105 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x153 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x171 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10D PUSH2 0x323 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x11A SWAP2 SWAP1 PUSH2 0x1046 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x138 SWAP2 SWAP1 PUSH2 0x1101 JUMP JUMPDEST PUSH2 0x3B5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x14A SWAP2 SWAP1 PUSH2 0x115C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x15B PUSH2 0x3D8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x168 SWAP2 SWAP1 PUSH2 0x1186 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x18B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x186 SWAP2 SWAP1 PUSH2 0x11A1 JUMP JUMPDEST PUSH2 0x3E2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x198 SWAP2 SWAP1 PUSH2 0x115C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1BB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1B6 SWAP2 SWAP1 PUSH2 0x11A1 JUMP JUMPDEST PUSH2 0x411 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C5 PUSH2 0x4E4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D2 SWAP2 SWAP1 PUSH2 0x1210 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F0 SWAP2 SWAP1 PUSH2 0x1101 JUMP JUMPDEST PUSH2 0x4ED JUMP JUMPDEST STOP JUMPDEST PUSH2 0x211 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x20C SWAP2 SWAP1 PUSH2 0x122B JUMP JUMPDEST PUSH2 0x503 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21E SWAP2 SWAP1 PUSH2 0x1186 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x22F PUSH2 0x54B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x239 PUSH2 0x55F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x246 SWAP2 SWAP1 PUSH2 0x1267 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x257 PUSH2 0x589 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x264 SWAP2 SWAP1 PUSH2 0x1046 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x287 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x282 SWAP2 SWAP1 PUSH2 0x1101 JUMP JUMPDEST PUSH2 0x61B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x294 SWAP2 SWAP1 PUSH2 0x115C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2B7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2B2 SWAP2 SWAP1 PUSH2 0x122B JUMP JUMPDEST PUSH2 0x63E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2D3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2CE SWAP2 SWAP1 PUSH2 0x1282 JUMP JUMPDEST PUSH2 0x712 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E0 SWAP2 SWAP1 PUSH2 0x1186 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x303 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2FE SWAP2 SWAP1 PUSH2 0x122B JUMP JUMPDEST PUSH2 0x799 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x30D PUSH2 0x81F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x31A SWAP2 SWAP1 PUSH2 0x1267 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x332 SWAP1 PUSH2 0x12F1 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x35E SWAP1 PUSH2 0x12F1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3AB JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x380 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3AB JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x38E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3C0 PUSH2 0x849 JUMP JUMPDEST SWAP1 POP PUSH2 0x3CD DUP2 DUP6 DUP6 PUSH2 0x851 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3ED PUSH2 0x849 JUMP JUMPDEST SWAP1 POP PUSH2 0x3FA DUP6 DUP3 DUP6 PUSH2 0x863 JUMP JUMPDEST PUSH2 0x405 DUP6 DUP6 DUP6 PUSH2 0x8F7 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x49C JUMPI POP PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x4D3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6D187B2800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4DE DUP5 DUP5 DUP5 PUSH2 0x851 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x4F5 PUSH2 0x9EB JUMP JUMPDEST PUSH2 0x4FF DUP3 DUP3 PUSH2 0xA72 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x553 PUSH2 0x9EB JUMP JUMPDEST PUSH2 0x55D PUSH1 0x0 PUSH2 0xAF4 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x598 SWAP1 PUSH2 0x12F1 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x5C4 SWAP1 PUSH2 0x12F1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x611 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x5E6 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x611 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x5F4 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x626 PUSH2 0x849 JUMP JUMPDEST SWAP1 POP PUSH2 0x633 DUP2 DUP6 DUP6 PUSH2 0x8F7 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x6CE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6C5 SWAP1 PUSH2 0x136E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x7A1 PUSH2 0x9EB JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x813 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x80A SWAP2 SWAP1 PUSH2 0x1267 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x81C DUP2 PUSH2 0xAF4 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x85E DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0xBBA JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x86F DUP5 DUP5 PUSH2 0x712 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x8F1 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x8E1 JUMPI DUP3 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xFB8F41B200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D8 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x138E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8F0 DUP5 DUP5 DUP5 DUP5 SUB PUSH1 0x0 PUSH2 0xBBA JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x969 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x960 SWAP2 SWAP1 PUSH2 0x1267 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x9DB JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9D2 SWAP2 SWAP1 PUSH2 0x1267 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9E6 DUP4 DUP4 DUP4 PUSH2 0xD91 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x9F3 PUSH2 0x849 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA11 PUSH2 0x55F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xA70 JUMPI PUSH2 0xA34 PUSH2 0x849 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA67 SWAP2 SWAP1 PUSH2 0x1267 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xAE4 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xADB SWAP2 SWAP1 PUSH2 0x1267 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xAF0 PUSH1 0x0 DUP4 DUP4 PUSH2 0xD91 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x6 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xC2C JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0xE602DF0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC23 SWAP2 SWAP1 PUSH2 0x1267 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xC9E JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x94280D6200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC95 SWAP2 SWAP1 PUSH2 0x1267 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0xD8B JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0xD82 SWAP2 SWAP1 PUSH2 0x1186 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xDE3 JUMPI DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xDD7 SWAP2 SWAP1 PUSH2 0x13F4 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0xEB6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0xE6F JUMPI DUP4 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xE450D38C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE66 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x138E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xEFF JUMPI DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0xF4C JUMP JUMPDEST DUP1 PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0xFA9 SWAP2 SWAP1 PUSH2 0x1186 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xFF0 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xFD5 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1018 DUP3 PUSH2 0xFB6 JUMP JUMPDEST PUSH2 0x1022 DUP2 DUP6 PUSH2 0xFC1 JUMP JUMPDEST SWAP4 POP PUSH2 0x1032 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xFD2 JUMP JUMPDEST PUSH2 0x103B DUP2 PUSH2 0xFFC JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1060 DUP2 DUP5 PUSH2 0x100D JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1098 DUP3 PUSH2 0x106D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x10A8 DUP2 PUSH2 0x108D JUMP JUMPDEST DUP2 EQ PUSH2 0x10B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x10C5 DUP2 PUSH2 0x109F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x10DE DUP2 PUSH2 0x10CB JUMP JUMPDEST DUP2 EQ PUSH2 0x10E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x10FB DUP2 PUSH2 0x10D5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1118 JUMPI PUSH2 0x1117 PUSH2 0x1068 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1126 DUP6 DUP3 DUP7 ADD PUSH2 0x10B6 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1137 DUP6 DUP3 DUP7 ADD PUSH2 0x10EC JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1156 DUP2 PUSH2 0x1141 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1171 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x114D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1180 DUP2 PUSH2 0x10CB JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x119B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1177 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x11BA JUMPI PUSH2 0x11B9 PUSH2 0x1068 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x11C8 DUP7 DUP3 DUP8 ADD PUSH2 0x10B6 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x11D9 DUP7 DUP3 DUP8 ADD PUSH2 0x10B6 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x11EA DUP7 DUP3 DUP8 ADD PUSH2 0x10EC JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x120A DUP2 PUSH2 0x11F4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1225 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1201 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1241 JUMPI PUSH2 0x1240 PUSH2 0x1068 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x124F DUP5 DUP3 DUP6 ADD PUSH2 0x10B6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1261 DUP2 PUSH2 0x108D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x127C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1258 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1299 JUMPI PUSH2 0x1298 PUSH2 0x1068 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x12A7 DUP6 DUP3 DUP7 ADD PUSH2 0x10B6 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x12B8 DUP6 DUP3 DUP7 ADD PUSH2 0x10B6 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1309 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x131C JUMPI PUSH2 0x131B PUSH2 0x12C2 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E6F74204167656E74204163636F756E74000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1358 PUSH1 0x11 DUP4 PUSH2 0xFC1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1363 DUP3 PUSH2 0x1322 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1387 DUP2 PUSH2 0x134B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x13A3 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1258 JUMP JUMPDEST PUSH2 0x13B0 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1177 JUMP JUMPDEST PUSH2 0x13BD PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1177 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x13FF DUP3 PUSH2 0x10CB JUMP JUMPDEST SWAP2 POP PUSH2 0x140A DUP4 PUSH2 0x10CB JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x1422 JUMPI PUSH2 0x1421 PUSH2 0x13C5 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0x8B1FF38ADF17EB DUP6 0xAF PUSH10 0x2ACB12E1639A5870B4A0 CODECOPY PUSH3 0x84CA1B TIMESTAMP 0xBD PUSH0 0xD0 LOG0 PUSH6 0x64736F6C6343 STOP ADDMOD XOR STOP CALLER ",
        "sourceMap": "211:449:37:-:0;;;264:144;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;332:6;353;1896:113:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1970:5;1962;:13;;;;;;:::i;:::-;;1995:7;1985;:17;;;;;;:::i;:::-;;1896:113;;260:12:42;252:5;;:20;;;;;;;;;;;;;;;;;;211:67;1297:1:8;1273:26;;:12;:26;;;1269:95;;1350:1;1322:31;;;;;;;;;;;:::i;:::-;;;;;;;;1269:95;1373:32;1392:12;1373:18;;;:32;;:::i;:::-;1225:187;368:34:37::3;374:6;382:19;368:5;;;:34;;:::i;:::-;264:144:::0;211:449;;2912:187:8;2985:16;3004:6;;;;;;;;;;;2985:25;;3029:8;3020:6;;:17;;;;;;;;;;;;;;;;;;3083:8;3052:40;;3073:8;3052:40;;;;;;;;;;;;2975:124;2912:187;:::o;7721:208:16:-;7810:1;7791:21;;:7;:21;;;7787:91;;7864:1;7835:32;;;;;;;;;;;:::i;:::-;;;;;;;;7787:91;7887:35;7903:1;7907:7;7916:5;7887:7;;;:35;;:::i;:::-;7721:208;;:::o;6271:1107::-;6376:1;6360:18;;:4;:18;;;6356:540;;6512:5;6496:12;;:21;;;;;;;:::i;:::-;;;;;;;;6356:540;;;6548:19;6570:9;:15;6580:4;6570:15;;;;;;;;;;;;;;;;6548:37;;6617:5;6603:11;:19;6599:115;;;6674:4;6680:11;6693:5;6649:50;;;;;;;;;;;;;:::i;:::-;;;;;;;;6599:115;6866:5;6852:11;:19;6834:9;:15;6844:4;6834:15;;;;;;;;;;;;;;;:37;;;;6534:362;6356:540;6924:1;6910:16;;:2;:16;;;6906:425;;7089:5;7073:12;;:21;;;;;;;;;;;6906:425;;;7301:5;7284:9;:13;7294:2;7284:13;;;;;;;;;;;;;;;;:22;;;;;;;;;;;6906:425;7361:2;7346:25;;7355:4;7346:25;;;7365:5;7346:25;;;;;;:::i;:::-;;;;;;;;6271:1107;;;:::o;88:117:46:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:351::-;915:6;964:2;952:9;943:7;939:23;935:32;932:119;;;970:79;;:::i;:::-;932:119;1090:1;1115:64;1171:7;1162:6;1151:9;1147:22;1115:64;:::i;:::-;1105:74;;1061:128;845:351;;;;:::o;1202:99::-;1254:6;1288:5;1282:12;1272:22;;1202:99;;;:::o;1307:180::-;1355:77;1352:1;1345:88;1452:4;1449:1;1442:15;1476:4;1473:1;1466:15;1493:180;1541:77;1538:1;1531:88;1638:4;1635:1;1628:15;1662:4;1659:1;1652:15;1679:320;1723:6;1760:1;1754:4;1750:12;1740:22;;1807:1;1801:4;1797:12;1828:18;1818:81;;1884:4;1876:6;1872:17;1862:27;;1818:81;1946:2;1938:6;1935:14;1915:18;1912:38;1909:84;;1965:18;;:::i;:::-;1909:84;1730:269;1679:320;;;:::o;2005:141::-;2054:4;2077:3;2069:11;;2100:3;2097:1;2090:14;2134:4;2131:1;2121:18;2113:26;;2005:141;;;:::o;2152:93::-;2189:6;2236:2;2231;2224:5;2220:14;2216:23;2206:33;;2152:93;;;:::o;2251:107::-;2295:8;2345:5;2339:4;2335:16;2314:37;;2251:107;;;;:::o;2364:393::-;2433:6;2483:1;2471:10;2467:18;2506:97;2536:66;2525:9;2506:97;:::i;:::-;2624:39;2654:8;2643:9;2624:39;:::i;:::-;2612:51;;2696:4;2692:9;2685:5;2681:21;2672:30;;2745:4;2735:8;2731:19;2724:5;2721:30;2711:40;;2440:317;;2364:393;;;;;:::o;2763:77::-;2800:7;2829:5;2818:16;;2763:77;;;:::o;2846:60::-;2874:3;2895:5;2888:12;;2846:60;;;:::o;2912:142::-;2962:9;2995:53;3013:34;3022:24;3040:5;3022:24;:::i;:::-;3013:34;:::i;:::-;2995:53;:::i;:::-;2982:66;;2912:142;;;:::o;3060:75::-;3103:3;3124:5;3117:12;;3060:75;;;:::o;3141:269::-;3251:39;3282:7;3251:39;:::i;:::-;3312:91;3361:41;3385:16;3361:41;:::i;:::-;3353:6;3346:4;3340:11;3312:91;:::i;:::-;3306:4;3299:105;3217:193;3141:269;;;:::o;3416:73::-;3461:3;3416:73;:::o;3495:189::-;3572:32;;:::i;:::-;3613:65;3671:6;3663;3657:4;3613:65;:::i;:::-;3548:136;3495:189;;:::o;3690:186::-;3750:120;3767:3;3760:5;3757:14;3750:120;;;3821:39;3858:1;3851:5;3821:39;:::i;:::-;3794:1;3787:5;3783:13;3774:22;;3750:120;;;3690:186;;:::o;3882:543::-;3983:2;3978:3;3975:11;3972:446;;;4017:38;4049:5;4017:38;:::i;:::-;4101:29;4119:10;4101:29;:::i;:::-;4091:8;4087:44;4284:2;4272:10;4269:18;4266:49;;;4305:8;4290:23;;4266:49;4328:80;4384:22;4402:3;4384:22;:::i;:::-;4374:8;4370:37;4357:11;4328:80;:::i;:::-;3987:431;;3972:446;3882:543;;;:::o;4431:117::-;4485:8;4535:5;4529:4;4525:16;4504:37;;4431:117;;;;:::o;4554:169::-;4598:6;4631:51;4679:1;4675:6;4667:5;4664:1;4660:13;4631:51;:::i;:::-;4627:56;4712:4;4706;4702:15;4692:25;;4605:118;4554:169;;;;:::o;4728:295::-;4804:4;4950:29;4975:3;4969:4;4950:29;:::i;:::-;4942:37;;5012:3;5009:1;5005:11;4999:4;4996:21;4988:29;;4728:295;;;;:::o;5028:1395::-;5145:37;5178:3;5145:37;:::i;:::-;5247:18;5239:6;5236:30;5233:56;;;5269:18;;:::i;:::-;5233:56;5313:38;5345:4;5339:11;5313:38;:::i;:::-;5398:67;5458:6;5450;5444:4;5398:67;:::i;:::-;5492:1;5516:4;5503:17;;5548:2;5540:6;5537:14;5565:1;5560:618;;;;6222:1;6239:6;6236:77;;;6288:9;6283:3;6279:19;6273:26;6264:35;;6236:77;6339:67;6399:6;6392:5;6339:67;:::i;:::-;6333:4;6326:81;6195:222;5530:887;;5560:618;5612:4;5608:9;5600:6;5596:22;5646:37;5678:4;5646:37;:::i;:::-;5705:1;5719:208;5733:7;5730:1;5727:14;5719:208;;;5812:9;5807:3;5803:19;5797:26;5789:6;5782:42;5863:1;5855:6;5851:14;5841:24;;5910:2;5899:9;5895:18;5882:31;;5756:4;5753:1;5749:12;5744:17;;5719:208;;;5955:6;5946:7;5943:19;5940:179;;;6013:9;6008:3;6004:19;5998:26;6056:48;6098:4;6090:6;6086:17;6075:9;6056:48;:::i;:::-;6048:6;6041:64;5963:156;5940:179;6165:1;6161;6153:6;6149:14;6145:22;6139:4;6132:36;5567:611;;;5530:887;;5120:1303;;;5028:1395;;:::o;6429:118::-;6516:24;6534:5;6516:24;:::i;:::-;6511:3;6504:37;6429:118;;:::o;6553:222::-;6646:4;6684:2;6673:9;6669:18;6661:26;;6697:71;6765:1;6754:9;6750:17;6741:6;6697:71;:::i;:::-;6553:222;;;;:::o;6781:180::-;6829:77;6826:1;6819:88;6926:4;6923:1;6916:15;6950:4;6947:1;6940:15;6967:191;7007:3;7026:20;7044:1;7026:20;:::i;:::-;7021:25;;7060:20;7078:1;7060:20;:::i;:::-;7055:25;;7103:1;7100;7096:9;7089:16;;7124:3;7121:1;7118:10;7115:36;;;7131:18;;:::i;:::-;7115:36;6967:191;;;;:::o;7164:118::-;7251:24;7269:5;7251:24;:::i;:::-;7246:3;7239:37;7164:118;;:::o;7288:442::-;7437:4;7475:2;7464:9;7460:18;7452:26;;7488:71;7556:1;7545:9;7541:17;7532:6;7488:71;:::i;:::-;7569:72;7637:2;7626:9;7622:18;7613:6;7569:72;:::i;:::-;7651;7719:2;7708:9;7704:18;7695:6;7651:72;:::i;:::-;7288:442;;;;;;:::o;7736:222::-;7829:4;7867:2;7856:9;7852:18;7844:26;;7880:71;7948:1;7937:9;7933:17;7924:6;7880:71;:::i;:::-;7736:222;;;;:::o;211:449:37:-;;;;;;;"
      },
      "deployedBytecode": {
        "functionDebugData": {
          "@_approve_3193": {
            "entryPoint": 2129,
            "id": 3193,
            "parameterSlots": 3,
            "returnSlots": 0
          },
          "@_approve_3253": {
            "entryPoint": 3002,
            "id": 3253,
            "parameterSlots": 4,
            "returnSlots": 0
          },
          "@_checkOwner_2232": {
            "entryPoint": 2539,
            "id": 2232,
            "parameterSlots": 0,
            "returnSlots": 0
          },
          "@_mint_3142": {
            "entryPoint": 2674,
            "id": 3142,
            "parameterSlots": 2,
            "returnSlots": 0
          },
          "@_msgSender_4969": {
            "entryPoint": 2121,
            "id": 4969,
            "parameterSlots": 0,
            "returnSlots": 1
          },
          "@_spendAllowance_3301": {
            "entryPoint": 2147,
            "id": 3301,
            "parameterSlots": 3,
            "returnSlots": 0
          },
          "@_transferOwnership_2294": {
            "entryPoint": 2804,
            "id": 2294,
            "parameterSlots": 1,
            "returnSlots": 0
          },
          "@_transfer_3032": {
            "entryPoint": 2295,
            "id": 3032,
            "parameterSlots": 3,
            "returnSlots": 0
          },
          "@_update_3109": {
            "entryPoint": 3473,
            "id": 3109,
            "parameterSlots": 3,
            "returnSlots": 0
          },
          "@allowance_2929": {
            "entryPoint": 1810,
            "id": 2929,
            "parameterSlots": 2,
            "returnSlots": 1
          },
          "@approve_2953": {
            "entryPoint": 949,
            "id": 2953,
            "parameterSlots": 2,
            "returnSlots": 1
          },
          "@balanceOf_2888": {
            "entryPoint": 1283,
            "id": 2888,
            "parameterSlots": 1,
            "returnSlots": 1
          },
          "@decimals_2866": {
            "entryPoint": 1252,
            "id": 2866,
            "parameterSlots": 0,
            "returnSlots": 1
          },
          "@getAgent_9030": {
            "entryPoint": 2079,
            "id": 9030,
            "parameterSlots": 0,
            "returnSlots": 1
          },
          "@mint_8613": {
            "entryPoint": 1261,
            "id": 8613,
            "parameterSlots": 2,
            "returnSlots": 0
          },
          "@name_2848": {
            "entryPoint": 803,
            "id": 2848,
            "parameterSlots": 0,
            "returnSlots": 1
          },
          "@owner_2215": {
            "entryPoint": 1375,
            "id": 2215,
            "parameterSlots": 0,
            "returnSlots": 1
          },
          "@proxy_approve_8632": {
            "entryPoint": 1041,
            "id": 8632,
            "parameterSlots": 3,
            "returnSlots": 0
          },
          "@renounceOwnership_2246": {
            "entryPoint": 1355,
            "id": 2246,
            "parameterSlots": 0,
            "returnSlots": 0
          },
          "@setAgent_9048": {
            "entryPoint": 1598,
            "id": 9048,
            "parameterSlots": 1,
            "returnSlots": 0
          },
          "@symbol_2857": {
            "entryPoint": 1417,
            "id": 2857,
            "parameterSlots": 0,
            "returnSlots": 1
          },
          "@totalSupply_2875": {
            "entryPoint": 984,
            "id": 2875,
            "parameterSlots": 0,
            "returnSlots": 1
          },
          "@transferFrom_2985": {
            "entryPoint": 994,
            "id": 2985,
            "parameterSlots": 3,
            "returnSlots": 1
          },
          "@transferOwnership_2274": {
            "entryPoint": 1945,
            "id": 2274,
            "parameterSlots": 1,
            "returnSlots": 0
          },
          "@transfer_2912": {
            "entryPoint": 1563,
            "id": 2912,
            "parameterSlots": 2,
            "returnSlots": 1
          },
          "abi_decode_t_address": {
            "entryPoint": 4278,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 1
          },
          "abi_decode_t_uint256": {
            "entryPoint": 4332,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 1
          },
          "abi_decode_tuple_t_address": {
            "entryPoint": 4651,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 1
          },
          "abi_decode_tuple_t_addresst_address": {
            "entryPoint": 4738,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 2
          },
          "abi_decode_tuple_t_addresst_addresst_uint256": {
            "entryPoint": 4513,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 3
          },
          "abi_decode_tuple_t_addresst_uint256": {
            "entryPoint": 4353,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 2
          },
          "abi_encode_t_address_to_t_address_fromStack": {
            "entryPoint": 4696,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 0
          },
          "abi_encode_t_bool_to_t_bool_fromStack": {
            "entryPoint": 4429,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 0
          },
          "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
            "entryPoint": 4109,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 1
          },
          "abi_encode_t_stringliteral_7c1f108e6012ed3a538bcd7e1438e9b1f83f766b2cc24186029e2132f8d9cea8_to_t_string_memory_ptr_fromStack": {
            "entryPoint": 4939,
            "id": null,
            "parameterSlots": 1,
            "returnSlots": 1
          },
          "abi_encode_t_uint256_to_t_uint256_fromStack": {
            "entryPoint": 4471,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 0
          },
          "abi_encode_t_uint8_to_t_uint8_fromStack": {
            "entryPoint": 4609,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 0
          },
          "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
            "entryPoint": 4711,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 1
          },
          "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
            "entryPoint": 5006,
            "id": null,
            "parameterSlots": 4,
            "returnSlots": 1
          },
          "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
            "entryPoint": 4444,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 1
          },
          "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
            "entryPoint": 4166,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 1
          },
          "abi_encode_tuple_t_stringliteral_7c1f108e6012ed3a538bcd7e1438e9b1f83f766b2cc24186029e2132f8d9cea8__to_t_string_memory_ptr__fromStack_reversed": {
            "entryPoint": 4974,
            "id": null,
            "parameterSlots": 1,
            "returnSlots": 1
          },
          "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
            "entryPoint": 4486,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 1
          },
          "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
            "entryPoint": 4624,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 1
          },
          "allocate_unbounded": {
            "entryPoint": null,
            "id": null,
            "parameterSlots": 0,
            "returnSlots": 1
          },
          "array_length_t_string_memory_ptr": {
            "entryPoint": 4022,
            "id": null,
            "parameterSlots": 1,
            "returnSlots": 1
          },
          "array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
            "entryPoint": 4033,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 1
          },
          "checked_add_t_uint256": {
            "entryPoint": 5108,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 1
          },
          "cleanup_t_address": {
            "entryPoint": 4237,
            "id": null,
            "parameterSlots": 1,
            "returnSlots": 1
          },
          "cleanup_t_bool": {
            "entryPoint": 4417,
            "id": null,
            "parameterSlots": 1,
            "returnSlots": 1
          },
          "cleanup_t_uint160": {
            "entryPoint": 4205,
            "id": null,
            "parameterSlots": 1,
            "returnSlots": 1
          },
          "cleanup_t_uint256": {
            "entryPoint": 4299,
            "id": null,
            "parameterSlots": 1,
            "returnSlots": 1
          },
          "cleanup_t_uint8": {
            "entryPoint": 4596,
            "id": null,
            "parameterSlots": 1,
            "returnSlots": 1
          },
          "copy_memory_to_memory_with_cleanup": {
            "entryPoint": 4050,
            "id": null,
            "parameterSlots": 3,
            "returnSlots": 0
          },
          "extract_byte_array_length": {
            "entryPoint": 4849,
            "id": null,
            "parameterSlots": 1,
            "returnSlots": 1
          },
          "panic_error_0x11": {
            "entryPoint": 5061,
            "id": null,
            "parameterSlots": 0,
            "returnSlots": 0
          },
          "panic_error_0x22": {
            "entryPoint": 4802,
            "id": null,
            "parameterSlots": 0,
            "returnSlots": 0
          },
          "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
            "entryPoint": null,
            "id": null,
            "parameterSlots": 0,
            "returnSlots": 0
          },
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
            "entryPoint": 4200,
            "id": null,
            "parameterSlots": 0,
            "returnSlots": 0
          },
          "round_up_to_mul_of_32": {
            "entryPoint": 4092,
            "id": null,
            "parameterSlots": 1,
            "returnSlots": 1
          },
          "store_literal_in_memory_7c1f108e6012ed3a538bcd7e1438e9b1f83f766b2cc24186029e2132f8d9cea8": {
            "entryPoint": 4898,
            "id": null,
            "parameterSlots": 1,
            "returnSlots": 0
          },
          "validator_revert_t_address": {
            "entryPoint": 4255,
            "id": null,
            "parameterSlots": 1,
            "returnSlots": 0
          },
          "validator_revert_t_uint256": {
            "entryPoint": 4309,
            "id": null,
            "parameterSlots": 1,
            "returnSlots": 0
          }
        },
        "generatedSources": [
          {
            "ast": {
              "nativeSrc": "0:8330:46",
              "nodeType": "YulBlock",
              "src": "0:8330:46",
              "statements": [
                {
                  "body": {
                    "nativeSrc": "66:40:46",
                    "nodeType": "YulBlock",
                    "src": "66:40:46",
                    "statements": [
                      {
                        "nativeSrc": "77:22:46",
                        "nodeType": "YulAssignment",
                        "src": "77:22:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "value",
                              "nativeSrc": "93:5:46",
                              "nodeType": "YulIdentifier",
                              "src": "93:5:46"
                            }
                          ],
                          "functionName": {
                            "name": "mload",
                            "nativeSrc": "87:5:46",
                            "nodeType": "YulIdentifier",
                            "src": "87:5:46"
                          },
                          "nativeSrc": "87:12:46",
                          "nodeType": "YulFunctionCall",
                          "src": "87:12:46"
                        },
                        "variableNames": [
                          {
                            "name": "length",
                            "nativeSrc": "77:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "77:6:46"
                          }
                        ]
                      }
                    ]
                  },
                  "name": "array_length_t_string_memory_ptr",
                  "nativeSrc": "7:99:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "value",
                      "nativeSrc": "49:5:46",
                      "nodeType": "YulTypedName",
                      "src": "49:5:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "length",
                      "nativeSrc": "59:6:46",
                      "nodeType": "YulTypedName",
                      "src": "59:6:46",
                      "type": ""
                    }
                  ],
                  "src": "7:99:46"
                },
                {
                  "body": {
                    "nativeSrc": "208:73:46",
                    "nodeType": "YulBlock",
                    "src": "208:73:46",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "pos",
                              "nativeSrc": "225:3:46",
                              "nodeType": "YulIdentifier",
                              "src": "225:3:46"
                            },
                            {
                              "name": "length",
                              "nativeSrc": "230:6:46",
                              "nodeType": "YulIdentifier",
                              "src": "230:6:46"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nativeSrc": "218:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "218:6:46"
                          },
                          "nativeSrc": "218:19:46",
                          "nodeType": "YulFunctionCall",
                          "src": "218:19:46"
                        },
                        "nativeSrc": "218:19:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "218:19:46"
                      },
                      {
                        "nativeSrc": "246:29:46",
                        "nodeType": "YulAssignment",
                        "src": "246:29:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "pos",
                              "nativeSrc": "265:3:46",
                              "nodeType": "YulIdentifier",
                              "src": "265:3:46"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "270:4:46",
                              "nodeType": "YulLiteral",
                              "src": "270:4:46",
                              "type": "",
                              "value": "0x20"
                            }
                          ],
                          "functionName": {
                            "name": "add",
                            "nativeSrc": "261:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "261:3:46"
                          },
                          "nativeSrc": "261:14:46",
                          "nodeType": "YulFunctionCall",
                          "src": "261:14:46"
                        },
                        "variableNames": [
                          {
                            "name": "updated_pos",
                            "nativeSrc": "246:11:46",
                            "nodeType": "YulIdentifier",
                            "src": "246:11:46"
                          }
                        ]
                      }
                    ]
                  },
                  "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                  "nativeSrc": "112:169:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "pos",
                      "nativeSrc": "180:3:46",
                      "nodeType": "YulTypedName",
                      "src": "180:3:46",
                      "type": ""
                    },
                    {
                      "name": "length",
                      "nativeSrc": "185:6:46",
                      "nodeType": "YulTypedName",
                      "src": "185:6:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "updated_pos",
                      "nativeSrc": "196:11:46",
                      "nodeType": "YulTypedName",
                      "src": "196:11:46",
                      "type": ""
                    }
                  ],
                  "src": "112:169:46"
                },
                {
                  "body": {
                    "nativeSrc": "349:184:46",
                    "nodeType": "YulBlock",
                    "src": "349:184:46",
                    "statements": [
                      {
                        "nativeSrc": "359:10:46",
                        "nodeType": "YulVariableDeclaration",
                        "src": "359:10:46",
                        "value": {
                          "kind": "number",
                          "nativeSrc": "368:1:46",
                          "nodeType": "YulLiteral",
                          "src": "368:1:46",
                          "type": "",
                          "value": "0"
                        },
                        "variables": [
                          {
                            "name": "i",
                            "nativeSrc": "363:1:46",
                            "nodeType": "YulTypedName",
                            "src": "363:1:46",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "body": {
                          "nativeSrc": "428:63:46",
                          "nodeType": "YulBlock",
                          "src": "428:63:46",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dst",
                                        "nativeSrc": "453:3:46",
                                        "nodeType": "YulIdentifier",
                                        "src": "453:3:46"
                                      },
                                      {
                                        "name": "i",
                                        "nativeSrc": "458:1:46",
                                        "nodeType": "YulIdentifier",
                                        "src": "458:1:46"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "449:3:46",
                                      "nodeType": "YulIdentifier",
                                      "src": "449:3:46"
                                    },
                                    "nativeSrc": "449:11:46",
                                    "nodeType": "YulFunctionCall",
                                    "src": "449:11:46"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "src",
                                            "nativeSrc": "472:3:46",
                                            "nodeType": "YulIdentifier",
                                            "src": "472:3:46"
                                          },
                                          {
                                            "name": "i",
                                            "nativeSrc": "477:1:46",
                                            "nodeType": "YulIdentifier",
                                            "src": "477:1:46"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nativeSrc": "468:3:46",
                                          "nodeType": "YulIdentifier",
                                          "src": "468:3:46"
                                        },
                                        "nativeSrc": "468:11:46",
                                        "nodeType": "YulFunctionCall",
                                        "src": "468:11:46"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nativeSrc": "462:5:46",
                                      "nodeType": "YulIdentifier",
                                      "src": "462:5:46"
                                    },
                                    "nativeSrc": "462:18:46",
                                    "nodeType": "YulFunctionCall",
                                    "src": "462:18:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "442:6:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "442:6:46"
                                },
                                "nativeSrc": "442:39:46",
                                "nodeType": "YulFunctionCall",
                                "src": "442:39:46"
                              },
                              "nativeSrc": "442:39:46",
                              "nodeType": "YulExpressionStatement",
                              "src": "442:39:46"
                            }
                          ]
                        },
                        "condition": {
                          "arguments": [
                            {
                              "name": "i",
                              "nativeSrc": "389:1:46",
                              "nodeType": "YulIdentifier",
                              "src": "389:1:46"
                            },
                            {
                              "name": "length",
                              "nativeSrc": "392:6:46",
                              "nodeType": "YulIdentifier",
                              "src": "392:6:46"
                            }
                          ],
                          "functionName": {
                            "name": "lt",
                            "nativeSrc": "386:2:46",
                            "nodeType": "YulIdentifier",
                            "src": "386:2:46"
                          },
                          "nativeSrc": "386:13:46",
                          "nodeType": "YulFunctionCall",
                          "src": "386:13:46"
                        },
                        "nativeSrc": "378:113:46",
                        "nodeType": "YulForLoop",
                        "post": {
                          "nativeSrc": "400:19:46",
                          "nodeType": "YulBlock",
                          "src": "400:19:46",
                          "statements": [
                            {
                              "nativeSrc": "402:15:46",
                              "nodeType": "YulAssignment",
                              "src": "402:15:46",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "i",
                                    "nativeSrc": "411:1:46",
                                    "nodeType": "YulIdentifier",
                                    "src": "411:1:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "414:2:46",
                                    "nodeType": "YulLiteral",
                                    "src": "414:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "407:3:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "407:3:46"
                                },
                                "nativeSrc": "407:10:46",
                                "nodeType": "YulFunctionCall",
                                "src": "407:10:46"
                              },
                              "variableNames": [
                                {
                                  "name": "i",
                                  "nativeSrc": "402:1:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "402:1:46"
                                }
                              ]
                            }
                          ]
                        },
                        "pre": {
                          "nativeSrc": "382:3:46",
                          "nodeType": "YulBlock",
                          "src": "382:3:46",
                          "statements": []
                        },
                        "src": "378:113:46"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "name": "dst",
                                  "nativeSrc": "511:3:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "511:3:46"
                                },
                                {
                                  "name": "length",
                                  "nativeSrc": "516:6:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "516:6:46"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "507:3:46",
                                "nodeType": "YulIdentifier",
                                "src": "507:3:46"
                              },
                              "nativeSrc": "507:16:46",
                              "nodeType": "YulFunctionCall",
                              "src": "507:16:46"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "525:1:46",
                              "nodeType": "YulLiteral",
                              "src": "525:1:46",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nativeSrc": "500:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "500:6:46"
                          },
                          "nativeSrc": "500:27:46",
                          "nodeType": "YulFunctionCall",
                          "src": "500:27:46"
                        },
                        "nativeSrc": "500:27:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "500:27:46"
                      }
                    ]
                  },
                  "name": "copy_memory_to_memory_with_cleanup",
                  "nativeSrc": "287:246:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "src",
                      "nativeSrc": "331:3:46",
                      "nodeType": "YulTypedName",
                      "src": "331:3:46",
                      "type": ""
                    },
                    {
                      "name": "dst",
                      "nativeSrc": "336:3:46",
                      "nodeType": "YulTypedName",
                      "src": "336:3:46",
                      "type": ""
                    },
                    {
                      "name": "length",
                      "nativeSrc": "341:6:46",
                      "nodeType": "YulTypedName",
                      "src": "341:6:46",
                      "type": ""
                    }
                  ],
                  "src": "287:246:46"
                },
                {
                  "body": {
                    "nativeSrc": "587:54:46",
                    "nodeType": "YulBlock",
                    "src": "587:54:46",
                    "statements": [
                      {
                        "nativeSrc": "597:38:46",
                        "nodeType": "YulAssignment",
                        "src": "597:38:46",
                        "value": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "name": "value",
                                  "nativeSrc": "615:5:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "615:5:46"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "622:2:46",
                                  "nodeType": "YulLiteral",
                                  "src": "622:2:46",
                                  "type": "",
                                  "value": "31"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "611:3:46",
                                "nodeType": "YulIdentifier",
                                "src": "611:3:46"
                              },
                              "nativeSrc": "611:14:46",
                              "nodeType": "YulFunctionCall",
                              "src": "611:14:46"
                            },
                            {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nativeSrc": "631:2:46",
                                  "nodeType": "YulLiteral",
                                  "src": "631:2:46",
                                  "type": "",
                                  "value": "31"
                                }
                              ],
                              "functionName": {
                                "name": "not",
                                "nativeSrc": "627:3:46",
                                "nodeType": "YulIdentifier",
                                "src": "627:3:46"
                              },
                              "nativeSrc": "627:7:46",
                              "nodeType": "YulFunctionCall",
                              "src": "627:7:46"
                            }
                          ],
                          "functionName": {
                            "name": "and",
                            "nativeSrc": "607:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "607:3:46"
                          },
                          "nativeSrc": "607:28:46",
                          "nodeType": "YulFunctionCall",
                          "src": "607:28:46"
                        },
                        "variableNames": [
                          {
                            "name": "result",
                            "nativeSrc": "597:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "597:6:46"
                          }
                        ]
                      }
                    ]
                  },
                  "name": "round_up_to_mul_of_32",
                  "nativeSrc": "539:102:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "value",
                      "nativeSrc": "570:5:46",
                      "nodeType": "YulTypedName",
                      "src": "570:5:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "result",
                      "nativeSrc": "580:6:46",
                      "nodeType": "YulTypedName",
                      "src": "580:6:46",
                      "type": ""
                    }
                  ],
                  "src": "539:102:46"
                },
                {
                  "body": {
                    "nativeSrc": "739:285:46",
                    "nodeType": "YulBlock",
                    "src": "739:285:46",
                    "statements": [
                      {
                        "nativeSrc": "749:53:46",
                        "nodeType": "YulVariableDeclaration",
                        "src": "749:53:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "value",
                              "nativeSrc": "796:5:46",
                              "nodeType": "YulIdentifier",
                              "src": "796:5:46"
                            }
                          ],
                          "functionName": {
                            "name": "array_length_t_string_memory_ptr",
                            "nativeSrc": "763:32:46",
                            "nodeType": "YulIdentifier",
                            "src": "763:32:46"
                          },
                          "nativeSrc": "763:39:46",
                          "nodeType": "YulFunctionCall",
                          "src": "763:39:46"
                        },
                        "variables": [
                          {
                            "name": "length",
                            "nativeSrc": "753:6:46",
                            "nodeType": "YulTypedName",
                            "src": "753:6:46",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "nativeSrc": "811:78:46",
                        "nodeType": "YulAssignment",
                        "src": "811:78:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "pos",
                              "nativeSrc": "877:3:46",
                              "nodeType": "YulIdentifier",
                              "src": "877:3:46"
                            },
                            {
                              "name": "length",
                              "nativeSrc": "882:6:46",
                              "nodeType": "YulIdentifier",
                              "src": "882:6:46"
                            }
                          ],
                          "functionName": {
                            "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                            "nativeSrc": "818:58:46",
                            "nodeType": "YulIdentifier",
                            "src": "818:58:46"
                          },
                          "nativeSrc": "818:71:46",
                          "nodeType": "YulFunctionCall",
                          "src": "818:71:46"
                        },
                        "variableNames": [
                          {
                            "name": "pos",
                            "nativeSrc": "811:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "811:3:46"
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "name": "value",
                                  "nativeSrc": "937:5:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "937:5:46"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "944:4:46",
                                  "nodeType": "YulLiteral",
                                  "src": "944:4:46",
                                  "type": "",
                                  "value": "0x20"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "933:3:46",
                                "nodeType": "YulIdentifier",
                                "src": "933:3:46"
                              },
                              "nativeSrc": "933:16:46",
                              "nodeType": "YulFunctionCall",
                              "src": "933:16:46"
                            },
                            {
                              "name": "pos",
                              "nativeSrc": "951:3:46",
                              "nodeType": "YulIdentifier",
                              "src": "951:3:46"
                            },
                            {
                              "name": "length",
                              "nativeSrc": "956:6:46",
                              "nodeType": "YulIdentifier",
                              "src": "956:6:46"
                            }
                          ],
                          "functionName": {
                            "name": "copy_memory_to_memory_with_cleanup",
                            "nativeSrc": "898:34:46",
                            "nodeType": "YulIdentifier",
                            "src": "898:34:46"
                          },
                          "nativeSrc": "898:65:46",
                          "nodeType": "YulFunctionCall",
                          "src": "898:65:46"
                        },
                        "nativeSrc": "898:65:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "898:65:46"
                      },
                      {
                        "nativeSrc": "972:46:46",
                        "nodeType": "YulAssignment",
                        "src": "972:46:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "pos",
                              "nativeSrc": "983:3:46",
                              "nodeType": "YulIdentifier",
                              "src": "983:3:46"
                            },
                            {
                              "arguments": [
                                {
                                  "name": "length",
                                  "nativeSrc": "1010:6:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "1010:6:46"
                                }
                              ],
                              "functionName": {
                                "name": "round_up_to_mul_of_32",
                                "nativeSrc": "988:21:46",
                                "nodeType": "YulIdentifier",
                                "src": "988:21:46"
                              },
                              "nativeSrc": "988:29:46",
                              "nodeType": "YulFunctionCall",
                              "src": "988:29:46"
                            }
                          ],
                          "functionName": {
                            "name": "add",
                            "nativeSrc": "979:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "979:3:46"
                          },
                          "nativeSrc": "979:39:46",
                          "nodeType": "YulFunctionCall",
                          "src": "979:39:46"
                        },
                        "variableNames": [
                          {
                            "name": "end",
                            "nativeSrc": "972:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "972:3:46"
                          }
                        ]
                      }
                    ]
                  },
                  "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
                  "nativeSrc": "647:377:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "value",
                      "nativeSrc": "720:5:46",
                      "nodeType": "YulTypedName",
                      "src": "720:5:46",
                      "type": ""
                    },
                    {
                      "name": "pos",
                      "nativeSrc": "727:3:46",
                      "nodeType": "YulTypedName",
                      "src": "727:3:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "end",
                      "nativeSrc": "735:3:46",
                      "nodeType": "YulTypedName",
                      "src": "735:3:46",
                      "type": ""
                    }
                  ],
                  "src": "647:377:46"
                },
                {
                  "body": {
                    "nativeSrc": "1148:195:46",
                    "nodeType": "YulBlock",
                    "src": "1148:195:46",
                    "statements": [
                      {
                        "nativeSrc": "1158:26:46",
                        "nodeType": "YulAssignment",
                        "src": "1158:26:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "headStart",
                              "nativeSrc": "1170:9:46",
                              "nodeType": "YulIdentifier",
                              "src": "1170:9:46"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "1181:2:46",
                              "nodeType": "YulLiteral",
                              "src": "1181:2:46",
                              "type": "",
                              "value": "32"
                            }
                          ],
                          "functionName": {
                            "name": "add",
                            "nativeSrc": "1166:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "1166:3:46"
                          },
                          "nativeSrc": "1166:18:46",
                          "nodeType": "YulFunctionCall",
                          "src": "1166:18:46"
                        },
                        "variableNames": [
                          {
                            "name": "tail",
                            "nativeSrc": "1158:4:46",
                            "nodeType": "YulIdentifier",
                            "src": "1158:4:46"
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "1205:9:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "1205:9:46"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "1216:1:46",
                                  "nodeType": "YulLiteral",
                                  "src": "1216:1:46",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "1201:3:46",
                                "nodeType": "YulIdentifier",
                                "src": "1201:3:46"
                              },
                              "nativeSrc": "1201:17:46",
                              "nodeType": "YulFunctionCall",
                              "src": "1201:17:46"
                            },
                            {
                              "arguments": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "1224:4:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "1224:4:46"
                                },
                                {
                                  "name": "headStart",
                                  "nativeSrc": "1230:9:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "1230:9:46"
                                }
                              ],
                              "functionName": {
                                "name": "sub",
                                "nativeSrc": "1220:3:46",
                                "nodeType": "YulIdentifier",
                                "src": "1220:3:46"
                              },
                              "nativeSrc": "1220:20:46",
                              "nodeType": "YulFunctionCall",
                              "src": "1220:20:46"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nativeSrc": "1194:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "1194:6:46"
                          },
                          "nativeSrc": "1194:47:46",
                          "nodeType": "YulFunctionCall",
                          "src": "1194:47:46"
                        },
                        "nativeSrc": "1194:47:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "1194:47:46"
                      },
                      {
                        "nativeSrc": "1250:86:46",
                        "nodeType": "YulAssignment",
                        "src": "1250:86:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "value0",
                              "nativeSrc": "1322:6:46",
                              "nodeType": "YulIdentifier",
                              "src": "1322:6:46"
                            },
                            {
                              "name": "tail",
                              "nativeSrc": "1331:4:46",
                              "nodeType": "YulIdentifier",
                              "src": "1331:4:46"
                            }
                          ],
                          "functionName": {
                            "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
                            "nativeSrc": "1258:63:46",
                            "nodeType": "YulIdentifier",
                            "src": "1258:63:46"
                          },
                          "nativeSrc": "1258:78:46",
                          "nodeType": "YulFunctionCall",
                          "src": "1258:78:46"
                        },
                        "variableNames": [
                          {
                            "name": "tail",
                            "nativeSrc": "1250:4:46",
                            "nodeType": "YulIdentifier",
                            "src": "1250:4:46"
                          }
                        ]
                      }
                    ]
                  },
                  "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                  "nativeSrc": "1030:313:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "headStart",
                      "nativeSrc": "1120:9:46",
                      "nodeType": "YulTypedName",
                      "src": "1120:9:46",
                      "type": ""
                    },
                    {
                      "name": "value0",
                      "nativeSrc": "1132:6:46",
                      "nodeType": "YulTypedName",
                      "src": "1132:6:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "tail",
                      "nativeSrc": "1143:4:46",
                      "nodeType": "YulTypedName",
                      "src": "1143:4:46",
                      "type": ""
                    }
                  ],
                  "src": "1030:313:46"
                },
                {
                  "body": {
                    "nativeSrc": "1389:35:46",
                    "nodeType": "YulBlock",
                    "src": "1389:35:46",
                    "statements": [
                      {
                        "nativeSrc": "1399:19:46",
                        "nodeType": "YulAssignment",
                        "src": "1399:19:46",
                        "value": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nativeSrc": "1415:2:46",
                              "nodeType": "YulLiteral",
                              "src": "1415:2:46",
                              "type": "",
                              "value": "64"
                            }
                          ],
                          "functionName": {
                            "name": "mload",
                            "nativeSrc": "1409:5:46",
                            "nodeType": "YulIdentifier",
                            "src": "1409:5:46"
                          },
                          "nativeSrc": "1409:9:46",
                          "nodeType": "YulFunctionCall",
                          "src": "1409:9:46"
                        },
                        "variableNames": [
                          {
                            "name": "memPtr",
                            "nativeSrc": "1399:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "1399:6:46"
                          }
                        ]
                      }
                    ]
                  },
                  "name": "allocate_unbounded",
                  "nativeSrc": "1349:75:46",
                  "nodeType": "YulFunctionDefinition",
                  "returnVariables": [
                    {
                      "name": "memPtr",
                      "nativeSrc": "1382:6:46",
                      "nodeType": "YulTypedName",
                      "src": "1382:6:46",
                      "type": ""
                    }
                  ],
                  "src": "1349:75:46"
                },
                {
                  "body": {
                    "nativeSrc": "1519:28:46",
                    "nodeType": "YulBlock",
                    "src": "1519:28:46",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nativeSrc": "1536:1:46",
                              "nodeType": "YulLiteral",
                              "src": "1536:1:46",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "1539:1:46",
                              "nodeType": "YulLiteral",
                              "src": "1539:1:46",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nativeSrc": "1529:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "1529:6:46"
                          },
                          "nativeSrc": "1529:12:46",
                          "nodeType": "YulFunctionCall",
                          "src": "1529:12:46"
                        },
                        "nativeSrc": "1529:12:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "1529:12:46"
                      }
                    ]
                  },
                  "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                  "nativeSrc": "1430:117:46",
                  "nodeType": "YulFunctionDefinition",
                  "src": "1430:117:46"
                },
                {
                  "body": {
                    "nativeSrc": "1642:28:46",
                    "nodeType": "YulBlock",
                    "src": "1642:28:46",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nativeSrc": "1659:1:46",
                              "nodeType": "YulLiteral",
                              "src": "1659:1:46",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "1662:1:46",
                              "nodeType": "YulLiteral",
                              "src": "1662:1:46",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nativeSrc": "1652:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "1652:6:46"
                          },
                          "nativeSrc": "1652:12:46",
                          "nodeType": "YulFunctionCall",
                          "src": "1652:12:46"
                        },
                        "nativeSrc": "1652:12:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "1652:12:46"
                      }
                    ]
                  },
                  "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                  "nativeSrc": "1553:117:46",
                  "nodeType": "YulFunctionDefinition",
                  "src": "1553:117:46"
                },
                {
                  "body": {
                    "nativeSrc": "1721:81:46",
                    "nodeType": "YulBlock",
                    "src": "1721:81:46",
                    "statements": [
                      {
                        "nativeSrc": "1731:65:46",
                        "nodeType": "YulAssignment",
                        "src": "1731:65:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "value",
                              "nativeSrc": "1746:5:46",
                              "nodeType": "YulIdentifier",
                              "src": "1746:5:46"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "1753:42:46",
                              "nodeType": "YulLiteral",
                              "src": "1753:42:46",
                              "type": "",
                              "value": "0xffffffffffffffffffffffffffffffffffffffff"
                            }
                          ],
                          "functionName": {
                            "name": "and",
                            "nativeSrc": "1742:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "1742:3:46"
                          },
                          "nativeSrc": "1742:54:46",
                          "nodeType": "YulFunctionCall",
                          "src": "1742:54:46"
                        },
                        "variableNames": [
                          {
                            "name": "cleaned",
                            "nativeSrc": "1731:7:46",
                            "nodeType": "YulIdentifier",
                            "src": "1731:7:46"
                          }
                        ]
                      }
                    ]
                  },
                  "name": "cleanup_t_uint160",
                  "nativeSrc": "1676:126:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "value",
                      "nativeSrc": "1703:5:46",
                      "nodeType": "YulTypedName",
                      "src": "1703:5:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "cleaned",
                      "nativeSrc": "1713:7:46",
                      "nodeType": "YulTypedName",
                      "src": "1713:7:46",
                      "type": ""
                    }
                  ],
                  "src": "1676:126:46"
                },
                {
                  "body": {
                    "nativeSrc": "1853:51:46",
                    "nodeType": "YulBlock",
                    "src": "1853:51:46",
                    "statements": [
                      {
                        "nativeSrc": "1863:35:46",
                        "nodeType": "YulAssignment",
                        "src": "1863:35:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "value",
                              "nativeSrc": "1892:5:46",
                              "nodeType": "YulIdentifier",
                              "src": "1892:5:46"
                            }
                          ],
                          "functionName": {
                            "name": "cleanup_t_uint160",
                            "nativeSrc": "1874:17:46",
                            "nodeType": "YulIdentifier",
                            "src": "1874:17:46"
                          },
                          "nativeSrc": "1874:24:46",
                          "nodeType": "YulFunctionCall",
                          "src": "1874:24:46"
                        },
                        "variableNames": [
                          {
                            "name": "cleaned",
                            "nativeSrc": "1863:7:46",
                            "nodeType": "YulIdentifier",
                            "src": "1863:7:46"
                          }
                        ]
                      }
                    ]
                  },
                  "name": "cleanup_t_address",
                  "nativeSrc": "1808:96:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "value",
                      "nativeSrc": "1835:5:46",
                      "nodeType": "YulTypedName",
                      "src": "1835:5:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "cleaned",
                      "nativeSrc": "1845:7:46",
                      "nodeType": "YulTypedName",
                      "src": "1845:7:46",
                      "type": ""
                    }
                  ],
                  "src": "1808:96:46"
                },
                {
                  "body": {
                    "nativeSrc": "1953:79:46",
                    "nodeType": "YulBlock",
                    "src": "1953:79:46",
                    "statements": [
                      {
                        "body": {
                          "nativeSrc": "2010:16:46",
                          "nodeType": "YulBlock",
                          "src": "2010:16:46",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2019:1:46",
                                    "nodeType": "YulLiteral",
                                    "src": "2019:1:46",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2022:1:46",
                                    "nodeType": "YulLiteral",
                                    "src": "2022:1:46",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nativeSrc": "2012:6:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "2012:6:46"
                                },
                                "nativeSrc": "2012:12:46",
                                "nodeType": "YulFunctionCall",
                                "src": "2012:12:46"
                              },
                              "nativeSrc": "2012:12:46",
                              "nodeType": "YulExpressionStatement",
                              "src": "2012:12:46"
                            }
                          ]
                        },
                        "condition": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "name": "value",
                                  "nativeSrc": "1976:5:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "1976:5:46"
                                },
                                {
                                  "arguments": [
                                    {
                                      "name": "value",
                                      "nativeSrc": "2001:5:46",
                                      "nodeType": "YulIdentifier",
                                      "src": "2001:5:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "cleanup_t_address",
                                    "nativeSrc": "1983:17:46",
                                    "nodeType": "YulIdentifier",
                                    "src": "1983:17:46"
                                  },
                                  "nativeSrc": "1983:24:46",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1983:24:46"
                                }
                              ],
                              "functionName": {
                                "name": "eq",
                                "nativeSrc": "1973:2:46",
                                "nodeType": "YulIdentifier",
                                "src": "1973:2:46"
                              },
                              "nativeSrc": "1973:35:46",
                              "nodeType": "YulFunctionCall",
                              "src": "1973:35:46"
                            }
                          ],
                          "functionName": {
                            "name": "iszero",
                            "nativeSrc": "1966:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "1966:6:46"
                          },
                          "nativeSrc": "1966:43:46",
                          "nodeType": "YulFunctionCall",
                          "src": "1966:43:46"
                        },
                        "nativeSrc": "1963:63:46",
                        "nodeType": "YulIf",
                        "src": "1963:63:46"
                      }
                    ]
                  },
                  "name": "validator_revert_t_address",
                  "nativeSrc": "1910:122:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "value",
                      "nativeSrc": "1946:5:46",
                      "nodeType": "YulTypedName",
                      "src": "1946:5:46",
                      "type": ""
                    }
                  ],
                  "src": "1910:122:46"
                },
                {
                  "body": {
                    "nativeSrc": "2090:87:46",
                    "nodeType": "YulBlock",
                    "src": "2090:87:46",
                    "statements": [
                      {
                        "nativeSrc": "2100:29:46",
                        "nodeType": "YulAssignment",
                        "src": "2100:29:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "offset",
                              "nativeSrc": "2122:6:46",
                              "nodeType": "YulIdentifier",
                              "src": "2122:6:46"
                            }
                          ],
                          "functionName": {
                            "name": "calldataload",
                            "nativeSrc": "2109:12:46",
                            "nodeType": "YulIdentifier",
                            "src": "2109:12:46"
                          },
                          "nativeSrc": "2109:20:46",
                          "nodeType": "YulFunctionCall",
                          "src": "2109:20:46"
                        },
                        "variableNames": [
                          {
                            "name": "value",
                            "nativeSrc": "2100:5:46",
                            "nodeType": "YulIdentifier",
                            "src": "2100:5:46"
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "value",
                              "nativeSrc": "2165:5:46",
                              "nodeType": "YulIdentifier",
                              "src": "2165:5:46"
                            }
                          ],
                          "functionName": {
                            "name": "validator_revert_t_address",
                            "nativeSrc": "2138:26:46",
                            "nodeType": "YulIdentifier",
                            "src": "2138:26:46"
                          },
                          "nativeSrc": "2138:33:46",
                          "nodeType": "YulFunctionCall",
                          "src": "2138:33:46"
                        },
                        "nativeSrc": "2138:33:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "2138:33:46"
                      }
                    ]
                  },
                  "name": "abi_decode_t_address",
                  "nativeSrc": "2038:139:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "offset",
                      "nativeSrc": "2068:6:46",
                      "nodeType": "YulTypedName",
                      "src": "2068:6:46",
                      "type": ""
                    },
                    {
                      "name": "end",
                      "nativeSrc": "2076:3:46",
                      "nodeType": "YulTypedName",
                      "src": "2076:3:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "value",
                      "nativeSrc": "2084:5:46",
                      "nodeType": "YulTypedName",
                      "src": "2084:5:46",
                      "type": ""
                    }
                  ],
                  "src": "2038:139:46"
                },
                {
                  "body": {
                    "nativeSrc": "2228:32:46",
                    "nodeType": "YulBlock",
                    "src": "2228:32:46",
                    "statements": [
                      {
                        "nativeSrc": "2238:16:46",
                        "nodeType": "YulAssignment",
                        "src": "2238:16:46",
                        "value": {
                          "name": "value",
                          "nativeSrc": "2249:5:46",
                          "nodeType": "YulIdentifier",
                          "src": "2249:5:46"
                        },
                        "variableNames": [
                          {
                            "name": "cleaned",
                            "nativeSrc": "2238:7:46",
                            "nodeType": "YulIdentifier",
                            "src": "2238:7:46"
                          }
                        ]
                      }
                    ]
                  },
                  "name": "cleanup_t_uint256",
                  "nativeSrc": "2183:77:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "value",
                      "nativeSrc": "2210:5:46",
                      "nodeType": "YulTypedName",
                      "src": "2210:5:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "cleaned",
                      "nativeSrc": "2220:7:46",
                      "nodeType": "YulTypedName",
                      "src": "2220:7:46",
                      "type": ""
                    }
                  ],
                  "src": "2183:77:46"
                },
                {
                  "body": {
                    "nativeSrc": "2309:79:46",
                    "nodeType": "YulBlock",
                    "src": "2309:79:46",
                    "statements": [
                      {
                        "body": {
                          "nativeSrc": "2366:16:46",
                          "nodeType": "YulBlock",
                          "src": "2366:16:46",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2375:1:46",
                                    "nodeType": "YulLiteral",
                                    "src": "2375:1:46",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2378:1:46",
                                    "nodeType": "YulLiteral",
                                    "src": "2378:1:46",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nativeSrc": "2368:6:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "2368:6:46"
                                },
                                "nativeSrc": "2368:12:46",
                                "nodeType": "YulFunctionCall",
                                "src": "2368:12:46"
                              },
                              "nativeSrc": "2368:12:46",
                              "nodeType": "YulExpressionStatement",
                              "src": "2368:12:46"
                            }
                          ]
                        },
                        "condition": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "name": "value",
                                  "nativeSrc": "2332:5:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "2332:5:46"
                                },
                                {
                                  "arguments": [
                                    {
                                      "name": "value",
                                      "nativeSrc": "2357:5:46",
                                      "nodeType": "YulIdentifier",
                                      "src": "2357:5:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "cleanup_t_uint256",
                                    "nativeSrc": "2339:17:46",
                                    "nodeType": "YulIdentifier",
                                    "src": "2339:17:46"
                                  },
                                  "nativeSrc": "2339:24:46",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2339:24:46"
                                }
                              ],
                              "functionName": {
                                "name": "eq",
                                "nativeSrc": "2329:2:46",
                                "nodeType": "YulIdentifier",
                                "src": "2329:2:46"
                              },
                              "nativeSrc": "2329:35:46",
                              "nodeType": "YulFunctionCall",
                              "src": "2329:35:46"
                            }
                          ],
                          "functionName": {
                            "name": "iszero",
                            "nativeSrc": "2322:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "2322:6:46"
                          },
                          "nativeSrc": "2322:43:46",
                          "nodeType": "YulFunctionCall",
                          "src": "2322:43:46"
                        },
                        "nativeSrc": "2319:63:46",
                        "nodeType": "YulIf",
                        "src": "2319:63:46"
                      }
                    ]
                  },
                  "name": "validator_revert_t_uint256",
                  "nativeSrc": "2266:122:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "value",
                      "nativeSrc": "2302:5:46",
                      "nodeType": "YulTypedName",
                      "src": "2302:5:46",
                      "type": ""
                    }
                  ],
                  "src": "2266:122:46"
                },
                {
                  "body": {
                    "nativeSrc": "2446:87:46",
                    "nodeType": "YulBlock",
                    "src": "2446:87:46",
                    "statements": [
                      {
                        "nativeSrc": "2456:29:46",
                        "nodeType": "YulAssignment",
                        "src": "2456:29:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "offset",
                              "nativeSrc": "2478:6:46",
                              "nodeType": "YulIdentifier",
                              "src": "2478:6:46"
                            }
                          ],
                          "functionName": {
                            "name": "calldataload",
                            "nativeSrc": "2465:12:46",
                            "nodeType": "YulIdentifier",
                            "src": "2465:12:46"
                          },
                          "nativeSrc": "2465:20:46",
                          "nodeType": "YulFunctionCall",
                          "src": "2465:20:46"
                        },
                        "variableNames": [
                          {
                            "name": "value",
                            "nativeSrc": "2456:5:46",
                            "nodeType": "YulIdentifier",
                            "src": "2456:5:46"
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "value",
                              "nativeSrc": "2521:5:46",
                              "nodeType": "YulIdentifier",
                              "src": "2521:5:46"
                            }
                          ],
                          "functionName": {
                            "name": "validator_revert_t_uint256",
                            "nativeSrc": "2494:26:46",
                            "nodeType": "YulIdentifier",
                            "src": "2494:26:46"
                          },
                          "nativeSrc": "2494:33:46",
                          "nodeType": "YulFunctionCall",
                          "src": "2494:33:46"
                        },
                        "nativeSrc": "2494:33:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "2494:33:46"
                      }
                    ]
                  },
                  "name": "abi_decode_t_uint256",
                  "nativeSrc": "2394:139:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "offset",
                      "nativeSrc": "2424:6:46",
                      "nodeType": "YulTypedName",
                      "src": "2424:6:46",
                      "type": ""
                    },
                    {
                      "name": "end",
                      "nativeSrc": "2432:3:46",
                      "nodeType": "YulTypedName",
                      "src": "2432:3:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "value",
                      "nativeSrc": "2440:5:46",
                      "nodeType": "YulTypedName",
                      "src": "2440:5:46",
                      "type": ""
                    }
                  ],
                  "src": "2394:139:46"
                },
                {
                  "body": {
                    "nativeSrc": "2622:391:46",
                    "nodeType": "YulBlock",
                    "src": "2622:391:46",
                    "statements": [
                      {
                        "body": {
                          "nativeSrc": "2668:83:46",
                          "nodeType": "YulBlock",
                          "src": "2668:83:46",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [],
                                "functionName": {
                                  "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                  "nativeSrc": "2670:77:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "2670:77:46"
                                },
                                "nativeSrc": "2670:79:46",
                                "nodeType": "YulFunctionCall",
                                "src": "2670:79:46"
                              },
                              "nativeSrc": "2670:79:46",
                              "nodeType": "YulExpressionStatement",
                              "src": "2670:79:46"
                            }
                          ]
                        },
                        "condition": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "name": "dataEnd",
                                  "nativeSrc": "2643:7:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "2643:7:46"
                                },
                                {
                                  "name": "headStart",
                                  "nativeSrc": "2652:9:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "2652:9:46"
                                }
                              ],
                              "functionName": {
                                "name": "sub",
                                "nativeSrc": "2639:3:46",
                                "nodeType": "YulIdentifier",
                                "src": "2639:3:46"
                              },
                              "nativeSrc": "2639:23:46",
                              "nodeType": "YulFunctionCall",
                              "src": "2639:23:46"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "2664:2:46",
                              "nodeType": "YulLiteral",
                              "src": "2664:2:46",
                              "type": "",
                              "value": "64"
                            }
                          ],
                          "functionName": {
                            "name": "slt",
                            "nativeSrc": "2635:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "2635:3:46"
                          },
                          "nativeSrc": "2635:32:46",
                          "nodeType": "YulFunctionCall",
                          "src": "2635:32:46"
                        },
                        "nativeSrc": "2632:119:46",
                        "nodeType": "YulIf",
                        "src": "2632:119:46"
                      },
                      {
                        "nativeSrc": "2761:117:46",
                        "nodeType": "YulBlock",
                        "src": "2761:117:46",
                        "statements": [
                          {
                            "nativeSrc": "2776:15:46",
                            "nodeType": "YulVariableDeclaration",
                            "src": "2776:15:46",
                            "value": {
                              "kind": "number",
                              "nativeSrc": "2790:1:46",
                              "nodeType": "YulLiteral",
                              "src": "2790:1:46",
                              "type": "",
                              "value": "0"
                            },
                            "variables": [
                              {
                                "name": "offset",
                                "nativeSrc": "2780:6:46",
                                "nodeType": "YulTypedName",
                                "src": "2780:6:46",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "nativeSrc": "2805:63:46",
                            "nodeType": "YulAssignment",
                            "src": "2805:63:46",
                            "value": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "2840:9:46",
                                      "nodeType": "YulIdentifier",
                                      "src": "2840:9:46"
                                    },
                                    {
                                      "name": "offset",
                                      "nativeSrc": "2851:6:46",
                                      "nodeType": "YulIdentifier",
                                      "src": "2851:6:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "2836:3:46",
                                    "nodeType": "YulIdentifier",
                                    "src": "2836:3:46"
                                  },
                                  "nativeSrc": "2836:22:46",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2836:22:46"
                                },
                                {
                                  "name": "dataEnd",
                                  "nativeSrc": "2860:7:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "2860:7:46"
                                }
                              ],
                              "functionName": {
                                "name": "abi_decode_t_address",
                                "nativeSrc": "2815:20:46",
                                "nodeType": "YulIdentifier",
                                "src": "2815:20:46"
                              },
                              "nativeSrc": "2815:53:46",
                              "nodeType": "YulFunctionCall",
                              "src": "2815:53:46"
                            },
                            "variableNames": [
                              {
                                "name": "value0",
                                "nativeSrc": "2805:6:46",
                                "nodeType": "YulIdentifier",
                                "src": "2805:6:46"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "nativeSrc": "2888:118:46",
                        "nodeType": "YulBlock",
                        "src": "2888:118:46",
                        "statements": [
                          {
                            "nativeSrc": "2903:16:46",
                            "nodeType": "YulVariableDeclaration",
                            "src": "2903:16:46",
                            "value": {
                              "kind": "number",
                              "nativeSrc": "2917:2:46",
                              "nodeType": "YulLiteral",
                              "src": "2917:2:46",
                              "type": "",
                              "value": "32"
                            },
                            "variables": [
                              {
                                "name": "offset",
                                "nativeSrc": "2907:6:46",
                                "nodeType": "YulTypedName",
                                "src": "2907:6:46",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "nativeSrc": "2933:63:46",
                            "nodeType": "YulAssignment",
                            "src": "2933:63:46",
                            "value": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "2968:9:46",
                                      "nodeType": "YulIdentifier",
                                      "src": "2968:9:46"
                                    },
                                    {
                                      "name": "offset",
                                      "nativeSrc": "2979:6:46",
                                      "nodeType": "YulIdentifier",
                                      "src": "2979:6:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "2964:3:46",
                                    "nodeType": "YulIdentifier",
                                    "src": "2964:3:46"
                                  },
                                  "nativeSrc": "2964:22:46",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2964:22:46"
                                },
                                {
                                  "name": "dataEnd",
                                  "nativeSrc": "2988:7:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "2988:7:46"
                                }
                              ],
                              "functionName": {
                                "name": "abi_decode_t_uint256",
                                "nativeSrc": "2943:20:46",
                                "nodeType": "YulIdentifier",
                                "src": "2943:20:46"
                              },
                              "nativeSrc": "2943:53:46",
                              "nodeType": "YulFunctionCall",
                              "src": "2943:53:46"
                            },
                            "variableNames": [
                              {
                                "name": "value1",
                                "nativeSrc": "2933:6:46",
                                "nodeType": "YulIdentifier",
                                "src": "2933:6:46"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  "name": "abi_decode_tuple_t_addresst_uint256",
                  "nativeSrc": "2539:474:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "headStart",
                      "nativeSrc": "2584:9:46",
                      "nodeType": "YulTypedName",
                      "src": "2584:9:46",
                      "type": ""
                    },
                    {
                      "name": "dataEnd",
                      "nativeSrc": "2595:7:46",
                      "nodeType": "YulTypedName",
                      "src": "2595:7:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "value0",
                      "nativeSrc": "2607:6:46",
                      "nodeType": "YulTypedName",
                      "src": "2607:6:46",
                      "type": ""
                    },
                    {
                      "name": "value1",
                      "nativeSrc": "2615:6:46",
                      "nodeType": "YulTypedName",
                      "src": "2615:6:46",
                      "type": ""
                    }
                  ],
                  "src": "2539:474:46"
                },
                {
                  "body": {
                    "nativeSrc": "3061:48:46",
                    "nodeType": "YulBlock",
                    "src": "3061:48:46",
                    "statements": [
                      {
                        "nativeSrc": "3071:32:46",
                        "nodeType": "YulAssignment",
                        "src": "3071:32:46",
                        "value": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "name": "value",
                                  "nativeSrc": "3096:5:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "3096:5:46"
                                }
                              ],
                              "functionName": {
                                "name": "iszero",
                                "nativeSrc": "3089:6:46",
                                "nodeType": "YulIdentifier",
                                "src": "3089:6:46"
                              },
                              "nativeSrc": "3089:13:46",
                              "nodeType": "YulFunctionCall",
                              "src": "3089:13:46"
                            }
                          ],
                          "functionName": {
                            "name": "iszero",
                            "nativeSrc": "3082:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "3082:6:46"
                          },
                          "nativeSrc": "3082:21:46",
                          "nodeType": "YulFunctionCall",
                          "src": "3082:21:46"
                        },
                        "variableNames": [
                          {
                            "name": "cleaned",
                            "nativeSrc": "3071:7:46",
                            "nodeType": "YulIdentifier",
                            "src": "3071:7:46"
                          }
                        ]
                      }
                    ]
                  },
                  "name": "cleanup_t_bool",
                  "nativeSrc": "3019:90:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "value",
                      "nativeSrc": "3043:5:46",
                      "nodeType": "YulTypedName",
                      "src": "3043:5:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "cleaned",
                      "nativeSrc": "3053:7:46",
                      "nodeType": "YulTypedName",
                      "src": "3053:7:46",
                      "type": ""
                    }
                  ],
                  "src": "3019:90:46"
                },
                {
                  "body": {
                    "nativeSrc": "3174:50:46",
                    "nodeType": "YulBlock",
                    "src": "3174:50:46",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "pos",
                              "nativeSrc": "3191:3:46",
                              "nodeType": "YulIdentifier",
                              "src": "3191:3:46"
                            },
                            {
                              "arguments": [
                                {
                                  "name": "value",
                                  "nativeSrc": "3211:5:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "3211:5:46"
                                }
                              ],
                              "functionName": {
                                "name": "cleanup_t_bool",
                                "nativeSrc": "3196:14:46",
                                "nodeType": "YulIdentifier",
                                "src": "3196:14:46"
                              },
                              "nativeSrc": "3196:21:46",
                              "nodeType": "YulFunctionCall",
                              "src": "3196:21:46"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nativeSrc": "3184:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "3184:6:46"
                          },
                          "nativeSrc": "3184:34:46",
                          "nodeType": "YulFunctionCall",
                          "src": "3184:34:46"
                        },
                        "nativeSrc": "3184:34:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "3184:34:46"
                      }
                    ]
                  },
                  "name": "abi_encode_t_bool_to_t_bool_fromStack",
                  "nativeSrc": "3115:109:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "value",
                      "nativeSrc": "3162:5:46",
                      "nodeType": "YulTypedName",
                      "src": "3162:5:46",
                      "type": ""
                    },
                    {
                      "name": "pos",
                      "nativeSrc": "3169:3:46",
                      "nodeType": "YulTypedName",
                      "src": "3169:3:46",
                      "type": ""
                    }
                  ],
                  "src": "3115:109:46"
                },
                {
                  "body": {
                    "nativeSrc": "3322:118:46",
                    "nodeType": "YulBlock",
                    "src": "3322:118:46",
                    "statements": [
                      {
                        "nativeSrc": "3332:26:46",
                        "nodeType": "YulAssignment",
                        "src": "3332:26:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "headStart",
                              "nativeSrc": "3344:9:46",
                              "nodeType": "YulIdentifier",
                              "src": "3344:9:46"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "3355:2:46",
                              "nodeType": "YulLiteral",
                              "src": "3355:2:46",
                              "type": "",
                              "value": "32"
                            }
                          ],
                          "functionName": {
                            "name": "add",
                            "nativeSrc": "3340:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "3340:3:46"
                          },
                          "nativeSrc": "3340:18:46",
                          "nodeType": "YulFunctionCall",
                          "src": "3340:18:46"
                        },
                        "variableNames": [
                          {
                            "name": "tail",
                            "nativeSrc": "3332:4:46",
                            "nodeType": "YulIdentifier",
                            "src": "3332:4:46"
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "value0",
                              "nativeSrc": "3406:6:46",
                              "nodeType": "YulIdentifier",
                              "src": "3406:6:46"
                            },
                            {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "3419:9:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "3419:9:46"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "3430:1:46",
                                  "nodeType": "YulLiteral",
                                  "src": "3430:1:46",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "3415:3:46",
                                "nodeType": "YulIdentifier",
                                "src": "3415:3:46"
                              },
                              "nativeSrc": "3415:17:46",
                              "nodeType": "YulFunctionCall",
                              "src": "3415:17:46"
                            }
                          ],
                          "functionName": {
                            "name": "abi_encode_t_bool_to_t_bool_fromStack",
                            "nativeSrc": "3368:37:46",
                            "nodeType": "YulIdentifier",
                            "src": "3368:37:46"
                          },
                          "nativeSrc": "3368:65:46",
                          "nodeType": "YulFunctionCall",
                          "src": "3368:65:46"
                        },
                        "nativeSrc": "3368:65:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "3368:65:46"
                      }
                    ]
                  },
                  "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                  "nativeSrc": "3230:210:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "headStart",
                      "nativeSrc": "3294:9:46",
                      "nodeType": "YulTypedName",
                      "src": "3294:9:46",
                      "type": ""
                    },
                    {
                      "name": "value0",
                      "nativeSrc": "3306:6:46",
                      "nodeType": "YulTypedName",
                      "src": "3306:6:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "tail",
                      "nativeSrc": "3317:4:46",
                      "nodeType": "YulTypedName",
                      "src": "3317:4:46",
                      "type": ""
                    }
                  ],
                  "src": "3230:210:46"
                },
                {
                  "body": {
                    "nativeSrc": "3511:53:46",
                    "nodeType": "YulBlock",
                    "src": "3511:53:46",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "pos",
                              "nativeSrc": "3528:3:46",
                              "nodeType": "YulIdentifier",
                              "src": "3528:3:46"
                            },
                            {
                              "arguments": [
                                {
                                  "name": "value",
                                  "nativeSrc": "3551:5:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "3551:5:46"
                                }
                              ],
                              "functionName": {
                                "name": "cleanup_t_uint256",
                                "nativeSrc": "3533:17:46",
                                "nodeType": "YulIdentifier",
                                "src": "3533:17:46"
                              },
                              "nativeSrc": "3533:24:46",
                              "nodeType": "YulFunctionCall",
                              "src": "3533:24:46"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nativeSrc": "3521:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "3521:6:46"
                          },
                          "nativeSrc": "3521:37:46",
                          "nodeType": "YulFunctionCall",
                          "src": "3521:37:46"
                        },
                        "nativeSrc": "3521:37:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "3521:37:46"
                      }
                    ]
                  },
                  "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                  "nativeSrc": "3446:118:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "value",
                      "nativeSrc": "3499:5:46",
                      "nodeType": "YulTypedName",
                      "src": "3499:5:46",
                      "type": ""
                    },
                    {
                      "name": "pos",
                      "nativeSrc": "3506:3:46",
                      "nodeType": "YulTypedName",
                      "src": "3506:3:46",
                      "type": ""
                    }
                  ],
                  "src": "3446:118:46"
                },
                {
                  "body": {
                    "nativeSrc": "3668:124:46",
                    "nodeType": "YulBlock",
                    "src": "3668:124:46",
                    "statements": [
                      {
                        "nativeSrc": "3678:26:46",
                        "nodeType": "YulAssignment",
                        "src": "3678:26:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "headStart",
                              "nativeSrc": "3690:9:46",
                              "nodeType": "YulIdentifier",
                              "src": "3690:9:46"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "3701:2:46",
                              "nodeType": "YulLiteral",
                              "src": "3701:2:46",
                              "type": "",
                              "value": "32"
                            }
                          ],
                          "functionName": {
                            "name": "add",
                            "nativeSrc": "3686:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "3686:3:46"
                          },
                          "nativeSrc": "3686:18:46",
                          "nodeType": "YulFunctionCall",
                          "src": "3686:18:46"
                        },
                        "variableNames": [
                          {
                            "name": "tail",
                            "nativeSrc": "3678:4:46",
                            "nodeType": "YulIdentifier",
                            "src": "3678:4:46"
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "value0",
                              "nativeSrc": "3758:6:46",
                              "nodeType": "YulIdentifier",
                              "src": "3758:6:46"
                            },
                            {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "3771:9:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "3771:9:46"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "3782:1:46",
                                  "nodeType": "YulLiteral",
                                  "src": "3782:1:46",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "3767:3:46",
                                "nodeType": "YulIdentifier",
                                "src": "3767:3:46"
                              },
                              "nativeSrc": "3767:17:46",
                              "nodeType": "YulFunctionCall",
                              "src": "3767:17:46"
                            }
                          ],
                          "functionName": {
                            "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                            "nativeSrc": "3714:43:46",
                            "nodeType": "YulIdentifier",
                            "src": "3714:43:46"
                          },
                          "nativeSrc": "3714:71:46",
                          "nodeType": "YulFunctionCall",
                          "src": "3714:71:46"
                        },
                        "nativeSrc": "3714:71:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "3714:71:46"
                      }
                    ]
                  },
                  "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                  "nativeSrc": "3570:222:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "headStart",
                      "nativeSrc": "3640:9:46",
                      "nodeType": "YulTypedName",
                      "src": "3640:9:46",
                      "type": ""
                    },
                    {
                      "name": "value0",
                      "nativeSrc": "3652:6:46",
                      "nodeType": "YulTypedName",
                      "src": "3652:6:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "tail",
                      "nativeSrc": "3663:4:46",
                      "nodeType": "YulTypedName",
                      "src": "3663:4:46",
                      "type": ""
                    }
                  ],
                  "src": "3570:222:46"
                },
                {
                  "body": {
                    "nativeSrc": "3898:519:46",
                    "nodeType": "YulBlock",
                    "src": "3898:519:46",
                    "statements": [
                      {
                        "body": {
                          "nativeSrc": "3944:83:46",
                          "nodeType": "YulBlock",
                          "src": "3944:83:46",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [],
                                "functionName": {
                                  "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                  "nativeSrc": "3946:77:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "3946:77:46"
                                },
                                "nativeSrc": "3946:79:46",
                                "nodeType": "YulFunctionCall",
                                "src": "3946:79:46"
                              },
                              "nativeSrc": "3946:79:46",
                              "nodeType": "YulExpressionStatement",
                              "src": "3946:79:46"
                            }
                          ]
                        },
                        "condition": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "name": "dataEnd",
                                  "nativeSrc": "3919:7:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "3919:7:46"
                                },
                                {
                                  "name": "headStart",
                                  "nativeSrc": "3928:9:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "3928:9:46"
                                }
                              ],
                              "functionName": {
                                "name": "sub",
                                "nativeSrc": "3915:3:46",
                                "nodeType": "YulIdentifier",
                                "src": "3915:3:46"
                              },
                              "nativeSrc": "3915:23:46",
                              "nodeType": "YulFunctionCall",
                              "src": "3915:23:46"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "3940:2:46",
                              "nodeType": "YulLiteral",
                              "src": "3940:2:46",
                              "type": "",
                              "value": "96"
                            }
                          ],
                          "functionName": {
                            "name": "slt",
                            "nativeSrc": "3911:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "3911:3:46"
                          },
                          "nativeSrc": "3911:32:46",
                          "nodeType": "YulFunctionCall",
                          "src": "3911:32:46"
                        },
                        "nativeSrc": "3908:119:46",
                        "nodeType": "YulIf",
                        "src": "3908:119:46"
                      },
                      {
                        "nativeSrc": "4037:117:46",
                        "nodeType": "YulBlock",
                        "src": "4037:117:46",
                        "statements": [
                          {
                            "nativeSrc": "4052:15:46",
                            "nodeType": "YulVariableDeclaration",
                            "src": "4052:15:46",
                            "value": {
                              "kind": "number",
                              "nativeSrc": "4066:1:46",
                              "nodeType": "YulLiteral",
                              "src": "4066:1:46",
                              "type": "",
                              "value": "0"
                            },
                            "variables": [
                              {
                                "name": "offset",
                                "nativeSrc": "4056:6:46",
                                "nodeType": "YulTypedName",
                                "src": "4056:6:46",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "nativeSrc": "4081:63:46",
                            "nodeType": "YulAssignment",
                            "src": "4081:63:46",
                            "value": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "4116:9:46",
                                      "nodeType": "YulIdentifier",
                                      "src": "4116:9:46"
                                    },
                                    {
                                      "name": "offset",
                                      "nativeSrc": "4127:6:46",
                                      "nodeType": "YulIdentifier",
                                      "src": "4127:6:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "4112:3:46",
                                    "nodeType": "YulIdentifier",
                                    "src": "4112:3:46"
                                  },
                                  "nativeSrc": "4112:22:46",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4112:22:46"
                                },
                                {
                                  "name": "dataEnd",
                                  "nativeSrc": "4136:7:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "4136:7:46"
                                }
                              ],
                              "functionName": {
                                "name": "abi_decode_t_address",
                                "nativeSrc": "4091:20:46",
                                "nodeType": "YulIdentifier",
                                "src": "4091:20:46"
                              },
                              "nativeSrc": "4091:53:46",
                              "nodeType": "YulFunctionCall",
                              "src": "4091:53:46"
                            },
                            "variableNames": [
                              {
                                "name": "value0",
                                "nativeSrc": "4081:6:46",
                                "nodeType": "YulIdentifier",
                                "src": "4081:6:46"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "nativeSrc": "4164:118:46",
                        "nodeType": "YulBlock",
                        "src": "4164:118:46",
                        "statements": [
                          {
                            "nativeSrc": "4179:16:46",
                            "nodeType": "YulVariableDeclaration",
                            "src": "4179:16:46",
                            "value": {
                              "kind": "number",
                              "nativeSrc": "4193:2:46",
                              "nodeType": "YulLiteral",
                              "src": "4193:2:46",
                              "type": "",
                              "value": "32"
                            },
                            "variables": [
                              {
                                "name": "offset",
                                "nativeSrc": "4183:6:46",
                                "nodeType": "YulTypedName",
                                "src": "4183:6:46",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "nativeSrc": "4209:63:46",
                            "nodeType": "YulAssignment",
                            "src": "4209:63:46",
                            "value": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "4244:9:46",
                                      "nodeType": "YulIdentifier",
                                      "src": "4244:9:46"
                                    },
                                    {
                                      "name": "offset",
                                      "nativeSrc": "4255:6:46",
                                      "nodeType": "YulIdentifier",
                                      "src": "4255:6:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "4240:3:46",
                                    "nodeType": "YulIdentifier",
                                    "src": "4240:3:46"
                                  },
                                  "nativeSrc": "4240:22:46",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4240:22:46"
                                },
                                {
                                  "name": "dataEnd",
                                  "nativeSrc": "4264:7:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "4264:7:46"
                                }
                              ],
                              "functionName": {
                                "name": "abi_decode_t_address",
                                "nativeSrc": "4219:20:46",
                                "nodeType": "YulIdentifier",
                                "src": "4219:20:46"
                              },
                              "nativeSrc": "4219:53:46",
                              "nodeType": "YulFunctionCall",
                              "src": "4219:53:46"
                            },
                            "variableNames": [
                              {
                                "name": "value1",
                                "nativeSrc": "4209:6:46",
                                "nodeType": "YulIdentifier",
                                "src": "4209:6:46"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "nativeSrc": "4292:118:46",
                        "nodeType": "YulBlock",
                        "src": "4292:118:46",
                        "statements": [
                          {
                            "nativeSrc": "4307:16:46",
                            "nodeType": "YulVariableDeclaration",
                            "src": "4307:16:46",
                            "value": {
                              "kind": "number",
                              "nativeSrc": "4321:2:46",
                              "nodeType": "YulLiteral",
                              "src": "4321:2:46",
                              "type": "",
                              "value": "64"
                            },
                            "variables": [
                              {
                                "name": "offset",
                                "nativeSrc": "4311:6:46",
                                "nodeType": "YulTypedName",
                                "src": "4311:6:46",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "nativeSrc": "4337:63:46",
                            "nodeType": "YulAssignment",
                            "src": "4337:63:46",
                            "value": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "4372:9:46",
                                      "nodeType": "YulIdentifier",
                                      "src": "4372:9:46"
                                    },
                                    {
                                      "name": "offset",
                                      "nativeSrc": "4383:6:46",
                                      "nodeType": "YulIdentifier",
                                      "src": "4383:6:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "4368:3:46",
                                    "nodeType": "YulIdentifier",
                                    "src": "4368:3:46"
                                  },
                                  "nativeSrc": "4368:22:46",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4368:22:46"
                                },
                                {
                                  "name": "dataEnd",
                                  "nativeSrc": "4392:7:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "4392:7:46"
                                }
                              ],
                              "functionName": {
                                "name": "abi_decode_t_uint256",
                                "nativeSrc": "4347:20:46",
                                "nodeType": "YulIdentifier",
                                "src": "4347:20:46"
                              },
                              "nativeSrc": "4347:53:46",
                              "nodeType": "YulFunctionCall",
                              "src": "4347:53:46"
                            },
                            "variableNames": [
                              {
                                "name": "value2",
                                "nativeSrc": "4337:6:46",
                                "nodeType": "YulIdentifier",
                                "src": "4337:6:46"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  "name": "abi_decode_tuple_t_addresst_addresst_uint256",
                  "nativeSrc": "3798:619:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "headStart",
                      "nativeSrc": "3852:9:46",
                      "nodeType": "YulTypedName",
                      "src": "3852:9:46",
                      "type": ""
                    },
                    {
                      "name": "dataEnd",
                      "nativeSrc": "3863:7:46",
                      "nodeType": "YulTypedName",
                      "src": "3863:7:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "value0",
                      "nativeSrc": "3875:6:46",
                      "nodeType": "YulTypedName",
                      "src": "3875:6:46",
                      "type": ""
                    },
                    {
                      "name": "value1",
                      "nativeSrc": "3883:6:46",
                      "nodeType": "YulTypedName",
                      "src": "3883:6:46",
                      "type": ""
                    },
                    {
                      "name": "value2",
                      "nativeSrc": "3891:6:46",
                      "nodeType": "YulTypedName",
                      "src": "3891:6:46",
                      "type": ""
                    }
                  ],
                  "src": "3798:619:46"
                },
                {
                  "body": {
                    "nativeSrc": "4466:43:46",
                    "nodeType": "YulBlock",
                    "src": "4466:43:46",
                    "statements": [
                      {
                        "nativeSrc": "4476:27:46",
                        "nodeType": "YulAssignment",
                        "src": "4476:27:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "value",
                              "nativeSrc": "4491:5:46",
                              "nodeType": "YulIdentifier",
                              "src": "4491:5:46"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "4498:4:46",
                              "nodeType": "YulLiteral",
                              "src": "4498:4:46",
                              "type": "",
                              "value": "0xff"
                            }
                          ],
                          "functionName": {
                            "name": "and",
                            "nativeSrc": "4487:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "4487:3:46"
                          },
                          "nativeSrc": "4487:16:46",
                          "nodeType": "YulFunctionCall",
                          "src": "4487:16:46"
                        },
                        "variableNames": [
                          {
                            "name": "cleaned",
                            "nativeSrc": "4476:7:46",
                            "nodeType": "YulIdentifier",
                            "src": "4476:7:46"
                          }
                        ]
                      }
                    ]
                  },
                  "name": "cleanup_t_uint8",
                  "nativeSrc": "4423:86:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "value",
                      "nativeSrc": "4448:5:46",
                      "nodeType": "YulTypedName",
                      "src": "4448:5:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "cleaned",
                      "nativeSrc": "4458:7:46",
                      "nodeType": "YulTypedName",
                      "src": "4458:7:46",
                      "type": ""
                    }
                  ],
                  "src": "4423:86:46"
                },
                {
                  "body": {
                    "nativeSrc": "4576:51:46",
                    "nodeType": "YulBlock",
                    "src": "4576:51:46",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "pos",
                              "nativeSrc": "4593:3:46",
                              "nodeType": "YulIdentifier",
                              "src": "4593:3:46"
                            },
                            {
                              "arguments": [
                                {
                                  "name": "value",
                                  "nativeSrc": "4614:5:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "4614:5:46"
                                }
                              ],
                              "functionName": {
                                "name": "cleanup_t_uint8",
                                "nativeSrc": "4598:15:46",
                                "nodeType": "YulIdentifier",
                                "src": "4598:15:46"
                              },
                              "nativeSrc": "4598:22:46",
                              "nodeType": "YulFunctionCall",
                              "src": "4598:22:46"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nativeSrc": "4586:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "4586:6:46"
                          },
                          "nativeSrc": "4586:35:46",
                          "nodeType": "YulFunctionCall",
                          "src": "4586:35:46"
                        },
                        "nativeSrc": "4586:35:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "4586:35:46"
                      }
                    ]
                  },
                  "name": "abi_encode_t_uint8_to_t_uint8_fromStack",
                  "nativeSrc": "4515:112:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "value",
                      "nativeSrc": "4564:5:46",
                      "nodeType": "YulTypedName",
                      "src": "4564:5:46",
                      "type": ""
                    },
                    {
                      "name": "pos",
                      "nativeSrc": "4571:3:46",
                      "nodeType": "YulTypedName",
                      "src": "4571:3:46",
                      "type": ""
                    }
                  ],
                  "src": "4515:112:46"
                },
                {
                  "body": {
                    "nativeSrc": "4727:120:46",
                    "nodeType": "YulBlock",
                    "src": "4727:120:46",
                    "statements": [
                      {
                        "nativeSrc": "4737:26:46",
                        "nodeType": "YulAssignment",
                        "src": "4737:26:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "headStart",
                              "nativeSrc": "4749:9:46",
                              "nodeType": "YulIdentifier",
                              "src": "4749:9:46"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "4760:2:46",
                              "nodeType": "YulLiteral",
                              "src": "4760:2:46",
                              "type": "",
                              "value": "32"
                            }
                          ],
                          "functionName": {
                            "name": "add",
                            "nativeSrc": "4745:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "4745:3:46"
                          },
                          "nativeSrc": "4745:18:46",
                          "nodeType": "YulFunctionCall",
                          "src": "4745:18:46"
                        },
                        "variableNames": [
                          {
                            "name": "tail",
                            "nativeSrc": "4737:4:46",
                            "nodeType": "YulIdentifier",
                            "src": "4737:4:46"
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "value0",
                              "nativeSrc": "4813:6:46",
                              "nodeType": "YulIdentifier",
                              "src": "4813:6:46"
                            },
                            {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "4826:9:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "4826:9:46"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "4837:1:46",
                                  "nodeType": "YulLiteral",
                                  "src": "4837:1:46",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "4822:3:46",
                                "nodeType": "YulIdentifier",
                                "src": "4822:3:46"
                              },
                              "nativeSrc": "4822:17:46",
                              "nodeType": "YulFunctionCall",
                              "src": "4822:17:46"
                            }
                          ],
                          "functionName": {
                            "name": "abi_encode_t_uint8_to_t_uint8_fromStack",
                            "nativeSrc": "4773:39:46",
                            "nodeType": "YulIdentifier",
                            "src": "4773:39:46"
                          },
                          "nativeSrc": "4773:67:46",
                          "nodeType": "YulFunctionCall",
                          "src": "4773:67:46"
                        },
                        "nativeSrc": "4773:67:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "4773:67:46"
                      }
                    ]
                  },
                  "name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
                  "nativeSrc": "4633:214:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "headStart",
                      "nativeSrc": "4699:9:46",
                      "nodeType": "YulTypedName",
                      "src": "4699:9:46",
                      "type": ""
                    },
                    {
                      "name": "value0",
                      "nativeSrc": "4711:6:46",
                      "nodeType": "YulTypedName",
                      "src": "4711:6:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "tail",
                      "nativeSrc": "4722:4:46",
                      "nodeType": "YulTypedName",
                      "src": "4722:4:46",
                      "type": ""
                    }
                  ],
                  "src": "4633:214:46"
                },
                {
                  "body": {
                    "nativeSrc": "4919:263:46",
                    "nodeType": "YulBlock",
                    "src": "4919:263:46",
                    "statements": [
                      {
                        "body": {
                          "nativeSrc": "4965:83:46",
                          "nodeType": "YulBlock",
                          "src": "4965:83:46",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [],
                                "functionName": {
                                  "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                  "nativeSrc": "4967:77:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "4967:77:46"
                                },
                                "nativeSrc": "4967:79:46",
                                "nodeType": "YulFunctionCall",
                                "src": "4967:79:46"
                              },
                              "nativeSrc": "4967:79:46",
                              "nodeType": "YulExpressionStatement",
                              "src": "4967:79:46"
                            }
                          ]
                        },
                        "condition": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "name": "dataEnd",
                                  "nativeSrc": "4940:7:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "4940:7:46"
                                },
                                {
                                  "name": "headStart",
                                  "nativeSrc": "4949:9:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "4949:9:46"
                                }
                              ],
                              "functionName": {
                                "name": "sub",
                                "nativeSrc": "4936:3:46",
                                "nodeType": "YulIdentifier",
                                "src": "4936:3:46"
                              },
                              "nativeSrc": "4936:23:46",
                              "nodeType": "YulFunctionCall",
                              "src": "4936:23:46"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "4961:2:46",
                              "nodeType": "YulLiteral",
                              "src": "4961:2:46",
                              "type": "",
                              "value": "32"
                            }
                          ],
                          "functionName": {
                            "name": "slt",
                            "nativeSrc": "4932:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "4932:3:46"
                          },
                          "nativeSrc": "4932:32:46",
                          "nodeType": "YulFunctionCall",
                          "src": "4932:32:46"
                        },
                        "nativeSrc": "4929:119:46",
                        "nodeType": "YulIf",
                        "src": "4929:119:46"
                      },
                      {
                        "nativeSrc": "5058:117:46",
                        "nodeType": "YulBlock",
                        "src": "5058:117:46",
                        "statements": [
                          {
                            "nativeSrc": "5073:15:46",
                            "nodeType": "YulVariableDeclaration",
                            "src": "5073:15:46",
                            "value": {
                              "kind": "number",
                              "nativeSrc": "5087:1:46",
                              "nodeType": "YulLiteral",
                              "src": "5087:1:46",
                              "type": "",
                              "value": "0"
                            },
                            "variables": [
                              {
                                "name": "offset",
                                "nativeSrc": "5077:6:46",
                                "nodeType": "YulTypedName",
                                "src": "5077:6:46",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "nativeSrc": "5102:63:46",
                            "nodeType": "YulAssignment",
                            "src": "5102:63:46",
                            "value": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "5137:9:46",
                                      "nodeType": "YulIdentifier",
                                      "src": "5137:9:46"
                                    },
                                    {
                                      "name": "offset",
                                      "nativeSrc": "5148:6:46",
                                      "nodeType": "YulIdentifier",
                                      "src": "5148:6:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "5133:3:46",
                                    "nodeType": "YulIdentifier",
                                    "src": "5133:3:46"
                                  },
                                  "nativeSrc": "5133:22:46",
                                  "nodeType": "YulFunctionCall",
                                  "src": "5133:22:46"
                                },
                                {
                                  "name": "dataEnd",
                                  "nativeSrc": "5157:7:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "5157:7:46"
                                }
                              ],
                              "functionName": {
                                "name": "abi_decode_t_address",
                                "nativeSrc": "5112:20:46",
                                "nodeType": "YulIdentifier",
                                "src": "5112:20:46"
                              },
                              "nativeSrc": "5112:53:46",
                              "nodeType": "YulFunctionCall",
                              "src": "5112:53:46"
                            },
                            "variableNames": [
                              {
                                "name": "value0",
                                "nativeSrc": "5102:6:46",
                                "nodeType": "YulIdentifier",
                                "src": "5102:6:46"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  "name": "abi_decode_tuple_t_address",
                  "nativeSrc": "4853:329:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "headStart",
                      "nativeSrc": "4889:9:46",
                      "nodeType": "YulTypedName",
                      "src": "4889:9:46",
                      "type": ""
                    },
                    {
                      "name": "dataEnd",
                      "nativeSrc": "4900:7:46",
                      "nodeType": "YulTypedName",
                      "src": "4900:7:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "value0",
                      "nativeSrc": "4912:6:46",
                      "nodeType": "YulTypedName",
                      "src": "4912:6:46",
                      "type": ""
                    }
                  ],
                  "src": "4853:329:46"
                },
                {
                  "body": {
                    "nativeSrc": "5253:53:46",
                    "nodeType": "YulBlock",
                    "src": "5253:53:46",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "pos",
                              "nativeSrc": "5270:3:46",
                              "nodeType": "YulIdentifier",
                              "src": "5270:3:46"
                            },
                            {
                              "arguments": [
                                {
                                  "name": "value",
                                  "nativeSrc": "5293:5:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "5293:5:46"
                                }
                              ],
                              "functionName": {
                                "name": "cleanup_t_address",
                                "nativeSrc": "5275:17:46",
                                "nodeType": "YulIdentifier",
                                "src": "5275:17:46"
                              },
                              "nativeSrc": "5275:24:46",
                              "nodeType": "YulFunctionCall",
                              "src": "5275:24:46"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nativeSrc": "5263:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "5263:6:46"
                          },
                          "nativeSrc": "5263:37:46",
                          "nodeType": "YulFunctionCall",
                          "src": "5263:37:46"
                        },
                        "nativeSrc": "5263:37:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "5263:37:46"
                      }
                    ]
                  },
                  "name": "abi_encode_t_address_to_t_address_fromStack",
                  "nativeSrc": "5188:118:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "value",
                      "nativeSrc": "5241:5:46",
                      "nodeType": "YulTypedName",
                      "src": "5241:5:46",
                      "type": ""
                    },
                    {
                      "name": "pos",
                      "nativeSrc": "5248:3:46",
                      "nodeType": "YulTypedName",
                      "src": "5248:3:46",
                      "type": ""
                    }
                  ],
                  "src": "5188:118:46"
                },
                {
                  "body": {
                    "nativeSrc": "5410:124:46",
                    "nodeType": "YulBlock",
                    "src": "5410:124:46",
                    "statements": [
                      {
                        "nativeSrc": "5420:26:46",
                        "nodeType": "YulAssignment",
                        "src": "5420:26:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "headStart",
                              "nativeSrc": "5432:9:46",
                              "nodeType": "YulIdentifier",
                              "src": "5432:9:46"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "5443:2:46",
                              "nodeType": "YulLiteral",
                              "src": "5443:2:46",
                              "type": "",
                              "value": "32"
                            }
                          ],
                          "functionName": {
                            "name": "add",
                            "nativeSrc": "5428:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "5428:3:46"
                          },
                          "nativeSrc": "5428:18:46",
                          "nodeType": "YulFunctionCall",
                          "src": "5428:18:46"
                        },
                        "variableNames": [
                          {
                            "name": "tail",
                            "nativeSrc": "5420:4:46",
                            "nodeType": "YulIdentifier",
                            "src": "5420:4:46"
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "value0",
                              "nativeSrc": "5500:6:46",
                              "nodeType": "YulIdentifier",
                              "src": "5500:6:46"
                            },
                            {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "5513:9:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "5513:9:46"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "5524:1:46",
                                  "nodeType": "YulLiteral",
                                  "src": "5524:1:46",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "5509:3:46",
                                "nodeType": "YulIdentifier",
                                "src": "5509:3:46"
                              },
                              "nativeSrc": "5509:17:46",
                              "nodeType": "YulFunctionCall",
                              "src": "5509:17:46"
                            }
                          ],
                          "functionName": {
                            "name": "abi_encode_t_address_to_t_address_fromStack",
                            "nativeSrc": "5456:43:46",
                            "nodeType": "YulIdentifier",
                            "src": "5456:43:46"
                          },
                          "nativeSrc": "5456:71:46",
                          "nodeType": "YulFunctionCall",
                          "src": "5456:71:46"
                        },
                        "nativeSrc": "5456:71:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "5456:71:46"
                      }
                    ]
                  },
                  "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                  "nativeSrc": "5312:222:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "headStart",
                      "nativeSrc": "5382:9:46",
                      "nodeType": "YulTypedName",
                      "src": "5382:9:46",
                      "type": ""
                    },
                    {
                      "name": "value0",
                      "nativeSrc": "5394:6:46",
                      "nodeType": "YulTypedName",
                      "src": "5394:6:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "tail",
                      "nativeSrc": "5405:4:46",
                      "nodeType": "YulTypedName",
                      "src": "5405:4:46",
                      "type": ""
                    }
                  ],
                  "src": "5312:222:46"
                },
                {
                  "body": {
                    "nativeSrc": "5623:391:46",
                    "nodeType": "YulBlock",
                    "src": "5623:391:46",
                    "statements": [
                      {
                        "body": {
                          "nativeSrc": "5669:83:46",
                          "nodeType": "YulBlock",
                          "src": "5669:83:46",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [],
                                "functionName": {
                                  "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                  "nativeSrc": "5671:77:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "5671:77:46"
                                },
                                "nativeSrc": "5671:79:46",
                                "nodeType": "YulFunctionCall",
                                "src": "5671:79:46"
                              },
                              "nativeSrc": "5671:79:46",
                              "nodeType": "YulExpressionStatement",
                              "src": "5671:79:46"
                            }
                          ]
                        },
                        "condition": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "name": "dataEnd",
                                  "nativeSrc": "5644:7:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "5644:7:46"
                                },
                                {
                                  "name": "headStart",
                                  "nativeSrc": "5653:9:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "5653:9:46"
                                }
                              ],
                              "functionName": {
                                "name": "sub",
                                "nativeSrc": "5640:3:46",
                                "nodeType": "YulIdentifier",
                                "src": "5640:3:46"
                              },
                              "nativeSrc": "5640:23:46",
                              "nodeType": "YulFunctionCall",
                              "src": "5640:23:46"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "5665:2:46",
                              "nodeType": "YulLiteral",
                              "src": "5665:2:46",
                              "type": "",
                              "value": "64"
                            }
                          ],
                          "functionName": {
                            "name": "slt",
                            "nativeSrc": "5636:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "5636:3:46"
                          },
                          "nativeSrc": "5636:32:46",
                          "nodeType": "YulFunctionCall",
                          "src": "5636:32:46"
                        },
                        "nativeSrc": "5633:119:46",
                        "nodeType": "YulIf",
                        "src": "5633:119:46"
                      },
                      {
                        "nativeSrc": "5762:117:46",
                        "nodeType": "YulBlock",
                        "src": "5762:117:46",
                        "statements": [
                          {
                            "nativeSrc": "5777:15:46",
                            "nodeType": "YulVariableDeclaration",
                            "src": "5777:15:46",
                            "value": {
                              "kind": "number",
                              "nativeSrc": "5791:1:46",
                              "nodeType": "YulLiteral",
                              "src": "5791:1:46",
                              "type": "",
                              "value": "0"
                            },
                            "variables": [
                              {
                                "name": "offset",
                                "nativeSrc": "5781:6:46",
                                "nodeType": "YulTypedName",
                                "src": "5781:6:46",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "nativeSrc": "5806:63:46",
                            "nodeType": "YulAssignment",
                            "src": "5806:63:46",
                            "value": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "5841:9:46",
                                      "nodeType": "YulIdentifier",
                                      "src": "5841:9:46"
                                    },
                                    {
                                      "name": "offset",
                                      "nativeSrc": "5852:6:46",
                                      "nodeType": "YulIdentifier",
                                      "src": "5852:6:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "5837:3:46",
                                    "nodeType": "YulIdentifier",
                                    "src": "5837:3:46"
                                  },
                                  "nativeSrc": "5837:22:46",
                                  "nodeType": "YulFunctionCall",
                                  "src": "5837:22:46"
                                },
                                {
                                  "name": "dataEnd",
                                  "nativeSrc": "5861:7:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "5861:7:46"
                                }
                              ],
                              "functionName": {
                                "name": "abi_decode_t_address",
                                "nativeSrc": "5816:20:46",
                                "nodeType": "YulIdentifier",
                                "src": "5816:20:46"
                              },
                              "nativeSrc": "5816:53:46",
                              "nodeType": "YulFunctionCall",
                              "src": "5816:53:46"
                            },
                            "variableNames": [
                              {
                                "name": "value0",
                                "nativeSrc": "5806:6:46",
                                "nodeType": "YulIdentifier",
                                "src": "5806:6:46"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "nativeSrc": "5889:118:46",
                        "nodeType": "YulBlock",
                        "src": "5889:118:46",
                        "statements": [
                          {
                            "nativeSrc": "5904:16:46",
                            "nodeType": "YulVariableDeclaration",
                            "src": "5904:16:46",
                            "value": {
                              "kind": "number",
                              "nativeSrc": "5918:2:46",
                              "nodeType": "YulLiteral",
                              "src": "5918:2:46",
                              "type": "",
                              "value": "32"
                            },
                            "variables": [
                              {
                                "name": "offset",
                                "nativeSrc": "5908:6:46",
                                "nodeType": "YulTypedName",
                                "src": "5908:6:46",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "nativeSrc": "5934:63:46",
                            "nodeType": "YulAssignment",
                            "src": "5934:63:46",
                            "value": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "5969:9:46",
                                      "nodeType": "YulIdentifier",
                                      "src": "5969:9:46"
                                    },
                                    {
                                      "name": "offset",
                                      "nativeSrc": "5980:6:46",
                                      "nodeType": "YulIdentifier",
                                      "src": "5980:6:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "5965:3:46",
                                    "nodeType": "YulIdentifier",
                                    "src": "5965:3:46"
                                  },
                                  "nativeSrc": "5965:22:46",
                                  "nodeType": "YulFunctionCall",
                                  "src": "5965:22:46"
                                },
                                {
                                  "name": "dataEnd",
                                  "nativeSrc": "5989:7:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "5989:7:46"
                                }
                              ],
                              "functionName": {
                                "name": "abi_decode_t_address",
                                "nativeSrc": "5944:20:46",
                                "nodeType": "YulIdentifier",
                                "src": "5944:20:46"
                              },
                              "nativeSrc": "5944:53:46",
                              "nodeType": "YulFunctionCall",
                              "src": "5944:53:46"
                            },
                            "variableNames": [
                              {
                                "name": "value1",
                                "nativeSrc": "5934:6:46",
                                "nodeType": "YulIdentifier",
                                "src": "5934:6:46"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  "name": "abi_decode_tuple_t_addresst_address",
                  "nativeSrc": "5540:474:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "headStart",
                      "nativeSrc": "5585:9:46",
                      "nodeType": "YulTypedName",
                      "src": "5585:9:46",
                      "type": ""
                    },
                    {
                      "name": "dataEnd",
                      "nativeSrc": "5596:7:46",
                      "nodeType": "YulTypedName",
                      "src": "5596:7:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "value0",
                      "nativeSrc": "5608:6:46",
                      "nodeType": "YulTypedName",
                      "src": "5608:6:46",
                      "type": ""
                    },
                    {
                      "name": "value1",
                      "nativeSrc": "5616:6:46",
                      "nodeType": "YulTypedName",
                      "src": "5616:6:46",
                      "type": ""
                    }
                  ],
                  "src": "5540:474:46"
                },
                {
                  "body": {
                    "nativeSrc": "6048:152:46",
                    "nodeType": "YulBlock",
                    "src": "6048:152:46",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nativeSrc": "6065:1:46",
                              "nodeType": "YulLiteral",
                              "src": "6065:1:46",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "6068:77:46",
                              "nodeType": "YulLiteral",
                              "src": "6068:77:46",
                              "type": "",
                              "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nativeSrc": "6058:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "6058:6:46"
                          },
                          "nativeSrc": "6058:88:46",
                          "nodeType": "YulFunctionCall",
                          "src": "6058:88:46"
                        },
                        "nativeSrc": "6058:88:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "6058:88:46"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nativeSrc": "6162:1:46",
                              "nodeType": "YulLiteral",
                              "src": "6162:1:46",
                              "type": "",
                              "value": "4"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "6165:4:46",
                              "nodeType": "YulLiteral",
                              "src": "6165:4:46",
                              "type": "",
                              "value": "0x22"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nativeSrc": "6155:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "6155:6:46"
                          },
                          "nativeSrc": "6155:15:46",
                          "nodeType": "YulFunctionCall",
                          "src": "6155:15:46"
                        },
                        "nativeSrc": "6155:15:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "6155:15:46"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nativeSrc": "6186:1:46",
                              "nodeType": "YulLiteral",
                              "src": "6186:1:46",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "6189:4:46",
                              "nodeType": "YulLiteral",
                              "src": "6189:4:46",
                              "type": "",
                              "value": "0x24"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nativeSrc": "6179:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "6179:6:46"
                          },
                          "nativeSrc": "6179:15:46",
                          "nodeType": "YulFunctionCall",
                          "src": "6179:15:46"
                        },
                        "nativeSrc": "6179:15:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "6179:15:46"
                      }
                    ]
                  },
                  "name": "panic_error_0x22",
                  "nativeSrc": "6020:180:46",
                  "nodeType": "YulFunctionDefinition",
                  "src": "6020:180:46"
                },
                {
                  "body": {
                    "nativeSrc": "6257:269:46",
                    "nodeType": "YulBlock",
                    "src": "6257:269:46",
                    "statements": [
                      {
                        "nativeSrc": "6267:22:46",
                        "nodeType": "YulAssignment",
                        "src": "6267:22:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "data",
                              "nativeSrc": "6281:4:46",
                              "nodeType": "YulIdentifier",
                              "src": "6281:4:46"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "6287:1:46",
                              "nodeType": "YulLiteral",
                              "src": "6287:1:46",
                              "type": "",
                              "value": "2"
                            }
                          ],
                          "functionName": {
                            "name": "div",
                            "nativeSrc": "6277:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "6277:3:46"
                          },
                          "nativeSrc": "6277:12:46",
                          "nodeType": "YulFunctionCall",
                          "src": "6277:12:46"
                        },
                        "variableNames": [
                          {
                            "name": "length",
                            "nativeSrc": "6267:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "6267:6:46"
                          }
                        ]
                      },
                      {
                        "nativeSrc": "6298:38:46",
                        "nodeType": "YulVariableDeclaration",
                        "src": "6298:38:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "data",
                              "nativeSrc": "6328:4:46",
                              "nodeType": "YulIdentifier",
                              "src": "6328:4:46"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "6334:1:46",
                              "nodeType": "YulLiteral",
                              "src": "6334:1:46",
                              "type": "",
                              "value": "1"
                            }
                          ],
                          "functionName": {
                            "name": "and",
                            "nativeSrc": "6324:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "6324:3:46"
                          },
                          "nativeSrc": "6324:12:46",
                          "nodeType": "YulFunctionCall",
                          "src": "6324:12:46"
                        },
                        "variables": [
                          {
                            "name": "outOfPlaceEncoding",
                            "nativeSrc": "6302:18:46",
                            "nodeType": "YulTypedName",
                            "src": "6302:18:46",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "body": {
                          "nativeSrc": "6375:51:46",
                          "nodeType": "YulBlock",
                          "src": "6375:51:46",
                          "statements": [
                            {
                              "nativeSrc": "6389:27:46",
                              "nodeType": "YulAssignment",
                              "src": "6389:27:46",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nativeSrc": "6403:6:46",
                                    "nodeType": "YulIdentifier",
                                    "src": "6403:6:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "6411:4:46",
                                    "nodeType": "YulLiteral",
                                    "src": "6411:4:46",
                                    "type": "",
                                    "value": "0x7f"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nativeSrc": "6399:3:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "6399:3:46"
                                },
                                "nativeSrc": "6399:17:46",
                                "nodeType": "YulFunctionCall",
                                "src": "6399:17:46"
                              },
                              "variableNames": [
                                {
                                  "name": "length",
                                  "nativeSrc": "6389:6:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "6389:6:46"
                                }
                              ]
                            }
                          ]
                        },
                        "condition": {
                          "arguments": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nativeSrc": "6355:18:46",
                              "nodeType": "YulIdentifier",
                              "src": "6355:18:46"
                            }
                          ],
                          "functionName": {
                            "name": "iszero",
                            "nativeSrc": "6348:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "6348:6:46"
                          },
                          "nativeSrc": "6348:26:46",
                          "nodeType": "YulFunctionCall",
                          "src": "6348:26:46"
                        },
                        "nativeSrc": "6345:81:46",
                        "nodeType": "YulIf",
                        "src": "6345:81:46"
                      },
                      {
                        "body": {
                          "nativeSrc": "6478:42:46",
                          "nodeType": "YulBlock",
                          "src": "6478:42:46",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [],
                                "functionName": {
                                  "name": "panic_error_0x22",
                                  "nativeSrc": "6492:16:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "6492:16:46"
                                },
                                "nativeSrc": "6492:18:46",
                                "nodeType": "YulFunctionCall",
                                "src": "6492:18:46"
                              },
                              "nativeSrc": "6492:18:46",
                              "nodeType": "YulExpressionStatement",
                              "src": "6492:18:46"
                            }
                          ]
                        },
                        "condition": {
                          "arguments": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nativeSrc": "6442:18:46",
                              "nodeType": "YulIdentifier",
                              "src": "6442:18:46"
                            },
                            {
                              "arguments": [
                                {
                                  "name": "length",
                                  "nativeSrc": "6465:6:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "6465:6:46"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "6473:2:46",
                                  "nodeType": "YulLiteral",
                                  "src": "6473:2:46",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "lt",
                                "nativeSrc": "6462:2:46",
                                "nodeType": "YulIdentifier",
                                "src": "6462:2:46"
                              },
                              "nativeSrc": "6462:14:46",
                              "nodeType": "YulFunctionCall",
                              "src": "6462:14:46"
                            }
                          ],
                          "functionName": {
                            "name": "eq",
                            "nativeSrc": "6439:2:46",
                            "nodeType": "YulIdentifier",
                            "src": "6439:2:46"
                          },
                          "nativeSrc": "6439:38:46",
                          "nodeType": "YulFunctionCall",
                          "src": "6439:38:46"
                        },
                        "nativeSrc": "6436:84:46",
                        "nodeType": "YulIf",
                        "src": "6436:84:46"
                      }
                    ]
                  },
                  "name": "extract_byte_array_length",
                  "nativeSrc": "6206:320:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "data",
                      "nativeSrc": "6241:4:46",
                      "nodeType": "YulTypedName",
                      "src": "6241:4:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "length",
                      "nativeSrc": "6250:6:46",
                      "nodeType": "YulTypedName",
                      "src": "6250:6:46",
                      "type": ""
                    }
                  ],
                  "src": "6206:320:46"
                },
                {
                  "body": {
                    "nativeSrc": "6638:61:46",
                    "nodeType": "YulBlock",
                    "src": "6638:61:46",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "name": "memPtr",
                                  "nativeSrc": "6660:6:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "6660:6:46"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "6668:1:46",
                                  "nodeType": "YulLiteral",
                                  "src": "6668:1:46",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "6656:3:46",
                                "nodeType": "YulIdentifier",
                                "src": "6656:3:46"
                              },
                              "nativeSrc": "6656:14:46",
                              "nodeType": "YulFunctionCall",
                              "src": "6656:14:46"
                            },
                            {
                              "hexValue": "4e6f74204167656e74204163636f756e74",
                              "kind": "string",
                              "nativeSrc": "6672:19:46",
                              "nodeType": "YulLiteral",
                              "src": "6672:19:46",
                              "type": "",
                              "value": "Not Agent Account"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nativeSrc": "6649:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "6649:6:46"
                          },
                          "nativeSrc": "6649:43:46",
                          "nodeType": "YulFunctionCall",
                          "src": "6649:43:46"
                        },
                        "nativeSrc": "6649:43:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "6649:43:46"
                      }
                    ]
                  },
                  "name": "store_literal_in_memory_7c1f108e6012ed3a538bcd7e1438e9b1f83f766b2cc24186029e2132f8d9cea8",
                  "nativeSrc": "6532:167:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "memPtr",
                      "nativeSrc": "6630:6:46",
                      "nodeType": "YulTypedName",
                      "src": "6630:6:46",
                      "type": ""
                    }
                  ],
                  "src": "6532:167:46"
                },
                {
                  "body": {
                    "nativeSrc": "6851:220:46",
                    "nodeType": "YulBlock",
                    "src": "6851:220:46",
                    "statements": [
                      {
                        "nativeSrc": "6861:74:46",
                        "nodeType": "YulAssignment",
                        "src": "6861:74:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "pos",
                              "nativeSrc": "6927:3:46",
                              "nodeType": "YulIdentifier",
                              "src": "6927:3:46"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "6932:2:46",
                              "nodeType": "YulLiteral",
                              "src": "6932:2:46",
                              "type": "",
                              "value": "17"
                            }
                          ],
                          "functionName": {
                            "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                            "nativeSrc": "6868:58:46",
                            "nodeType": "YulIdentifier",
                            "src": "6868:58:46"
                          },
                          "nativeSrc": "6868:67:46",
                          "nodeType": "YulFunctionCall",
                          "src": "6868:67:46"
                        },
                        "variableNames": [
                          {
                            "name": "pos",
                            "nativeSrc": "6861:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "6861:3:46"
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "pos",
                              "nativeSrc": "7033:3:46",
                              "nodeType": "YulIdentifier",
                              "src": "7033:3:46"
                            }
                          ],
                          "functionName": {
                            "name": "store_literal_in_memory_7c1f108e6012ed3a538bcd7e1438e9b1f83f766b2cc24186029e2132f8d9cea8",
                            "nativeSrc": "6944:88:46",
                            "nodeType": "YulIdentifier",
                            "src": "6944:88:46"
                          },
                          "nativeSrc": "6944:93:46",
                          "nodeType": "YulFunctionCall",
                          "src": "6944:93:46"
                        },
                        "nativeSrc": "6944:93:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "6944:93:46"
                      },
                      {
                        "nativeSrc": "7046:19:46",
                        "nodeType": "YulAssignment",
                        "src": "7046:19:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "pos",
                              "nativeSrc": "7057:3:46",
                              "nodeType": "YulIdentifier",
                              "src": "7057:3:46"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "7062:2:46",
                              "nodeType": "YulLiteral",
                              "src": "7062:2:46",
                              "type": "",
                              "value": "32"
                            }
                          ],
                          "functionName": {
                            "name": "add",
                            "nativeSrc": "7053:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "7053:3:46"
                          },
                          "nativeSrc": "7053:12:46",
                          "nodeType": "YulFunctionCall",
                          "src": "7053:12:46"
                        },
                        "variableNames": [
                          {
                            "name": "end",
                            "nativeSrc": "7046:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "7046:3:46"
                          }
                        ]
                      }
                    ]
                  },
                  "name": "abi_encode_t_stringliteral_7c1f108e6012ed3a538bcd7e1438e9b1f83f766b2cc24186029e2132f8d9cea8_to_t_string_memory_ptr_fromStack",
                  "nativeSrc": "6705:366:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "pos",
                      "nativeSrc": "6839:3:46",
                      "nodeType": "YulTypedName",
                      "src": "6839:3:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "end",
                      "nativeSrc": "6847:3:46",
                      "nodeType": "YulTypedName",
                      "src": "6847:3:46",
                      "type": ""
                    }
                  ],
                  "src": "6705:366:46"
                },
                {
                  "body": {
                    "nativeSrc": "7248:248:46",
                    "nodeType": "YulBlock",
                    "src": "7248:248:46",
                    "statements": [
                      {
                        "nativeSrc": "7258:26:46",
                        "nodeType": "YulAssignment",
                        "src": "7258:26:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "headStart",
                              "nativeSrc": "7270:9:46",
                              "nodeType": "YulIdentifier",
                              "src": "7270:9:46"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "7281:2:46",
                              "nodeType": "YulLiteral",
                              "src": "7281:2:46",
                              "type": "",
                              "value": "32"
                            }
                          ],
                          "functionName": {
                            "name": "add",
                            "nativeSrc": "7266:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "7266:3:46"
                          },
                          "nativeSrc": "7266:18:46",
                          "nodeType": "YulFunctionCall",
                          "src": "7266:18:46"
                        },
                        "variableNames": [
                          {
                            "name": "tail",
                            "nativeSrc": "7258:4:46",
                            "nodeType": "YulIdentifier",
                            "src": "7258:4:46"
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "7305:9:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "7305:9:46"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "7316:1:46",
                                  "nodeType": "YulLiteral",
                                  "src": "7316:1:46",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "7301:3:46",
                                "nodeType": "YulIdentifier",
                                "src": "7301:3:46"
                              },
                              "nativeSrc": "7301:17:46",
                              "nodeType": "YulFunctionCall",
                              "src": "7301:17:46"
                            },
                            {
                              "arguments": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "7324:4:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "7324:4:46"
                                },
                                {
                                  "name": "headStart",
                                  "nativeSrc": "7330:9:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "7330:9:46"
                                }
                              ],
                              "functionName": {
                                "name": "sub",
                                "nativeSrc": "7320:3:46",
                                "nodeType": "YulIdentifier",
                                "src": "7320:3:46"
                              },
                              "nativeSrc": "7320:20:46",
                              "nodeType": "YulFunctionCall",
                              "src": "7320:20:46"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nativeSrc": "7294:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "7294:6:46"
                          },
                          "nativeSrc": "7294:47:46",
                          "nodeType": "YulFunctionCall",
                          "src": "7294:47:46"
                        },
                        "nativeSrc": "7294:47:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "7294:47:46"
                      },
                      {
                        "nativeSrc": "7350:139:46",
                        "nodeType": "YulAssignment",
                        "src": "7350:139:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "tail",
                              "nativeSrc": "7484:4:46",
                              "nodeType": "YulIdentifier",
                              "src": "7484:4:46"
                            }
                          ],
                          "functionName": {
                            "name": "abi_encode_t_stringliteral_7c1f108e6012ed3a538bcd7e1438e9b1f83f766b2cc24186029e2132f8d9cea8_to_t_string_memory_ptr_fromStack",
                            "nativeSrc": "7358:124:46",
                            "nodeType": "YulIdentifier",
                            "src": "7358:124:46"
                          },
                          "nativeSrc": "7358:131:46",
                          "nodeType": "YulFunctionCall",
                          "src": "7358:131:46"
                        },
                        "variableNames": [
                          {
                            "name": "tail",
                            "nativeSrc": "7350:4:46",
                            "nodeType": "YulIdentifier",
                            "src": "7350:4:46"
                          }
                        ]
                      }
                    ]
                  },
                  "name": "abi_encode_tuple_t_stringliteral_7c1f108e6012ed3a538bcd7e1438e9b1f83f766b2cc24186029e2132f8d9cea8__to_t_string_memory_ptr__fromStack_reversed",
                  "nativeSrc": "7077:419:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "headStart",
                      "nativeSrc": "7228:9:46",
                      "nodeType": "YulTypedName",
                      "src": "7228:9:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "tail",
                      "nativeSrc": "7243:4:46",
                      "nodeType": "YulTypedName",
                      "src": "7243:4:46",
                      "type": ""
                    }
                  ],
                  "src": "7077:419:46"
                },
                {
                  "body": {
                    "nativeSrc": "7656:288:46",
                    "nodeType": "YulBlock",
                    "src": "7656:288:46",
                    "statements": [
                      {
                        "nativeSrc": "7666:26:46",
                        "nodeType": "YulAssignment",
                        "src": "7666:26:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "headStart",
                              "nativeSrc": "7678:9:46",
                              "nodeType": "YulIdentifier",
                              "src": "7678:9:46"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "7689:2:46",
                              "nodeType": "YulLiteral",
                              "src": "7689:2:46",
                              "type": "",
                              "value": "96"
                            }
                          ],
                          "functionName": {
                            "name": "add",
                            "nativeSrc": "7674:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "7674:3:46"
                          },
                          "nativeSrc": "7674:18:46",
                          "nodeType": "YulFunctionCall",
                          "src": "7674:18:46"
                        },
                        "variableNames": [
                          {
                            "name": "tail",
                            "nativeSrc": "7666:4:46",
                            "nodeType": "YulIdentifier",
                            "src": "7666:4:46"
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "value0",
                              "nativeSrc": "7746:6:46",
                              "nodeType": "YulIdentifier",
                              "src": "7746:6:46"
                            },
                            {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "7759:9:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "7759:9:46"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "7770:1:46",
                                  "nodeType": "YulLiteral",
                                  "src": "7770:1:46",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "7755:3:46",
                                "nodeType": "YulIdentifier",
                                "src": "7755:3:46"
                              },
                              "nativeSrc": "7755:17:46",
                              "nodeType": "YulFunctionCall",
                              "src": "7755:17:46"
                            }
                          ],
                          "functionName": {
                            "name": "abi_encode_t_address_to_t_address_fromStack",
                            "nativeSrc": "7702:43:46",
                            "nodeType": "YulIdentifier",
                            "src": "7702:43:46"
                          },
                          "nativeSrc": "7702:71:46",
                          "nodeType": "YulFunctionCall",
                          "src": "7702:71:46"
                        },
                        "nativeSrc": "7702:71:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "7702:71:46"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "value1",
                              "nativeSrc": "7827:6:46",
                              "nodeType": "YulIdentifier",
                              "src": "7827:6:46"
                            },
                            {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "7840:9:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "7840:9:46"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "7851:2:46",
                                  "nodeType": "YulLiteral",
                                  "src": "7851:2:46",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "7836:3:46",
                                "nodeType": "YulIdentifier",
                                "src": "7836:3:46"
                              },
                              "nativeSrc": "7836:18:46",
                              "nodeType": "YulFunctionCall",
                              "src": "7836:18:46"
                            }
                          ],
                          "functionName": {
                            "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                            "nativeSrc": "7783:43:46",
                            "nodeType": "YulIdentifier",
                            "src": "7783:43:46"
                          },
                          "nativeSrc": "7783:72:46",
                          "nodeType": "YulFunctionCall",
                          "src": "7783:72:46"
                        },
                        "nativeSrc": "7783:72:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "7783:72:46"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "value2",
                              "nativeSrc": "7909:6:46",
                              "nodeType": "YulIdentifier",
                              "src": "7909:6:46"
                            },
                            {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "7922:9:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "7922:9:46"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "7933:2:46",
                                  "nodeType": "YulLiteral",
                                  "src": "7933:2:46",
                                  "type": "",
                                  "value": "64"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "7918:3:46",
                                "nodeType": "YulIdentifier",
                                "src": "7918:3:46"
                              },
                              "nativeSrc": "7918:18:46",
                              "nodeType": "YulFunctionCall",
                              "src": "7918:18:46"
                            }
                          ],
                          "functionName": {
                            "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                            "nativeSrc": "7865:43:46",
                            "nodeType": "YulIdentifier",
                            "src": "7865:43:46"
                          },
                          "nativeSrc": "7865:72:46",
                          "nodeType": "YulFunctionCall",
                          "src": "7865:72:46"
                        },
                        "nativeSrc": "7865:72:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "7865:72:46"
                      }
                    ]
                  },
                  "name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
                  "nativeSrc": "7502:442:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "headStart",
                      "nativeSrc": "7612:9:46",
                      "nodeType": "YulTypedName",
                      "src": "7612:9:46",
                      "type": ""
                    },
                    {
                      "name": "value2",
                      "nativeSrc": "7624:6:46",
                      "nodeType": "YulTypedName",
                      "src": "7624:6:46",
                      "type": ""
                    },
                    {
                      "name": "value1",
                      "nativeSrc": "7632:6:46",
                      "nodeType": "YulTypedName",
                      "src": "7632:6:46",
                      "type": ""
                    },
                    {
                      "name": "value0",
                      "nativeSrc": "7640:6:46",
                      "nodeType": "YulTypedName",
                      "src": "7640:6:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "tail",
                      "nativeSrc": "7651:4:46",
                      "nodeType": "YulTypedName",
                      "src": "7651:4:46",
                      "type": ""
                    }
                  ],
                  "src": "7502:442:46"
                },
                {
                  "body": {
                    "nativeSrc": "7978:152:46",
                    "nodeType": "YulBlock",
                    "src": "7978:152:46",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nativeSrc": "7995:1:46",
                              "nodeType": "YulLiteral",
                              "src": "7995:1:46",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "7998:77:46",
                              "nodeType": "YulLiteral",
                              "src": "7998:77:46",
                              "type": "",
                              "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nativeSrc": "7988:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "7988:6:46"
                          },
                          "nativeSrc": "7988:88:46",
                          "nodeType": "YulFunctionCall",
                          "src": "7988:88:46"
                        },
                        "nativeSrc": "7988:88:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "7988:88:46"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nativeSrc": "8092:1:46",
                              "nodeType": "YulLiteral",
                              "src": "8092:1:46",
                              "type": "",
                              "value": "4"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "8095:4:46",
                              "nodeType": "YulLiteral",
                              "src": "8095:4:46",
                              "type": "",
                              "value": "0x11"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nativeSrc": "8085:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "8085:6:46"
                          },
                          "nativeSrc": "8085:15:46",
                          "nodeType": "YulFunctionCall",
                          "src": "8085:15:46"
                        },
                        "nativeSrc": "8085:15:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "8085:15:46"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nativeSrc": "8116:1:46",
                              "nodeType": "YulLiteral",
                              "src": "8116:1:46",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "8119:4:46",
                              "nodeType": "YulLiteral",
                              "src": "8119:4:46",
                              "type": "",
                              "value": "0x24"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nativeSrc": "8109:6:46",
                            "nodeType": "YulIdentifier",
                            "src": "8109:6:46"
                          },
                          "nativeSrc": "8109:15:46",
                          "nodeType": "YulFunctionCall",
                          "src": "8109:15:46"
                        },
                        "nativeSrc": "8109:15:46",
                        "nodeType": "YulExpressionStatement",
                        "src": "8109:15:46"
                      }
                    ]
                  },
                  "name": "panic_error_0x11",
                  "nativeSrc": "7950:180:46",
                  "nodeType": "YulFunctionDefinition",
                  "src": "7950:180:46"
                },
                {
                  "body": {
                    "nativeSrc": "8180:147:46",
                    "nodeType": "YulBlock",
                    "src": "8180:147:46",
                    "statements": [
                      {
                        "nativeSrc": "8190:25:46",
                        "nodeType": "YulAssignment",
                        "src": "8190:25:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "x",
                              "nativeSrc": "8213:1:46",
                              "nodeType": "YulIdentifier",
                              "src": "8213:1:46"
                            }
                          ],
                          "functionName": {
                            "name": "cleanup_t_uint256",
                            "nativeSrc": "8195:17:46",
                            "nodeType": "YulIdentifier",
                            "src": "8195:17:46"
                          },
                          "nativeSrc": "8195:20:46",
                          "nodeType": "YulFunctionCall",
                          "src": "8195:20:46"
                        },
                        "variableNames": [
                          {
                            "name": "x",
                            "nativeSrc": "8190:1:46",
                            "nodeType": "YulIdentifier",
                            "src": "8190:1:46"
                          }
                        ]
                      },
                      {
                        "nativeSrc": "8224:25:46",
                        "nodeType": "YulAssignment",
                        "src": "8224:25:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "y",
                              "nativeSrc": "8247:1:46",
                              "nodeType": "YulIdentifier",
                              "src": "8247:1:46"
                            }
                          ],
                          "functionName": {
                            "name": "cleanup_t_uint256",
                            "nativeSrc": "8229:17:46",
                            "nodeType": "YulIdentifier",
                            "src": "8229:17:46"
                          },
                          "nativeSrc": "8229:20:46",
                          "nodeType": "YulFunctionCall",
                          "src": "8229:20:46"
                        },
                        "variableNames": [
                          {
                            "name": "y",
                            "nativeSrc": "8224:1:46",
                            "nodeType": "YulIdentifier",
                            "src": "8224:1:46"
                          }
                        ]
                      },
                      {
                        "nativeSrc": "8258:16:46",
                        "nodeType": "YulAssignment",
                        "src": "8258:16:46",
                        "value": {
                          "arguments": [
                            {
                              "name": "x",
                              "nativeSrc": "8269:1:46",
                              "nodeType": "YulIdentifier",
                              "src": "8269:1:46"
                            },
                            {
                              "name": "y",
                              "nativeSrc": "8272:1:46",
                              "nodeType": "YulIdentifier",
                              "src": "8272:1:46"
                            }
                          ],
                          "functionName": {
                            "name": "add",
                            "nativeSrc": "8265:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "8265:3:46"
                          },
                          "nativeSrc": "8265:9:46",
                          "nodeType": "YulFunctionCall",
                          "src": "8265:9:46"
                        },
                        "variableNames": [
                          {
                            "name": "sum",
                            "nativeSrc": "8258:3:46",
                            "nodeType": "YulIdentifier",
                            "src": "8258:3:46"
                          }
                        ]
                      },
                      {
                        "body": {
                          "nativeSrc": "8298:22:46",
                          "nodeType": "YulBlock",
                          "src": "8298:22:46",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [],
                                "functionName": {
                                  "name": "panic_error_0x11",
                                  "nativeSrc": "8300:16:46",
                                  "nodeType": "YulIdentifier",
                                  "src": "8300:16:46"
                                },
                                "nativeSrc": "8300:18:46",
                                "nodeType": "YulFunctionCall",
                                "src": "8300:18:46"
                              },
                              "nativeSrc": "8300:18:46",
                              "nodeType": "YulExpressionStatement",
                              "src": "8300:18:46"
                            }
                          ]
                        },
                        "condition": {
                          "arguments": [
                            {
                              "name": "x",
                              "nativeSrc": "8290:1:46",
                              "nodeType": "YulIdentifier",
                              "src": "8290:1:46"
                            },
                            {
                              "name": "sum",
                              "nativeSrc": "8293:3:46",
                              "nodeType": "YulIdentifier",
                              "src": "8293:3:46"
                            }
                          ],
                          "functionName": {
                            "name": "gt",
                            "nativeSrc": "8287:2:46",
                            "nodeType": "YulIdentifier",
                            "src": "8287:2:46"
                          },
                          "nativeSrc": "8287:10:46",
                          "nodeType": "YulFunctionCall",
                          "src": "8287:10:46"
                        },
                        "nativeSrc": "8284:36:46",
                        "nodeType": "YulIf",
                        "src": "8284:36:46"
                      }
                    ]
                  },
                  "name": "checked_add_t_uint256",
                  "nativeSrc": "8136:191:46",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "x",
                      "nativeSrc": "8167:1:46",
                      "nodeType": "YulTypedName",
                      "src": "8167:1:46",
                      "type": ""
                    },
                    {
                      "name": "y",
                      "nativeSrc": "8170:1:46",
                      "nodeType": "YulTypedName",
                      "src": "8170:1:46",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "sum",
                      "nativeSrc": "8176:3:46",
                      "nodeType": "YulTypedName",
                      "src": "8176:3:46",
                      "type": ""
                    }
                  ],
                  "src": "8136:191:46"
                }
              ]
            },
            "contents": "{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function store_literal_in_memory_7c1f108e6012ed3a538bcd7e1438e9b1f83f766b2cc24186029e2132f8d9cea8(memPtr) {\n\n        mstore(add(memPtr, 0), \"Not Agent Account\")\n\n    }\n\n    function abi_encode_t_stringliteral_7c1f108e6012ed3a538bcd7e1438e9b1f83f766b2cc24186029e2132f8d9cea8_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 17)\n        store_literal_in_memory_7c1f108e6012ed3a538bcd7e1438e9b1f83f766b2cc24186029e2132f8d9cea8(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7c1f108e6012ed3a538bcd7e1438e9b1f83f766b2cc24186029e2132f8d9cea8__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7c1f108e6012ed3a538bcd7e1438e9b1f83f766b2cc24186029e2132f8d9cea8_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n}\n",
            "id": 46,
            "language": "Yul",
            "name": "#utility.yul"
          }
        ],
        "immutableReferences": {},
        "linkReferences": {},
        "object": "608060405234801561001057600080fd5b50600436106101005760003560e01c8063715018a611610097578063bcf685ed11610066578063bcf685ed1461029d578063dd62ed3e146102b9578063f2fde38b146102e9578063f551eb191461030557610100565b8063715018a6146102275780638da5cb5b1461023157806395d89b411461024f578063a9059cbb1461026d57610100565b806326f58e75116100d357806326f58e75146101a1578063313ce567146101bd57806340c10f19146101db57806370a08231146101f757610100565b806306fdde0314610105578063095ea7b31461012357806318160ddd1461015357806323b872dd14610171575b600080fd5b61010d610323565b60405161011a9190611046565b60405180910390f35b61013d60048036038101906101389190611101565b6103b5565b60405161014a919061115c565b60405180910390f35b61015b6103d8565b6040516101689190611186565b60405180910390f35b61018b600480360381019061018691906111a1565b6103e2565b604051610198919061115c565b60405180910390f35b6101bb60048036038101906101b691906111a1565b610411565b005b6101c56104e4565b6040516101d29190611210565b60405180910390f35b6101f560048036038101906101f09190611101565b6104ed565b005b610211600480360381019061020c919061122b565b610503565b60405161021e9190611186565b60405180910390f35b61022f61054b565b005b61023961055f565b6040516102469190611267565b60405180910390f35b610257610589565b6040516102649190611046565b60405180910390f35b61028760048036038101906102829190611101565b61061b565b604051610294919061115c565b60405180910390f35b6102b760048036038101906102b2919061122b565b61063e565b005b6102d360048036038101906102ce9190611282565b610712565b6040516102e09190611186565b60405180910390f35b61030360048036038101906102fe919061122b565b610799565b005b61030d61081f565b60405161031a9190611267565b60405180910390f35b606060038054610332906112f1565b80601f016020809104026020016040519081016040528092919081815260200182805461035e906112f1565b80156103ab5780601f10610380576101008083540402835291602001916103ab565b820191906000526020600020905b81548152906001019060200180831161038e57829003601f168201915b5050505050905090565b6000806103c0610849565b90506103cd818585610851565b600191505092915050565b6000600254905090565b6000806103ed610849565b90506103fa858285610863565b6104058585856108f7565b60019150509392505050565b823373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415801561049c5750600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156104d3576040517f6d187b2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104de848484610851565b50505050565b60006012905090565b6104f56109eb565b6104ff8282610a72565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6105536109eb565b61055d6000610af4565b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060048054610598906112f1565b80601f01602080910402602001604051908101604052809291908181526020018280546105c4906112f1565b80156106115780601f106105e657610100808354040283529160200191610611565b820191906000526020600020905b8154815290600101906020018083116105f457829003601f168201915b5050505050905090565b600080610626610849565b90506106338185856108f7565b600191505092915050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c59061136e565b60405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6107a16109eb565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108135760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161080a9190611267565b60405180910390fd5b61081c81610af4565b50565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600033905090565b61085e8383836001610bba565b505050565b600061086f8484610712565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146108f157818110156108e1578281836040517ffb8f41b20000000000000000000000000000000000000000000000000000000081526004016108d89392919061138e565b60405180910390fd5b6108f084848484036000610bba565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036109695760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016109609190611267565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109db5760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016109d29190611267565b60405180910390fd5b6109e6838383610d91565b505050565b6109f3610849565b73ffffffffffffffffffffffffffffffffffffffff16610a1161055f565b73ffffffffffffffffffffffffffffffffffffffff1614610a7057610a34610849565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610a679190611267565b60405180910390fd5b565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ae45760006040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610adb9190611267565b60405180910390fd5b610af060008383610d91565b5050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610c2c5760006040517fe602df05000000000000000000000000000000000000000000000000000000008152600401610c239190611267565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610c9e5760006040517f94280d62000000000000000000000000000000000000000000000000000000008152600401610c959190611267565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508015610d8b578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610d829190611186565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610de3578060026000828254610dd791906113f4565b92505081905550610eb6565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610e6f578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401610e669392919061138e565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610eff5780600260008282540392505081905550610f4c565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610fa99190611186565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ff0578082015181840152602081019050610fd5565b60008484015250505050565b6000601f19601f8301169050919050565b600061101882610fb6565b6110228185610fc1565b9350611032818560208601610fd2565b61103b81610ffc565b840191505092915050565b60006020820190508181036000830152611060818461100d565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110988261106d565b9050919050565b6110a88161108d565b81146110b357600080fd5b50565b6000813590506110c58161109f565b92915050565b6000819050919050565b6110de816110cb565b81146110e957600080fd5b50565b6000813590506110fb816110d5565b92915050565b6000806040838503121561111857611117611068565b5b6000611126858286016110b6565b9250506020611137858286016110ec565b9150509250929050565b60008115159050919050565b61115681611141565b82525050565b6000602082019050611171600083018461114d565b92915050565b611180816110cb565b82525050565b600060208201905061119b6000830184611177565b92915050565b6000806000606084860312156111ba576111b9611068565b5b60006111c8868287016110b6565b93505060206111d9868287016110b6565b92505060406111ea868287016110ec565b9150509250925092565b600060ff82169050919050565b61120a816111f4565b82525050565b60006020820190506112256000830184611201565b92915050565b60006020828403121561124157611240611068565b5b600061124f848285016110b6565b91505092915050565b6112618161108d565b82525050565b600060208201905061127c6000830184611258565b92915050565b6000806040838503121561129957611298611068565b5b60006112a7858286016110b6565b92505060206112b8858286016110b6565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061130957607f821691505b60208210810361131c5761131b6112c2565b5b50919050565b7f4e6f74204167656e74204163636f756e74000000000000000000000000000000600082015250565b6000611358601183610fc1565b915061136382611322565b602082019050919050565b600060208201905081810360008301526113878161134b565b9050919050565b60006060820190506113a36000830186611258565b6113b06020830185611177565b6113bd6040830184611177565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006113ff826110cb565b915061140a836110cb565b9250828201905080821115611422576114216113c5565b5b9291505056fea2646970667358221220668b1ff38adf17eb85af692acb12e1639a5870b4a0396284ca1b42bd5fd0a06564736f6c63430008180033",
        "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x100 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xBCF685ED GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xBCF685ED EQ PUSH2 0x29D JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x2B9 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2E9 JUMPI DUP1 PUSH4 0xF551EB19 EQ PUSH2 0x305 JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x227 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x231 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x24F JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x26D JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x26F58E75 GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x26F58E75 EQ PUSH2 0x1A1 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1BD JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x1DB JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1F7 JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x105 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x153 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x171 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10D PUSH2 0x323 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x11A SWAP2 SWAP1 PUSH2 0x1046 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x138 SWAP2 SWAP1 PUSH2 0x1101 JUMP JUMPDEST PUSH2 0x3B5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x14A SWAP2 SWAP1 PUSH2 0x115C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x15B PUSH2 0x3D8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x168 SWAP2 SWAP1 PUSH2 0x1186 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x18B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x186 SWAP2 SWAP1 PUSH2 0x11A1 JUMP JUMPDEST PUSH2 0x3E2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x198 SWAP2 SWAP1 PUSH2 0x115C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1BB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1B6 SWAP2 SWAP1 PUSH2 0x11A1 JUMP JUMPDEST PUSH2 0x411 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C5 PUSH2 0x4E4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D2 SWAP2 SWAP1 PUSH2 0x1210 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F0 SWAP2 SWAP1 PUSH2 0x1101 JUMP JUMPDEST PUSH2 0x4ED JUMP JUMPDEST STOP JUMPDEST PUSH2 0x211 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x20C SWAP2 SWAP1 PUSH2 0x122B JUMP JUMPDEST PUSH2 0x503 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21E SWAP2 SWAP1 PUSH2 0x1186 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x22F PUSH2 0x54B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x239 PUSH2 0x55F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x246 SWAP2 SWAP1 PUSH2 0x1267 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x257 PUSH2 0x589 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x264 SWAP2 SWAP1 PUSH2 0x1046 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x287 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x282 SWAP2 SWAP1 PUSH2 0x1101 JUMP JUMPDEST PUSH2 0x61B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x294 SWAP2 SWAP1 PUSH2 0x115C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2B7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2B2 SWAP2 SWAP1 PUSH2 0x122B JUMP JUMPDEST PUSH2 0x63E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2D3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2CE SWAP2 SWAP1 PUSH2 0x1282 JUMP JUMPDEST PUSH2 0x712 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E0 SWAP2 SWAP1 PUSH2 0x1186 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x303 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2FE SWAP2 SWAP1 PUSH2 0x122B JUMP JUMPDEST PUSH2 0x799 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x30D PUSH2 0x81F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x31A SWAP2 SWAP1 PUSH2 0x1267 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x332 SWAP1 PUSH2 0x12F1 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x35E SWAP1 PUSH2 0x12F1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3AB JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x380 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3AB JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x38E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3C0 PUSH2 0x849 JUMP JUMPDEST SWAP1 POP PUSH2 0x3CD DUP2 DUP6 DUP6 PUSH2 0x851 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3ED PUSH2 0x849 JUMP JUMPDEST SWAP1 POP PUSH2 0x3FA DUP6 DUP3 DUP6 PUSH2 0x863 JUMP JUMPDEST PUSH2 0x405 DUP6 DUP6 DUP6 PUSH2 0x8F7 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x49C JUMPI POP PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x4D3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6D187B2800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4DE DUP5 DUP5 DUP5 PUSH2 0x851 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x4F5 PUSH2 0x9EB JUMP JUMPDEST PUSH2 0x4FF DUP3 DUP3 PUSH2 0xA72 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x553 PUSH2 0x9EB JUMP JUMPDEST PUSH2 0x55D PUSH1 0x0 PUSH2 0xAF4 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x598 SWAP1 PUSH2 0x12F1 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x5C4 SWAP1 PUSH2 0x12F1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x611 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x5E6 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x611 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x5F4 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x626 PUSH2 0x849 JUMP JUMPDEST SWAP1 POP PUSH2 0x633 DUP2 DUP6 DUP6 PUSH2 0x8F7 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x6CE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6C5 SWAP1 PUSH2 0x136E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x7A1 PUSH2 0x9EB JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x813 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x80A SWAP2 SWAP1 PUSH2 0x1267 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x81C DUP2 PUSH2 0xAF4 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x85E DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0xBBA JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x86F DUP5 DUP5 PUSH2 0x712 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x8F1 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x8E1 JUMPI DUP3 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xFB8F41B200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D8 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x138E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8F0 DUP5 DUP5 DUP5 DUP5 SUB PUSH1 0x0 PUSH2 0xBBA JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x969 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x960 SWAP2 SWAP1 PUSH2 0x1267 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x9DB JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9D2 SWAP2 SWAP1 PUSH2 0x1267 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9E6 DUP4 DUP4 DUP4 PUSH2 0xD91 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x9F3 PUSH2 0x849 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA11 PUSH2 0x55F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xA70 JUMPI PUSH2 0xA34 PUSH2 0x849 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA67 SWAP2 SWAP1 PUSH2 0x1267 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xAE4 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xADB SWAP2 SWAP1 PUSH2 0x1267 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xAF0 PUSH1 0x0 DUP4 DUP4 PUSH2 0xD91 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x6 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xC2C JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0xE602DF0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC23 SWAP2 SWAP1 PUSH2 0x1267 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xC9E JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x94280D6200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC95 SWAP2 SWAP1 PUSH2 0x1267 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0xD8B JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0xD82 SWAP2 SWAP1 PUSH2 0x1186 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xDE3 JUMPI DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xDD7 SWAP2 SWAP1 PUSH2 0x13F4 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0xEB6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0xE6F JUMPI DUP4 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xE450D38C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE66 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x138E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xEFF JUMPI DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0xF4C JUMP JUMPDEST DUP1 PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0xFA9 SWAP2 SWAP1 PUSH2 0x1186 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xFF0 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xFD5 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1018 DUP3 PUSH2 0xFB6 JUMP JUMPDEST PUSH2 0x1022 DUP2 DUP6 PUSH2 0xFC1 JUMP JUMPDEST SWAP4 POP PUSH2 0x1032 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xFD2 JUMP JUMPDEST PUSH2 0x103B DUP2 PUSH2 0xFFC JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1060 DUP2 DUP5 PUSH2 0x100D JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1098 DUP3 PUSH2 0x106D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x10A8 DUP2 PUSH2 0x108D JUMP JUMPDEST DUP2 EQ PUSH2 0x10B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x10C5 DUP2 PUSH2 0x109F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x10DE DUP2 PUSH2 0x10CB JUMP JUMPDEST DUP2 EQ PUSH2 0x10E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x10FB DUP2 PUSH2 0x10D5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1118 JUMPI PUSH2 0x1117 PUSH2 0x1068 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1126 DUP6 DUP3 DUP7 ADD PUSH2 0x10B6 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1137 DUP6 DUP3 DUP7 ADD PUSH2 0x10EC JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1156 DUP2 PUSH2 0x1141 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1171 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x114D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1180 DUP2 PUSH2 0x10CB JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x119B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1177 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x11BA JUMPI PUSH2 0x11B9 PUSH2 0x1068 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x11C8 DUP7 DUP3 DUP8 ADD PUSH2 0x10B6 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x11D9 DUP7 DUP3 DUP8 ADD PUSH2 0x10B6 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x11EA DUP7 DUP3 DUP8 ADD PUSH2 0x10EC JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x120A DUP2 PUSH2 0x11F4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1225 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1201 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1241 JUMPI PUSH2 0x1240 PUSH2 0x1068 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x124F DUP5 DUP3 DUP6 ADD PUSH2 0x10B6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1261 DUP2 PUSH2 0x108D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x127C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1258 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1299 JUMPI PUSH2 0x1298 PUSH2 0x1068 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x12A7 DUP6 DUP3 DUP7 ADD PUSH2 0x10B6 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x12B8 DUP6 DUP3 DUP7 ADD PUSH2 0x10B6 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1309 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x131C JUMPI PUSH2 0x131B PUSH2 0x12C2 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E6F74204167656E74204163636F756E74000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1358 PUSH1 0x11 DUP4 PUSH2 0xFC1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1363 DUP3 PUSH2 0x1322 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1387 DUP2 PUSH2 0x134B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x13A3 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1258 JUMP JUMPDEST PUSH2 0x13B0 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1177 JUMP JUMPDEST PUSH2 0x13BD PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1177 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x13FF DUP3 PUSH2 0x10CB JUMP JUMPDEST SWAP2 POP PUSH2 0x140A DUP4 PUSH2 0x10CB JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x1422 JUMPI PUSH2 0x1421 PUSH2 0x13C5 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0x8B1FF38ADF17EB DUP6 0xAF PUSH10 0x2ACB12E1639A5870B4A0 CODECOPY PUSH3 0x84CA1B TIMESTAMP 0xBD PUSH0 0xD0 LOG0 PUSH6 0x64736F6C6343 STOP ADDMOD XOR STOP CALLER ",
        "sourceMap": "211:449:37:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:89:16;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4293:186;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3144:97;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5039:244;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;520:137:37;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3002:82:16;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;414:100:37;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3299:116:16;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2293:101:8;;;:::i;:::-;;1638:85;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2276:93:16;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3610:178;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;502:136:42;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3846:140:16;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2543:215:8;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;421:75:42;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2074:89:16;2119:13;2151:5;2144:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:89;:::o;4293:186::-;4366:4;4382:13;4398:12;:10;:12::i;:::-;4382:28;;4420:31;4429:5;4436:7;4445:5;4420:8;:31::i;:::-;4468:4;4461:11;;;4293:186;;;;:::o;3144:97::-;3196:7;3222:12;;3215:19;;3144:97;:::o;5039:244::-;5126:4;5142:15;5160:12;:10;:12::i;:::-;5142:30;;5182:37;5198:4;5204:7;5213:5;5182:15;:37::i;:::-;5229:26;5239:4;5245:2;5249:5;5229:9;:26::i;:::-;5272:4;5265:11;;;5039:244;;;;;:::o;520:137:37:-;604:6;336:10:42;326:20;;:6;:20;;;;:43;;;;;364:5;;;;;;;;;;;350:19;;:10;:19;;;;326:43;322:79;;;385:16;;;;;;;;;;;;;;322:79;619:32:37::1;628:6;636:7;645:5;619:8;:32::i;:::-;520:137:::0;;;;:::o;3002:82:16:-;3051:5;3075:2;3068:9;;3002:82;:::o;414:100:37:-;1531:13:8;:11;:13::i;:::-;486:22:37::1;492:7;501:6;486:5;:22::i;:::-;414:100:::0;;:::o;3299:116:16:-;3364:7;3390:9;:18;3400:7;3390:18;;;;;;;;;;;;;;;;3383:25;;3299:116;;;:::o;2293:101:8:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;1638:85::-;1684:7;1710:6;;;;;;;;;;;1703:13;;1638:85;:::o;2276:93:16:-;2323:13;2355:7;2348:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2276:93;:::o;3610:178::-;3679:4;3695:13;3711:12;:10;:12::i;:::-;3695:28;;3733:27;3743:5;3750:2;3754:5;3733:9;:27::i;:::-;3777:4;3770:11;;;3610:178;;;;:::o;502:136:42:-;582:5;;;;;;;;;;;568:19;;:10;:19;;;560:49;;;;;;;;;;;;:::i;:::-;;;;;;;;;624:8;616:5;;:16;;;;;;;;;;;;;;;;;;502:136;:::o;3846:140:16:-;3926:7;3952:11;:18;3964:5;3952:18;;;;;;;;;;;;;;;:27;3971:7;3952:27;;;;;;;;;;;;;;;;3945:34;;3846:140;;;;:::o;2543:215:8:-;1531:13;:11;:13::i;:::-;2647:1:::1;2627:22;;:8;:22;;::::0;2623:91:::1;;2700:1;2672:31;;;;;;;;;;;:::i;:::-;;;;;;;;2623:91;2723:28;2742:8;2723:18;:28::i;:::-;2543:215:::0;:::o;421:75:42:-;462:7;485:5;;;;;;;;;;;478:12;;421:75;:::o;656:96:25:-;709:7;735:10;728:17;;656:96;:::o;8989:128:16:-;9073:37;9082:5;9089:7;9098:5;9105:4;9073:8;:37::i;:::-;8989:128;;;:::o;10663:477::-;10762:24;10789:25;10799:5;10806:7;10789:9;:25::i;:::-;10762:52;;10848:17;10828:16;:37;10824:310;;10904:5;10885:16;:24;10881:130;;;10963:7;10972:16;10990:5;10936:60;;;;;;;;;;;;;:::i;:::-;;;;;;;;10881:130;11052:57;11061:5;11068:7;11096:5;11077:16;:24;11103:5;11052:8;:57::i;:::-;10824:310;10752:388;10663:477;;;:::o;5656:300::-;5755:1;5739:18;;:4;:18;;;5735:86;;5807:1;5780:30;;;;;;;;;;;:::i;:::-;;;;;;;;5735:86;5848:1;5834:16;;:2;:16;;;5830:86;;5902:1;5873:32;;;;;;;;;;;:::i;:::-;;;;;;;;5830:86;5925:24;5933:4;5939:2;5943:5;5925:7;:24::i;:::-;5656:300;;;:::o;1796:162:8:-;1866:12;:10;:12::i;:::-;1855:23;;:7;:5;:7::i;:::-;:23;;;1851:101;;1928:12;:10;:12::i;:::-;1901:40;;;;;;;;;;;:::i;:::-;;;;;;;;1851:101;1796:162::o;7721:208:16:-;7810:1;7791:21;;:7;:21;;;7787:91;;7864:1;7835:32;;;;;;;;;;;:::i;:::-;;;;;;;;7787:91;7887:35;7903:1;7907:7;7916:5;7887:7;:35::i;:::-;7721:208;;:::o;2912:187:8:-;2985:16;3004:6;;;;;;;;;;;2985:25;;3029:8;3020:6;;:17;;;;;;;;;;;;;;;;;;3083:8;3052:40;;3073:8;3052:40;;;;;;;;;;;;2975:124;2912:187;:::o;9949:432:16:-;10078:1;10061:19;;:5;:19;;;10057:89;;10132:1;10103:32;;;;;;;;;;;:::i;:::-;;;;;;;;10057:89;10178:1;10159:21;;:7;:21;;;10155:90;;10231:1;10203:31;;;;;;;;;;;:::i;:::-;;;;;;;;10155:90;10284:5;10254:11;:18;10266:5;10254:18;;;;;;;;;;;;;;;:27;10273:7;10254:27;;;;;;;;;;;;;;;:35;;;;10303:9;10299:76;;;10349:7;10333:31;;10342:5;10333:31;;;10358:5;10333:31;;;;;;:::i;:::-;;;;;;;;10299:76;9949:432;;;;:::o;6271:1107::-;6376:1;6360:18;;:4;:18;;;6356:540;;6512:5;6496:12;;:21;;;;;;;:::i;:::-;;;;;;;;6356:540;;;6548:19;6570:9;:15;6580:4;6570:15;;;;;;;;;;;;;;;;6548:37;;6617:5;6603:11;:19;6599:115;;;6674:4;6680:11;6693:5;6649:50;;;;;;;;;;;;;:::i;:::-;;;;;;;;6599:115;6866:5;6852:11;:19;6834:9;:15;6844:4;6834:15;;;;;;;;;;;;;;;:37;;;;6534:362;6356:540;6924:1;6910:16;;:2;:16;;;6906:425;;7089:5;7073:12;;:21;;;;;;;;;;;6906:425;;;7301:5;7284:9;:13;7294:2;7284:13;;;;;;;;;;;;;;;;:22;;;;;;;;;;;6906:425;7361:2;7346:25;;7355:4;7346:25;;;7365:5;7346:25;;;;;;:::i;:::-;;;;;;;;6271:1107;;;:::o;7:99:46:-;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:169::-;196:11;230:6;225:3;218:19;270:4;265:3;261:14;246:29;;112:169;;;;:::o;287:246::-;368:1;378:113;392:6;389:1;386:13;378:113;;;477:1;472:3;468:11;462:18;458:1;453:3;449:11;442:39;414:2;411:1;407:10;402:15;;378:113;;;525:1;516:6;511:3;507:16;500:27;349:184;287:246;;;:::o;539:102::-;580:6;631:2;627:7;622:2;615:5;611:14;607:28;597:38;;539:102;;;:::o;647:377::-;735:3;763:39;796:5;763:39;:::i;:::-;818:71;882:6;877:3;818:71;:::i;:::-;811:78;;898:65;956:6;951:3;944:4;937:5;933:16;898:65;:::i;:::-;988:29;1010:6;988:29;:::i;:::-;983:3;979:39;972:46;;739:285;647:377;;;;:::o;1030:313::-;1143:4;1181:2;1170:9;1166:18;1158:26;;1230:9;1224:4;1220:20;1216:1;1205:9;1201:17;1194:47;1258:78;1331:4;1322:6;1258:78;:::i;:::-;1250:86;;1030:313;;;;:::o;1430:117::-;1539:1;1536;1529:12;1676:126;1713:7;1753:42;1746:5;1742:54;1731:65;;1676:126;;;:::o;1808:96::-;1845:7;1874:24;1892:5;1874:24;:::i;:::-;1863:35;;1808:96;;;:::o;1910:122::-;1983:24;2001:5;1983:24;:::i;:::-;1976:5;1973:35;1963:63;;2022:1;2019;2012:12;1963:63;1910:122;:::o;2038:139::-;2084:5;2122:6;2109:20;2100:29;;2138:33;2165:5;2138:33;:::i;:::-;2038:139;;;;:::o;2183:77::-;2220:7;2249:5;2238:16;;2183:77;;;:::o;2266:122::-;2339:24;2357:5;2339:24;:::i;:::-;2332:5;2329:35;2319:63;;2378:1;2375;2368:12;2319:63;2266:122;:::o;2394:139::-;2440:5;2478:6;2465:20;2456:29;;2494:33;2521:5;2494:33;:::i;:::-;2394:139;;;;:::o;2539:474::-;2607:6;2615;2664:2;2652:9;2643:7;2639:23;2635:32;2632:119;;;2670:79;;:::i;:::-;2632:119;2790:1;2815:53;2860:7;2851:6;2840:9;2836:22;2815:53;:::i;:::-;2805:63;;2761:117;2917:2;2943:53;2988:7;2979:6;2968:9;2964:22;2943:53;:::i;:::-;2933:63;;2888:118;2539:474;;;;;:::o;3019:90::-;3053:7;3096:5;3089:13;3082:21;3071:32;;3019:90;;;:::o;3115:109::-;3196:21;3211:5;3196:21;:::i;:::-;3191:3;3184:34;3115:109;;:::o;3230:210::-;3317:4;3355:2;3344:9;3340:18;3332:26;;3368:65;3430:1;3419:9;3415:17;3406:6;3368:65;:::i;:::-;3230:210;;;;:::o;3446:118::-;3533:24;3551:5;3533:24;:::i;:::-;3528:3;3521:37;3446:118;;:::o;3570:222::-;3663:4;3701:2;3690:9;3686:18;3678:26;;3714:71;3782:1;3771:9;3767:17;3758:6;3714:71;:::i;:::-;3570:222;;;;:::o;3798:619::-;3875:6;3883;3891;3940:2;3928:9;3919:7;3915:23;3911:32;3908:119;;;3946:79;;:::i;:::-;3908:119;4066:1;4091:53;4136:7;4127:6;4116:9;4112:22;4091:53;:::i;:::-;4081:63;;4037:117;4193:2;4219:53;4264:7;4255:6;4244:9;4240:22;4219:53;:::i;:::-;4209:63;;4164:118;4321:2;4347:53;4392:7;4383:6;4372:9;4368:22;4347:53;:::i;:::-;4337:63;;4292:118;3798:619;;;;;:::o;4423:86::-;4458:7;4498:4;4491:5;4487:16;4476:27;;4423:86;;;:::o;4515:112::-;4598:22;4614:5;4598:22;:::i;:::-;4593:3;4586:35;4515:112;;:::o;4633:214::-;4722:4;4760:2;4749:9;4745:18;4737:26;;4773:67;4837:1;4826:9;4822:17;4813:6;4773:67;:::i;:::-;4633:214;;;;:::o;4853:329::-;4912:6;4961:2;4949:9;4940:7;4936:23;4932:32;4929:119;;;4967:79;;:::i;:::-;4929:119;5087:1;5112:53;5157:7;5148:6;5137:9;5133:22;5112:53;:::i;:::-;5102:63;;5058:117;4853:329;;;;:::o;5188:118::-;5275:24;5293:5;5275:24;:::i;:::-;5270:3;5263:37;5188:118;;:::o;5312:222::-;5405:4;5443:2;5432:9;5428:18;5420:26;;5456:71;5524:1;5513:9;5509:17;5500:6;5456:71;:::i;:::-;5312:222;;;;:::o;5540:474::-;5608:6;5616;5665:2;5653:9;5644:7;5640:23;5636:32;5633:119;;;5671:79;;:::i;:::-;5633:119;5791:1;5816:53;5861:7;5852:6;5841:9;5837:22;5816:53;:::i;:::-;5806:63;;5762:117;5918:2;5944:53;5989:7;5980:6;5969:9;5965:22;5944:53;:::i;:::-;5934:63;;5889:118;5540:474;;;;;:::o;6020:180::-;6068:77;6065:1;6058:88;6165:4;6162:1;6155:15;6189:4;6186:1;6179:15;6206:320;6250:6;6287:1;6281:4;6277:12;6267:22;;6334:1;6328:4;6324:12;6355:18;6345:81;;6411:4;6403:6;6399:17;6389:27;;6345:81;6473:2;6465:6;6462:14;6442:18;6439:38;6436:84;;6492:18;;:::i;:::-;6436:84;6257:269;6206:320;;;:::o;6532:167::-;6672:19;6668:1;6660:6;6656:14;6649:43;6532:167;:::o;6705:366::-;6847:3;6868:67;6932:2;6927:3;6868:67;:::i;:::-;6861:74;;6944:93;7033:3;6944:93;:::i;:::-;7062:2;7057:3;7053:12;7046:19;;6705:366;;;:::o;7077:419::-;7243:4;7281:2;7270:9;7266:18;7258:26;;7330:9;7324:4;7320:20;7316:1;7305:9;7301:17;7294:47;7358:131;7484:4;7358:131;:::i;:::-;7350:139;;7077:419;;;:::o;7502:442::-;7651:4;7689:2;7678:9;7674:18;7666:26;;7702:71;7770:1;7759:9;7755:17;7746:6;7702:71;:::i;:::-;7783:72;7851:2;7840:9;7836:18;7827:6;7783:72;:::i;:::-;7865;7933:2;7922:9;7918:18;7909:6;7865:72;:::i;:::-;7502:442;;;;;;:::o;7950:180::-;7998:77;7995:1;7988:88;8095:4;8092:1;8085:15;8119:4;8116:1;8109:15;8136:191;8176:3;8195:20;8213:1;8195:20;:::i;:::-;8190:25;;8229:20;8247:1;8229:20;:::i;:::-;8224:25;;8272:1;8269;8265:9;8258:16;;8293:3;8290:1;8287:10;8284:36;;;8300:18;;:::i;:::-;8284:36;8136:191;;;;:::o"
      },
      "gasEstimates": {
        "creation": {
          "codeDepositCost": "1042800",
          "executionCost": "infinite",
          "totalCost": "infinite"
        },
        "external": {
          "allowance(address,address)": "infinite",
          "approve(address,uint256)": "infinite",
          "balanceOf(address)": "2930",
          "decimals()": "388",
          "getAgent()": "2610",
          "mint(address,uint256)": "infinite",
          "name()": "infinite",
          "owner()": "2567",
          "proxy_approve(address,address,uint256)": "infinite",
          "renounceOwnership()": "infinite",
          "setAgent(address)": "26914",
          "symbol()": "infinite",
          "totalSupply()": "2505",
          "transfer(address,uint256)": "infinite",
          "transferFrom(address,address,uint256)": "infinite",
          "transferOwnership(address)": "infinite"
        }
      },
      "methodIdentifiers": {
        "allowance(address,address)": "dd62ed3e",
        "approve(address,uint256)": "095ea7b3",
        "balanceOf(address)": "70a08231",
        "decimals()": "313ce567",
        "getAgent()": "f551eb19",
        "mint(address,uint256)": "40c10f19",
        "name()": "06fdde03",
        "owner()": "8da5cb5b",
        "proxy_approve(address,address,uint256)": "26f58e75",
        "renounceOwnership()": "715018a6",
        "setAgent(address)": "bcf685ed",
        "symbol()": "95d89b41",
        "totalSupply()": "18160ddd",
        "transfer(address,uint256)": "a9059cbb",
        "transferFrom(address,address,uint256)": "23b872dd",
        "transferOwnership(address)": "f2fde38b"
      }
    },
    "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"proxy_approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAgent\",\"type\":\"address\"}],\"name\":\"setAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/erc20/Health.sol\":\"Health\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/erc20/Health.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../utils/ProxyForward.sol\\\";\\r\\n\\r\\ncontract Health is ERC20, ProxyForward, Ownable {\\r\\n  constructor(address _owner) ERC20(\\\"Blueberry\\\", \\\"Blueberry\\\") Ownable(_owner) ProxyForward(_owner) {\\r\\n    _mint(_owner, 40000000 * 10 ** 18);\\r\\n  }\\r\\n\\r\\n  function mint(address account,  uint256 amount) public onlyOwner {\\r\\n    _mint(account, amount);\\r\\n  }\\r\\n\\r\\n  function proxy_approve(address signer, address spender, uint256 value) public proxy(signer) {\\r\\n    _approve(signer, spender, value);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x991b26aff14bdbdcb30cd3e2683340a018fb742c66deb970e083c745ce79aad5\",\"license\":\"MIT\"},\"contracts/utils/ProxyForward.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract ProxyForward {\\r\\n  address internal agent;\\r\\n\\r\\n  error InvalidAccount();\\r\\n\\r\\n  constructor(address initialAgent) {\\r\\n    agent = initialAgent;\\r\\n  }\\r\\n\\r\\n  modifier proxy(address signer) {\\r\\n    if (signer != msg.sender && msg.sender != agent)\\r\\n      revert InvalidAccount();\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function getAgent() public view returns (address) {\\r\\n    return agent;\\r\\n  }\\r\\n\\r\\n  function setAgent(address newAgent) public virtual {\\r\\n    require(msg.sender == agent, \\\"Not Agent Account\\\");\\r\\n    agent = newAgent;\\r\\n  }\\r\\n}\",\"keccak256\":\"0x36f4c908f7f1bba3d1f4cac57b3e4696307b43f1357dee1aa6f12862ad672256\",\"license\":\"MIT\"}},\"version\":1}",
    "storageLayout": {
      "storage": [
        {
          "astId": 2810,
          "contract": "contracts/erc20/Health.sol:Health",
          "label": "_balances",
          "offset": 0,
          "slot": "0",
          "type": "t_mapping(t_address,t_uint256)"
        },
        {
          "astId": 2816,
          "contract": "contracts/erc20/Health.sol:Health",
          "label": "_allowances",
          "offset": 0,
          "slot": "1",
          "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
        },
        {
          "astId": 2818,
          "contract": "contracts/erc20/Health.sol:Health",
          "label": "_totalSupply",
          "offset": 0,
          "slot": "2",
          "type": "t_uint256"
        },
        {
          "astId": 2820,
          "contract": "contracts/erc20/Health.sol:Health",
          "label": "_name",
          "offset": 0,
          "slot": "3",
          "type": "t_string_storage"
        },
        {
          "astId": 2822,
          "contract": "contracts/erc20/Health.sol:Health",
          "label": "_symbol",
          "offset": 0,
          "slot": "4",
          "type": "t_string_storage"
        },
        {
          "astId": 8991,
          "contract": "contracts/erc20/Health.sol:Health",
          "label": "agent",
          "offset": 0,
          "slot": "5",
          "type": "t_address"
        },
        {
          "astId": 2156,
          "contract": "contracts/erc20/Health.sol:Health",
          "label": "_owner",
          "offset": 0,
          "slot": "6",
          "type": "t_address"
        }
      ],
      "types": {
        "t_address": {
          "encoding": "inplace",
          "label": "address",
          "numberOfBytes": "20"
        },
        "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => mapping(address => uint256))",
          "numberOfBytes": "32",
          "value": "t_mapping(t_address,t_uint256)"
        },
        "t_mapping(t_address,t_uint256)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => uint256)",
          "numberOfBytes": "32",
          "value": "t_uint256"
        },
        "t_string_storage": {
          "encoding": "bytes",
          "label": "string",
          "numberOfBytes": "32"
        },
        "t_uint256": {
          "encoding": "inplace",
          "label": "uint256",
          "numberOfBytes": "32"
        }
      }
    },
    "userdoc": {
      "kind": "user",
      "methods": {},
      "version": 1
    },
    "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {IERC721Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC721\\n    struct ERC721Storage {\\n        // Token name\\n        string _name;\\n\\n        // Token symbol\\n        string _symbol;\\n\\n        mapping(uint256 tokenId => address) _owners;\\n\\n        mapping(address owner => uint256) _balances;\\n\\n        mapping(uint256 tokenId => address) _tokenApprovals;\\n\\n        mapping(address owner => mapping(address operator => bool)) _operatorApprovals;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC721\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC721StorageLocation = 0x80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab0079300;\\n\\n    function _getERC721Storage() private pure returns (ERC721Storage storage $) {\\n        assembly {\\n            $.slot := ERC721StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        $._name = name_;\\n        $._symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return $._balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        unchecked {\\n            $._balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                $._balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                $._balances[to] += 1;\\n            }\\n        }\\n\\n        $._owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        $._tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        $._operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721Upgradeable} from \\\"../ERC721Upgradeable.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {IERC4906} from \\\"@openzeppelin/contracts/interfaces/IERC4906.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorageUpgradeable is Initializable, IERC4906, ERC721Upgradeable {\\n    using Strings for uint256;\\n\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\n    // defines events and does not include any external function.\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC721URIStorage\\n    struct ERC721URIStorageStorage {\\n        // Optional mapping for token URIs\\n        mapping(uint256 tokenId => string) _tokenURIs;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC721URIStorage\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC721URIStorageStorageLocation = 0x0542a41881ee128a365a727b282c86fa859579490b9bb45aab8503648c8e7900;\\n\\n    function _getERC721URIStorageStorage() private pure returns (ERC721URIStorageStorage storage $) {\\n        assembly {\\n            $.slot := ERC721URIStorageStorageLocation\\n        }\\n    }\\n\\n    function __ERC721URIStorage_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721URIStorage_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721Upgradeable, IERC165) returns (bool) {\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        ERC721URIStorageStorage storage $ = _getERC721URIStorageStorage();\\n        _requireOwned(tokenId);\\n\\n        string memory _tokenURI = $._tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string.concat(base, _tokenURI);\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        ERC721URIStorageStorage storage $ = _getERC721URIStorageStorage();\\n        $._tokenURIs[tokenId] = _tokenURI;\\n        emit MetadataUpdate(tokenId);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC4906.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\"\n    },\n    \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Strings} from \\\"../../../utils/Strings.sol\\\";\\nimport {IERC4906} from \\\"../../../interfaces/IERC4906.sol\\\";\\nimport {IERC165} from \\\"../../../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\n    // defines events and does not include any external function.\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 tokenId => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string.concat(base, _tokenURI);\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = _tokenURI;\\n        emit MetadataUpdate(tokenId);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\n    },\n    \"contracts/DoitRingDevice.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"./utils/VerifiableUpgradeable.sol\\\";\\r\\nimport \\\"./utils/BidirectionalTransfer.sol\\\";\\r\\nimport \\\"./utils/ProxyForwardUpgradeable.sol\\\";\\r\\n\\r\\ncontract DoitRingDevice is ProxyForwardUpgradeable, VerifiableUpgradeable, BidirectionalTransfer, UUPSUpgradeable, OwnableUpgradeable {\\r\\n\\r\\n  /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n  constructor() { _disableInitializers(); }\\r\\n  function _authorizeUpgrade(address) internal override onlyOwner {}\\r\\n\\r\\n  struct DeviceMapping {\\r\\n    uint256 timestamp;\\r\\n    int256 height;\\r\\n    string sncode;\\r\\n  }\\r\\n\\r\\n  struct TokenMapping {\\r\\n    address token;\\r\\n    uint256 tokenId;\\r\\n  }\\r\\n\\r\\n  struct Reward {\\r\\n    address token;\\r\\n    uint256 amount;\\r\\n  }\\r\\n\\r\\n  mapping(address => string) private AddressMapDevice;\\r\\n  mapping(string => TokenMapping) private DeviceMapToken;\\r\\n  mapping(address => mapping(uint256 => DeviceMapping)) private TokenMapDevice;\\r\\n\\r\\n  mapping(string => bool) private ClaimIDsMapClaimed;\\r\\n\\r\\n  error DeviceRegistered();\\r\\n  error DeviceUnregistered();\\r\\n  error DeviceEmpty();\\r\\n  error ClaimInvalidClaimed();\\r\\n  error ERC721IncorrectOwner();\\r\\n\\r\\n  event Claimed(\\r\\n    address indexed token,\\r\\n    uint256 indexed tokenId,\\r\\n    string uid,\\r\\n    string sncode,\\r\\n    address to,\\r\\n    Reward[] rewards,\\r\\n    string memo,\\r\\n    int256 blockHeight,\\r\\n    uint256 timestamp\\r\\n  );\\r\\n\\r\\n  event Registered(\\r\\n    address indexed token,\\r\\n    uint256 indexed tokenId,\\r\\n    address indexed sender,\\r\\n    string sncode,\\r\\n    int256 blockHeight,\\r\\n    uint256 timestamp\\r\\n  );\\r\\n\\r\\n  event Binded(\\r\\n    address indexed owner,\\r\\n    string sncode,\\r\\n    int256 blockHeight,\\r\\n    uint256 timestamp\\r\\n  );\\r\\n\\r\\n\\r\\n  function initialize(address _owner, address _verifier) public initializer {\\r\\n    __Ownable_init(_owner);\\r\\n    __Proxyed_init(_owner);\\r\\n    __Verifie_init(_verifier);\\r\\n    __UUPSUpgradeable_init();\\r\\n  }\\r\\n\\r\\n  function register(address sender, address token, uint256 tokenId, string memory sncode) public proxy(sender) {\\r\\n    if (IERC721(token).ownerOf(tokenId) != sender)\\r\\n      revert ERC721IncorrectOwner();\\r\\n    if (bytes(sncode).length == 0)\\r\\n      revert DeviceEmpty();\\r\\n    if (DeviceMapToken[sncode].token != address(0))\\r\\n      revert DeviceRegistered();\\r\\n\\r\\n    TokenMapDevice[token][tokenId] = DeviceMapping(block.timestamp, int(block.number), sncode);\\r\\n    DeviceMapToken[sncode] = TokenMapping(token, tokenId);\\r\\n    \\r\\n    emit Registered(\\r\\n      token,\\r\\n      tokenId,\\r\\n      sender,\\r\\n      sncode, \\r\\n      int(block.number), \\r\\n      block.timestamp\\r\\n    );\\r\\n\\r\\n    AddressMapDevice[sender] = sncode;\\r\\n\\r\\n    emit Binded(sender, sncode, int(block.number), block.timestamp);\\r\\n  }\\r\\n\\r\\n  function rebind(address sender, string memory sncode) public proxy(sender) {\\r\\n    if (bytes(sncode).length == 0)\\r\\n      revert DeviceEmpty();\\r\\n    if (DeviceMapToken[sncode].token == address(0))\\r\\n      revert DeviceUnregistered();\\r\\n    if (IERC721(DeviceMapToken[sncode].token)\\r\\n       .ownerOf(DeviceMapToken[sncode].tokenId) != msg.sender)\\r\\n      revert ERC721IncorrectOwner();\\r\\n\\r\\n    AddressMapDevice[msg.sender] = sncode;\\r\\n\\r\\n    emit Binded(msg.sender, sncode, int(block.number), block.timestamp);\\r\\n  }\\r\\n\\r\\n  function claim(\\r\\n    address sender,\\r\\n    string memory uid,\\r\\n    string memory sncode,\\r\\n    Reward[] memory rewards,\\r\\n    bytes memory signature, \\r\\n    string memory memo\\r\\n  ) public proxy(sender) {\\r\\n    TokenMapping memory tmapping = DeviceMapToken[sncode];\\r\\n    if (tmapping.token == address(0))\\r\\n      revert DeviceUnregistered();\\r\\n    if (IERC721(tmapping.token).ownerOf(tmapping.tokenId) != sender)\\r\\n      revert ERC721IncorrectOwner();\\r\\n    if (ClaimIDsMapClaimed[uid])\\r\\n      revert ClaimInvalidClaimed();\\r\\n\\r\\n    bytes32 rewardsHash = keccak256(abi.encode(rewards));\\r\\n    verify(abi.encodePacked(uid, sender, sncode, rewardsHash), signature);\\r\\n\\r\\n    ClaimIDsMapClaimed[uid] = true;\\r\\n\\r\\n    for (uint256 i = 0; i < rewards.length; i++) {\\r\\n      if (rewards[i].amount > 0)\\r\\n        transfer(\\r\\n          address(this),\\r\\n          sender,\\r\\n          rewards[i].token, \\r\\n          rewards[i].amount\\r\\n        );\\r\\n    }\\r\\n    \\r\\n    emit Claimed(\\r\\n      tmapping.token,\\r\\n      tmapping.tokenId, \\r\\n      uid,\\r\\n      sncode,\\r\\n      sender, \\r\\n      rewards,\\r\\n      memo,\\r\\n      int(block.number),\\r\\n      block.timestamp\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function getTokenInAddress(address user) public view returns (TokenMapping memory) {\\r\\n    return DeviceMapToken[AddressMapDevice[user]];\\r\\n  }\\r\\n\\r\\n  function getTokenInDevice(string memory sncode) public view returns (TokenMapping memory) {\\r\\n    return DeviceMapToken[sncode];\\r\\n  }\\r\\n\\r\\n  function getDeviceInToken(address token, uint256 tokenId) public view returns (DeviceMapping memory) {\\r\\n    return TokenMapDevice[token][tokenId];\\r\\n  }\\r\\n\\r\\n  function getDeviceInAddress(address user)  public view returns (string memory) {\\r\\n    return AddressMapDevice[user];\\r\\n  }\\r\\n  \\r\\n  function existsBinded(address token, uint256 tokenId) public view returns (bool) {\\r\\n    return bytes(getDeviceInToken(token, tokenId).sncode).length != 0;\\r\\n  }\\r\\n\\r\\n  function withdraw(address token, uint256 amount) public onlyOwner() {\\r\\n    transfer(address(this), msg.sender, token, amount);\\r\\n  }\\r\\n\\r\\n  function __migrate_Claimed(\\r\\n    address token, uint256 tokenId, string memory uid, string memory sncode,\\r\\n    address to, Reward[] memory rewards, string memory memo,\\r\\n    int256 blockHeight, uint256 timestamp\\r\\n  ) public onlyOwner {\\r\\n    ClaimIDsMapClaimed [uid] = true;\\r\\n    emit Claimed(\\r\\n      token,\\r\\n      tokenId,\\r\\n      uid,\\r\\n      sncode,\\r\\n      to,\\r\\n      rewards,\\r\\n      memo,\\r\\n      blockHeight,\\r\\n      timestamp\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function __migrate_Registered(\\r\\n    address token, uint256 tokenId, address sender,\\r\\n    string memory sncode, int256 blockHeight, uint256 timestamp\\r\\n  ) public onlyOwner {\\r\\n    TokenMapDevice[token][tokenId] = DeviceMapping(timestamp, blockHeight, sncode);\\r\\n    DeviceMapToken[sncode] = TokenMapping(token, tokenId);\\r\\n    AddressMapDevice[sender] = sncode;\\r\\n    emit Registered(\\r\\n      token,\\r\\n      tokenId,\\r\\n      sender,\\r\\n      sncode,\\r\\n      blockHeight,\\r\\n      timestamp\\r\\n    );\\r\\n    emit Binded(sender, sncode, blockHeight, timestamp);\\r\\n  }\\r\\n}\\r\\n\"\n    },\n    \"contracts/DoitRingFriend.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\\\";\\r\\nimport \\\"./utils/VerifiableUpgradeable.sol\\\";\\r\\nimport \\\"./utils/ProxyForwardUpgradeable.sol\\\";\\r\\n\\r\\ncontract DoitRingFriend is VerifiableUpgradeable, ProxyForwardUpgradeable, ERC721URIStorageUpgradeable, UUPSUpgradeable, OwnableUpgradeable {\\r\\n  uint256 private _tokenIds;\\r\\n\\r\\n  /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n  constructor() { _disableInitializers(); }\\r\\n  function _authorizeUpgrade(address) internal override onlyOwner {}\\r\\n\\r\\n  mapping(address => uint256) public userToGroup;\\r\\n\\r\\n  event GroupCreated(\\r\\n    address indexed creator,\\r\\n    uint256 group,\\r\\n    string tokenURI,\\r\\n    uint256 timestamp\\r\\n  );\\r\\n  event GroupJoined(\\r\\n    address indexed user,\\r\\n    uint256 group,\\r\\n    uint256 timestamp\\r\\n  );\\r\\n  event GroupLeaved(\\r\\n    address indexed user,\\r\\n    uint256 group,\\r\\n    uint256 timestamp\\r\\n  );\\r\\n\\r\\n  error UserAlreadyInGroup();\\r\\n  error UserNotInGroup();\\r\\n\\r\\n  function initialize(address _owner, address _verifier) public initializer {\\r\\n    __Ownable_init(_owner);\\r\\n    __Proxyed_init(_owner);\\r\\n    __Verifie_init(_verifier);\\r\\n    __UUPSUpgradeable_init();\\r\\n    _tokenIds = 1;\\r\\n  }\\r\\n\\r\\n  function create(address signer, string memory tokenURI, bytes memory signature) public proxy(signer) {\\r\\n    verify(abi.encodePacked(signer, tokenURI), signature);\\r\\n\\r\\n    uint256 groupId = mint(signer, tokenURI);\\r\\n\\r\\n    userToGroup[signer] = groupId;\\r\\n    emit GroupCreated(signer, groupId, tokenURI, block.timestamp);\\r\\n    emit GroupJoined(signer, groupId, block.timestamp);\\r\\n  }\\r\\n\\r\\n  function join(address signer, uint256 groupId, bytes memory signature) public proxy(signer) {\\r\\n    verify(abi.encodePacked(signer, groupId), signature);\\r\\n    if (userToGroup[signer] != 0) {\\r\\n      revert UserAlreadyInGroup();\\r\\n    }\\r\\n\\r\\n    userToGroup[signer] = groupId;\\r\\n    emit GroupJoined(signer, groupId, block.timestamp);\\r\\n  }\\r\\n\\r\\n  function leave(address signer) public proxy(signer) {\\r\\n    if (userToGroup[signer] == 0) {\\r\\n      revert UserNotInGroup();\\r\\n    }\\r\\n\\r\\n    uint256 groupId = userToGroup[signer];\\r\\n    delete userToGroup[signer];\\r\\n    emit GroupLeaved(signer, groupId, block.timestamp);\\r\\n  }\\r\\n\\r\\n  function group(address user) public view returns(uint256) {\\r\\n    return userToGroup[user];\\r\\n  }\\r\\n\\r\\n  function mint(address user, string memory tokenURI) internal returns (uint256) {\\r\\n    uint256 newItemId = _tokenIds;\\r\\n    _safeMint(user, newItemId);\\r\\n    _setTokenURI(newItemId, tokenURI);\\r\\n    _tokenIds++;\\r\\n    return newItemId;\\r\\n  }\\r\\n  \\r\\n  function _baseURI() internal pure override returns (string memory) {\\r\\n    return \\\"https://gateway.pinata.cloud/ipfs/\\\";\\r\\n  }\\r\\n}\"\n    },\n    \"contracts/DoitRingStaked.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"./utils/VerifiableUpgradeable.sol\\\";\\r\\nimport \\\"./utils/ProxyForwardUpgradeable.sol\\\";\\r\\nimport \\\"./utils/BidirectionalTransfer.sol\\\";\\r\\n\\r\\ncontract DoitRingStaked is VerifiableUpgradeable, ProxyForwardUpgradeable, BidirectionalTransfer, UUPSUpgradeable, OwnableUpgradeable {\\r\\n\\r\\n  /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n  constructor() { _disableInitializers(); }\\r\\n  function _authorizeUpgrade(address) internal override onlyOwner {}\\r\\n\\r\\n  uint256 locking;\\r\\n  mapping(address => Stake[]) public Stakes;\\r\\n  mapping(address => mapping(uint128 => uint256)) public Cancells;\\r\\n\\r\\n  error StakeEmpty();\\r\\n  error StakeAmountEmpty();\\r\\n  error StakeCancelEmpty();\\r\\n  error StakeCancelUnexpired();\\r\\n  \\r\\n  event StakeCreated(\\r\\n    address indexed staker,\\r\\n    uint indexed index,\\r\\n    address token,\\r\\n    uint amount,\\r\\n    uint timestamp\\r\\n  );\\r\\n\\r\\n  event StakeCancelled(\\r\\n    address indexed staker,\\r\\n    uint indexed index,\\r\\n    address token,\\r\\n    uint amount,\\r\\n    uint timestamp\\r\\n  );\\r\\n\\r\\n  event StakeClaimed(\\r\\n    address indexed staker,\\r\\n    uint indexed index,\\r\\n    address token,\\r\\n    uint amount,\\r\\n    uint timestamp\\r\\n  );\\r\\n\\r\\n  struct Stake {\\r\\n    uint index;\\r\\n    address staker;\\r\\n    address token;\\r\\n    uint amount;\\r\\n    uint timestamp;\\r\\n  }\\r\\n\\r\\n  function initialize(address _owner) public initializer {\\r\\n    __Ownable_init(_owner);\\r\\n    __Proxyed_init(_owner);\\r\\n    __UUPSUpgradeable_init();\\r\\n    locking = 30 * 86400;\\r\\n  }\\r\\n\\r\\n  function create(address sender, address token, uint amount) public proxy(sender) {\\r\\n    if (amount == 0)\\r\\n      revert StakeAmountEmpty();\\r\\n\\r\\n    uint index = Stakes[sender].length;\\r\\n\\r\\n    Stake memory stake = Stake(index, sender, token, amount, block.timestamp);\\r\\n    Stakes[sender].push(stake);\\r\\n\\r\\n    transfer(sender, address(this), token, amount);\\r\\n\\r\\n    emit StakeCreated(\\r\\n      sender,\\r\\n      index,\\r\\n      token,\\r\\n      amount,\\r\\n      block.timestamp\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function cancel(address sender, uint128 index) public proxy(sender) {\\r\\n    if (Stakes[sender][index].amount == 0)\\r\\n      revert StakeEmpty();\\r\\n\\r\\n    Cancells[sender][index] = block.timestamp + locking;\\r\\n\\r\\n    emit StakeCancelled(\\r\\n      sender,\\r\\n      index,\\r\\n      Stakes[sender][index].token, \\r\\n      Stakes[sender][index].amount,\\r\\n      block.timestamp\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function claim(address sender, uint128 index) public proxy(sender) {\\r\\n    if (Stakes[sender][index].amount == 0)\\r\\n      revert StakeEmpty();\\r\\n    if (Cancells[sender][index] == 0)\\r\\n      revert StakeCancelEmpty();\\r\\n    if (Cancells[sender][index] > block.timestamp)\\r\\n      revert StakeCancelUnexpired();\\r\\n\\r\\n    transfer(\\r\\n      address(this),\\r\\n      sender,\\r\\n      Stakes[sender][index].token,\\r\\n      Stakes[sender][index].amount\\r\\n    );\\r\\n\\r\\n   emit StakeClaimed(\\r\\n      sender,\\r\\n      index,\\r\\n      Stakes[sender][index].token, \\r\\n      Stakes[sender][index].amount, \\r\\n      block.timestamp\\r\\n    );\\r\\n\\r\\n    delete Stakes[sender][index];\\r\\n    delete Cancells[sender][index];\\r\\n  }\\r\\n\\r\\n  function stakes(address owner) public view returns(Stake[] memory) {\\r\\n    return Stakes[owner];\\r\\n  }\\r\\n\\r\\n  function status(address owner, uint128 index) public view returns(uint16) {\\r\\n    if (Cancells[owner][index] != 0) {\\r\\n      if (Cancells[owner][index] > block.timestamp)\\r\\n        return 3;\\r\\n      else\\r\\n        return 2;\\r\\n    }\\r\\n    if (Stakes[owner][index].amount != 0)\\r\\n      return 1;\\r\\n    else\\r\\n      return 0;\\r\\n  }\\r\\n\\r\\n  function length(address owner) public view returns(uint256) {\\r\\n   return Stakes[owner].length;\\r\\n  }\\r\\n\\r\\n  function expiration(address owner, uint128 index) public view returns(uint256) {\\r\\n    return Cancells[owner][index];\\r\\n  }\\r\\n\\r\\n  function exists(address owner, uint128 index) public view returns(bool) {\\r\\n    return Stakes[owner][index].amount != 0;\\r\\n  }\\r\\n\\r\\n  function setLocking(uint256 duration) public onlyOwner() {\\r\\n    locking = duration;\\r\\n  }\\r\\n\\r\\n  function __migrate_stakes(address owner, Stake[] memory stakes_) public onlyOwner() {\\r\\n    delete Stakes[owner];\\r\\n    for (uint256 index = 0; index < stakes_.length; index++) {\\r\\n      Stakes[owner].push(stakes_[index]);\\r\\n    }\\r\\n  }\\r\\n  \\r\\n  function __migrate_StakeCreated(address owner, uint256 index, address token, uint amount, uint timestamp) public onlyOwner() {\\r\\n    emit StakeCreated(\\r\\n      owner,\\r\\n      index,\\r\\n      token,\\r\\n      amount,\\r\\n      timestamp\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function __migrate_StakeCancelled(address owner, uint256 index, address token, uint amount, uint timestamp) public onlyOwner() {\\r\\n    emit StakeCancelled(\\r\\n      owner,\\r\\n      index,\\r\\n      token,\\r\\n      amount,\\r\\n      timestamp\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function __migrate_StakeClaimed(address owner, uint256 index, address token, uint amount, uint timestamp) public onlyOwner() {\\r\\n    emit StakeClaimed(\\r\\n      owner,\\r\\n      index,\\r\\n      token,\\r\\n      amount,\\r\\n      timestamp\\r\\n    );\\r\\n  }\\r\\n}\"\n    },\n    \"contracts/erc20/Health.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../utils/ProxyForward.sol\\\";\\r\\n\\r\\ncontract Health is ERC20, ProxyForward, Ownable {\\r\\n  constructor(address _owner) ERC20(\\\"Blueberry\\\", \\\"Blueberry\\\") Ownable(_owner) ProxyForward(_owner) {\\r\\n    _mint(_owner, 40000000 * 10 ** 18);\\r\\n  }\\r\\n\\r\\n  function mint(address account,  uint256 amount) public onlyOwner {\\r\\n    _mint(account, amount);\\r\\n  }\\r\\n\\r\\n  function proxy_approve(address signer, address spender, uint256 value) public proxy(signer) {\\r\\n    _approve(signer, spender, value);\\r\\n  }\\r\\n}\\r\\n\"\n    },\n    \"contracts/erc20/USDT.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract USDT is ERC20, Ownable {\\r\\n  constructor(address _owner) ERC20(\\\"USDT\\\", \\\"USDT\\\") Ownable(msg.sender) {\\r\\n    _mint(_owner, 40000000 * 10 ** 18);\\r\\n  }\\r\\n\\r\\n  function mint(address account,  uint256 amount) public onlyOwner {\\r\\n    _mint(account, amount);\\r\\n  }\\r\\n}\\r\\n\"\n    },\n    \"contracts/erc721/DoitRingNFT.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../utils/ProxyForward.sol\\\";\\r\\n\\r\\ncontract DoitRingNFT is ERC721, ProxyForward, Ownable {\\r\\n  constructor(address _owner) ERC721(\\\"DoitRingNFT\\\", \\\"DoitRingNFT\\\") Ownable(_owner) ProxyForward(_owner) {\\r\\n    _tokenIdCounter = 1;\\r\\n    totalSupply = 1;\\r\\n  }\\r\\n\\r\\n  uint256 private _tokenIdCounter;\\r\\n  uint128 public totalSupply;\\r\\n\\r\\n  function mint(address signer) public proxy(signer) {\\r\\n    uint256 tokenId = _tokenIdCounter;\\r\\n    _safeMint(signer, tokenId);\\r\\n    _tokenIdCounter += 1;\\r\\n    totalSupply += 1;\\r\\n  }\\r\\n\\r\\n  function __migrate_mint(address signer, uint256 tokenId) public onlyOwner {\\r\\n    _safeMint(signer, tokenId);\\r\\n    _tokenIdCounter += 1;\\r\\n    totalSupply += 1;\\r\\n  }\\r\\n}\\r\\n\"\n    },\n    \"contracts/interfaces/IStake.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\ninterface IStake {\\r\\n\\r\\n  event StakeCreated(\\r\\n    address indexed staker,\\r\\n    uint indexed index,\\r\\n    address token,\\r\\n    uint amount,\\r\\n    uint timestamp\\r\\n  );\\r\\n\\r\\n  event StakeCancelled(\\r\\n    address indexed staker,\\r\\n    uint indexed index,\\r\\n    address token,\\r\\n    uint amount,\\r\\n    uint timestamp\\r\\n  );\\r\\n\\r\\n  event StakeClaimed(\\r\\n    address indexed staker,\\r\\n    uint indexed index,\\r\\n    address token,\\r\\n    uint amount,\\r\\n    uint timestamp\\r\\n  );\\r\\n\\r\\n  struct Stake {\\r\\n    uint index;\\r\\n    address staker;\\r\\n    address token;\\r\\n    uint amount;\\r\\n    uint timestamp;\\r\\n  }\\r\\n}\"\n    },\n    \"contracts/Savings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"./utils/ProxyForwardUpgradeable.sol\\\";\\r\\nimport \\\"./utils/BidirectionalTransfer.sol\\\";\\r\\n\\r\\ncontract Savings is Initializable, BidirectionalTransfer, ProxyForwardUpgradeable, UUPSUpgradeable, OwnableUpgradeable, ReentrancyGuardUpgradeable  {\\r\\n  /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n  constructor() { _disableInitializers(); }\\r\\n  function _authorizeUpgrade(address) internal override onlyOwner {}\\r\\n\\r\\n\\r\\n  event Deposited(\\r\\n    address indexed sender,\\r\\n    address indexed receiver,\\r\\n    address token,\\r\\n    uint256 amount,\\r\\n    string memo\\r\\n  );\\r\\n\\r\\n  event Withdrawn(\\r\\n    address indexed receiver,\\r\\n    address token,\\r\\n    uint256 amount\\r\\n  );\\r\\n\\r\\n  mapping(address => mapping(address => uint256)) Treasury; \\r\\n\\r\\n  function initialize(address _owner) public initializer {\\r\\n    __Ownable_init(_owner);\\r\\n    __Proxyed_init(_owner);\\r\\n    __UUPSUpgradeable_init();\\r\\n  }\\r\\n\\r\\n  function balanceOf(address owner, address token) public view returns(uint256) {\\r\\n    return Treasury[owner][token];\\r\\n  }\\r\\n\\r\\n  function deposit(address owner, address token, uint256 amount, string memory memo) external payable {\\r\\n    Treasury[owner][token] += amount;\\r\\n    transfer(msg.sender, address(this), token, amount);\\r\\n    emit Deposited(msg.sender, owner, token, amount, memo);\\r\\n  }\\r\\n\\r\\n  function withdraw(address owner, address token) external payable proxy(owner) {\\r\\n    transfer(address(this), owner, token, Treasury[owner][token]);\\r\\n    emit Withdrawn(owner, token, Treasury[owner][token]);\\r\\n    delete Treasury[owner][token];\\r\\n  }\\r\\n}\"\n    },\n    \"contracts/Storage.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\ncontract Storage is Initializable {\\r\\n  mapping(string => mapping(string => string)) private data;\\r\\n\\r\\n  event StorageUpdated (\\r\\n    address indexed sender,\\r\\n    string indexed storeIndexed,\\r\\n    string indexed keyIndexed,\\r\\n    string store,\\r\\n    string key,\\r\\n    string value\\r\\n  );\\r\\n\\r\\n  function initialize() public initializer {}\\r\\n\\r\\n  function setStorage(string memory store, string[][] memory pairs) public {\\r\\n    for (uint256 i = 0; i < pairs.length; i++)\\r\\n      setItem(store, pairs[i][0], pairs[i][1]);\\r\\n  }\\r\\n\\r\\n  function getStorage(\\r\\n    string memory store, string[] memory keys\\r\\n  ) public view returns (string[] memory, string[] memory) {\\r\\n    uint256 length = size(store, keys);\\r\\n\\r\\n    string[] memory _keys = new string[](length);\\r\\n    string[] memory values = new string[](length);\\r\\n\\r\\n    for (uint256 i = 0; i < keys.length; i++) {\\r\\n      if (bytes(data[store][keys[i]]).length == 0)\\r\\n        continue;\\r\\n      values[i] = data[store][keys[i]];\\r\\n      _keys[i] = keys[i];\\r\\n    }\\r\\n    \\r\\n    return (_keys, values);\\r\\n  }\\r\\n\\r\\n  function setItem(\\r\\n    string memory store,\\r\\n    string memory key,\\r\\n    string memory value\\r\\n  ) public {\\r\\n    data[store][key] = value;\\r\\n    emit StorageUpdated(\\r\\n      msg.sender,\\r\\n      store,\\r\\n      key,\\r\\n      store,\\r\\n      key,\\r\\n      value\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function getItem(\\r\\n    string memory store,\\r\\n    string memory key\\r\\n  ) public view returns (string memory) {\\r\\n    if (bytes(data[store][key]).length == 0)\\r\\n     return '';\\r\\n    return data[store][key];\\r\\n  }\\r\\n\\r\\n  function size(string memory store, string[] memory keys) public view returns (uint256) {\\r\\n    uint256 value = 0;\\r\\n    for (uint256 i = 0; i < keys.length; i++) {\\r\\n      if (bytes(data[store][keys[i]]).length == 0)\\r\\n        continue;\\r\\n      value++;\\r\\n    }\\r\\n    return value;\\r\\n  }\\r\\n\\r\\n  function has(string memory store, string memory key) public view returns (bool) {\\r\\n    return bytes(data[store][key]).length != 0;\\r\\n  }\\r\\n}\\r\\n\"\n    },\n    \"contracts/utils/BidirectionalTransfer.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\ncontract BidirectionalTransfer {\\r\\n  error TransferFailed();\\r\\n  error TransferUnauthorized();\\r\\n\\r\\n  receive() external payable {}\\r\\n\\r\\n  function erc20Transfer(address from, address to, address token, uint256 amount) internal {\\r\\n    bytes memory data;\\r\\n    if (from == address(this)) {\\r\\n      bytes4 method = bytes4(keccak256(\\\"transfer(address,uint256)\\\"));\\r\\n      data = abi.encodeWithSelector(method, to, amount);\\r\\n    } else {\\r\\n      bytes4 method = bytes4(keccak256(\\\"transferFrom(address,address,uint256)\\\"));\\r\\n      data = abi.encodeWithSelector(method, from, to, amount);\\r\\n    }\\r\\n    (bool sent,) = token.call(data);\\r\\n    if (!sent)\\r\\n     revert TransferFailed();\\r\\n  }\\r\\n  \\r\\n  function etherTransfer(address from, address to, uint256 amount) internal {\\r\\n    if (from == address(this)) {\\r\\n      (bool sent, ) = to.call{ value: amount }(\\\"\\\");\\r\\n      if (!sent)\\r\\n        revert TransferFailed();\\r\\n    } else {\\r\\n      if (from != msg.sender)\\r\\n        revert TransferUnauthorized();\\r\\n      if (msg.value != amount)\\r\\n        revert TransferFailed();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function transfer(address from, address to, address token, uint256 amount) internal {\\r\\n    if (token != address(0))\\r\\n      erc20Transfer(from, to, token, amount);\\r\\n    else\\r\\n      etherTransfer(from, to, amount);\\r\\n  }\\r\\n}\"\n    },\n    \"contracts/utils/ProxyForward.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract ProxyForward {\\r\\n  address internal agent;\\r\\n\\r\\n  error InvalidAccount();\\r\\n\\r\\n  constructor(address initialAgent) {\\r\\n    agent = initialAgent;\\r\\n  }\\r\\n\\r\\n  modifier proxy(address signer) {\\r\\n    if (signer != msg.sender && msg.sender != agent)\\r\\n      revert InvalidAccount();\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function getAgent() public view returns (address) {\\r\\n    return agent;\\r\\n  }\\r\\n\\r\\n  function setAgent(address newAgent) public virtual {\\r\\n    require(msg.sender == agent, \\\"Not Agent Account\\\");\\r\\n    agent = newAgent;\\r\\n  }\\r\\n}\"\n    },\n    \"contracts/utils/ProxyForwardUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\nabstract contract ProxyForwardUpgradeable is Initializable {\\r\\n  address internal agent;\\r\\n\\r\\n  error InvalidAccount();\\r\\n\\r\\n  modifier proxy(address signer) {\\r\\n    if (signer != msg.sender && msg.sender != agent)\\r\\n      revert InvalidAccount();\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function getAgent() public view returns (address) {\\r\\n    return agent;\\r\\n  }\\r\\n\\r\\n  function setAgent(address newAgent) public virtual {\\r\\n    require(msg.sender == agent, \\\"Not Agent Account\\\");\\r\\n    agent = newAgent;\\r\\n  }\\r\\n\\r\\n  function __Proxyed_init(address initialAgent) internal onlyInitializing {\\r\\n    agent = initialAgent;\\r\\n  }\\r\\n}\"\n    },\n    \"contracts/utils/Verifiable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\nabstract contract Verifiable {\\r\\n  address internal verifier;\\r\\n\\r\\n  error InvalidSignature();\\r\\n\\r\\n  constructor(address initialVerifier) {\\r\\n    verifier = initialVerifier;\\r\\n  }\\r\\n\\r\\n  function recover(bytes32 message, bytes memory signature) internal pure returns (address) {\\r\\n    require(signature.length == 65, \\\"invalid signature length\\\");\\r\\n    bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", message));\\r\\n    bytes32 r;\\r\\n    bytes32 s;\\r\\n    uint8 v;\\r\\n    assembly {\\r\\n      r := mload(add(signature, 0x20))\\r\\n      s := mload(add(signature, 0x40))\\r\\n      v := byte(0, mload(add(signature, 0x60)))\\r\\n    }\\r\\n    \\r\\n    return ecrecover(digest, v, r, s);\\r\\n  }\\r\\n\\r\\n  function verify(bytes memory message, bytes memory signature) internal view virtual {\\r\\n    if (recover(keccak256(message), signature) != verifier) {\\r\\n      revert InvalidSignature();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getVerifier() public view returns (address) {\\r\\n    return verifier;\\r\\n  }\\r\\n\\r\\n  function setVerifier(address newVerifier) public virtual {\\r\\n    require(msg.sender == verifier, \\\"Not Verifier Account\\\");\\r\\n    verifier = newVerifier;\\r\\n  }\\r\\n}\"\n    },\n    \"contracts/utils/VerifiableUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\nabstract contract VerifiableUpgradeable is Initializable {\\r\\n  address internal verifier;\\r\\n\\r\\n  error InvalidSignature();\\r\\n\\r\\n  function recover(bytes32 message, bytes memory signature) internal pure returns (address) {\\r\\n    require(signature.length == 65, \\\"invalid signature length\\\");\\r\\n    bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", message));\\r\\n    bytes32 r;\\r\\n    bytes32 s;\\r\\n    uint8 v;\\r\\n    assembly {\\r\\n      r := mload(add(signature, 0x20))\\r\\n      s := mload(add(signature, 0x40))\\r\\n      v := byte(0, mload(add(signature, 0x60)))\\r\\n    }\\r\\n    \\r\\n    return ecrecover(digest, v, r, s);\\r\\n  }\\r\\n\\r\\n  function verify(bytes memory message, bytes memory signature) internal view virtual {\\r\\n    if (recover(keccak256(message), signature) != verifier) {\\r\\n      revert InvalidSignature();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getVerifier() public view returns (address) {\\r\\n    return verifier;\\r\\n  }\\r\\n\\r\\n  function setVerifier(address newVerifier) public virtual {\\r\\n    require(msg.sender == verifier, \\\"Not Verifier Account\\\");\\r\\n    verifier = newVerifier;\\r\\n  }\\r\\n\\r\\n  function __Verifie_init(address initialVerifier) internal onlyInitializing {\\r\\n    verifier = initialVerifier;\\r\\n  }\\r\\n}\"\n    }\n  },\n  \"settings\": {\n    \"evmVersion\": \"paris\",\n    \"optimizer\": {\n      \"enabled\": false,\n      \"runs\": 200\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"storageLayout\",\n          \"devdoc\",\n          \"userdoc\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
    "solcInputHash": "45aa15625659fe6b558234dd76c7d46f"
  }
}
